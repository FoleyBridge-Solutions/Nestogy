@extends('layouts.app')

@section('content')
<div class="min-h-screen bg-gray-50" x-data="{ 
    mobileMenuOpen: false,
    closeMobileMenu() { this.mobileMenuOpen = false; }
}" 
@click.away="closeMobileMenu()"
@close-mobile-menu.window="closeMobileMenu()"
    <div class="container mx-auto px-4 py-6">
        <!-- Header -->
        <div class="mb-6">
            <div class="flex justify-between items-center">
                <div class="flex items-center space-x-4">
                    <!-- Mobile Menu Button -->
                    <button @click="mobileMenuOpen = !mobileMenuOpen"
                            class="lg:hidden p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                        </svg>
                    </button>
                    <div>
                        <h1 class="text-2xl lg:text-3xl font-bold text-gray-900">@yield('settings-title', 'Settings')</h1>
                        <p class="text-gray-600 mt-1 text-sm lg:text-base">@yield('settings-description', 'Configure your system preferences')</p>
                    </div>
                </div>
                <div class="flex space-x-2">
                    @yield('settings-actions')
                </div>
            </div>
        </div>

        <!-- Main Content Area -->
        <div class="lg:flex lg:gap-6">
            <!-- Mobile Sidebar Overlay -->
            <div x-show="mobileMenuOpen"
                 x-transition:enter="transition-all ease-out duration-300"
                 x-transition:enter-start="opacity-0"
                 x-transition:enter-end="opacity-100"
                 x-transition:leave="transition-all ease-in duration-200"
                 x-transition:leave-start="opacity-100"
                 x-transition:leave-end="opacity-0"
                 class="fixed inset-0 z-50 lg:hidden"
                 style="display: none;">
                
                <!-- Backdrop -->
                <div class="fixed inset-0 bg-black/30 backdrop-blur-sm" @click="closeMobileMenu()"></div>
                
                <!-- Mobile Sidebar -->
                <div class="relative flex flex-col w-80 max-w-[85vw] h-full bg-white shadow-2xl"
                     x-transition:enter="transition-transform ease-out duration-300"
                     x-transition:enter-start="-translate-x-full"
                     x-transition:enter-end="translate-x-0"
                     x-transition:leave="transition-transform ease-in duration-200"
                     x-transition:leave-start="translate-x-0"
                     x-transition:leave-end="-translate-x-full">
                    
                    <!-- Mobile Header -->
                    <div class="flex items-center justify-between p-4 border-b border-gray-200">
                        <h2 class="text-lg font-semibold text-gray-900">Settings Menu</h2>
                        <button @click="closeMobileMenu()"
                                class="p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                    
                    <!-- Mobile Navigation -->
                    <div class="flex-1 overflow-y-auto">
                        @include('settings.partials.navigation', ['mobile' => true])
                    </div>
                </div>
            </div>

            <!-- Desktop Sidebar Navigation -->
            <div class="hidden lg:block w-64 flex-shrink-0">
                @include('settings.partials.navigation', ['mobile' => false])
            </div>

            <!-- Settings Content -->
            <div class="flex-1 mt-6 lg:mt-0">
                <!-- Success/Error Messages -->
                @if (session('success'))
                    <div class="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                        <span class="block sm:inline">{{ session('success') }}</span>
                    </div>
                @endif

                @if (session('error'))
                    <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                        <span class="block sm:inline">{{ session('error') }}</span>
                    </div>
                @endif

                @if ($errors->any())
                    <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                        <ul class="list-disc list-inside">
                            @foreach ($errors->all() as $error)
                                <li>{{ $error }}</li>
                            @endforeach
                        </ul>
                    </div>
                @endif

                <!-- Page Content -->
                <div class="bg-white rounded-lg shadow-sm">
                    @yield('settings-content')
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Global Settings Scripts -->
@push('scripts')
<script>
document.addEventListener('alpine:init', () => {
    // Global settings utilities
    Alpine.data('settingsForm', (initialData = {}) => ({
        formData: initialData,
        loading: false,
        isDirty: false,
        originalData: JSON.stringify(initialData),
        
        init() {
            // Track changes
            this.$watch('formData', () => {
                this.isDirty = JSON.stringify(this.formData) !== this.originalData;
            }, { deep: true });
            
            // Warn before leaving with unsaved changes
            window.addEventListener('beforeunload', (e) => {
                if (this.isDirty) {
                    e.preventDefault();
                    e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
                }
            });
        },
        
        async saveSettings(url, method = 'POST') {
            this.loading = true;
            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token() }}',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(this.formData)
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    this.originalData = JSON.stringify(this.formData);
                    this.isDirty = false;
                    this.$dispatch('notify', { 
                        type: 'success', 
                        message: data.message || 'Settings saved successfully' 
                    });
                    
                    // Reload page after short delay to show notification
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    this.$dispatch('notify', { 
                        type: 'error', 
                        message: data.message || 'Failed to save settings' 
                    });
                }
            } catch (error) {
                console.error('Save settings error:', error);
                this.$dispatch('notify', { 
                    type: 'error', 
                    message: 'An error occurred while saving settings' 
                });
            } finally {
                this.loading = false;
            }
        },
        
        resetForm() {
            this.formData = JSON.parse(this.originalData);
            this.isDirty = false;
        }
    }));
    
    // Notification system
    Alpine.data('notifications', () => ({
        notifications: [],
        
        init() {
            this.$el.addEventListener('notify', (event) => {
                this.addNotification(event.detail);
            });
        },
        
        addNotification(notification) {
            const id = Date.now();
            this.notifications.push({
                id,
                ...notification
            });
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                this.removeNotification(id);
            }, 5000);
        },
        
        removeNotification(id) {
            this.notifications = this.notifications.filter(n => n.id !== id);
        }
    }));
});
</script>
@endpush

<!-- Notification Container -->
<div x-data="notifications" 
     @notify.window="addNotification($event.detail)"
     class="fixed top-4 right-4 z-50 space-y-2">
    <template x-for="notification in notifications" :key="notification.id">
        <div x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform translate-x-full"
             x-transition:enter-end="opacity-100 transform translate-x-0"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100 transform translate-x-0"
             x-transition:leave-end="opacity-0 transform translate-x-full"
             :class="{
                 'bg-green-100 border-green-400 text-green-700': notification.type === 'success',
                 'bg-red-100 border-red-400 text-red-700': notification.type === 'error',
                 'bg-yellow-100 border-yellow-400 text-yellow-700': notification.type === 'warning',
                 'bg-blue-100 border-blue-400 text-blue-700': notification.type === 'info'
             }"
             class="border px-4 py-3 rounded relative shadow-md min-w-[300px] max-w-md">
            <span x-text="notification.message"></span>
            <button @click="removeNotification(notification.id)" 
                    class="absolute top-0 right-0 p-2">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
    </template>
</div>
@endsection