@extends('layouts.settings')

@section('title', 'Template Clauses - ' . $template->name . ' - Settings - Nestogy')

@section('settings-title', 'Template Clauses')
@section('settings-description', 'Manage clauses included in "' . $template->name . '" contract template')

@section('settings-actions')
<div class="flex space-x-3">
    <button onclick="togglePreview()" 
            class="inline-flex items-center px-4 py-2 bg-green-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
        </svg>
        Preview Template
    </button>
    <button onclick="showAddClausesModal()" 
            class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Add Clauses
    </button>
</div>
@endsection

@push('scripts')
<script>
    // Pass server data to JavaScript
    window.templateId = {{ $template->id }};
    window.csrfToken = '{{ csrf_token() }}';
    
    // Template clause management Alpine.js component
    window.templateClauses = function() {
        return {
            showAddModal: false,
            showPreview: false,
            previewContent: '',
            loading: false,
            selectedClauses: [],
            draggedItem: null,
            searchQuery: '',
            selectedCategory: '',
            
            init() {
                console.log('Template clauses initialized');
            },
            
            // Toggle preview modal
            togglePreview() {
                if (this.showPreview) {
                    this.showPreview = false;
                    return;
                }
                
                this.loadPreview();
            },
            
            // Load template preview
            async loadPreview() {
                this.loading = true;
                try {
                    const response = await fetch(`/settings/template-clauses/${window.templateId}/preview`, {
                        method: 'GET',
                        headers: {
                            'Accept': 'application/json',
                            'X-CSRF-TOKEN': window.csrfToken
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        this.previewContent = data.preview;
                        this.showPreview = true;
                    } else {
                        alert('Failed to load preview');
                    }
                } catch (error) {
                    console.error('Preview error:', error);
                    alert('Failed to load preview');
                } finally {
                    this.loading = false;
                }
            },
            
            // Show add clauses modal
            showAddClausesModal() {
                this.showAddModal = true;
                this.selectedClauses = [];
            },
            
            // Toggle clause selection
            toggleClauseSelection(clauseId) {
                const index = this.selectedClauses.indexOf(clauseId);
                if (index > -1) {
                    this.selectedClauses.splice(index, 1);
                } else {
                    this.selectedClauses.push(clauseId);
                }
            },
            
            // Add selected clauses to template
            async addSelectedClauses() {
                if (this.selectedClauses.length === 0) {
                    alert('Please select at least one clause');
                    return;
                }
                
                this.loading = true;
                try {
                    const response = await fetch(`/settings/template-clauses/${window.templateId}/attach`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-CSRF-TOKEN': window.csrfToken
                        },
                        body: JSON.stringify({
                            clause_ids: this.selectedClauses
                        })
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        alert(data.message);
                        location.reload();
                    } else {
                        const error = await response.json();
                        alert(error.error || 'Failed to add clauses');
                    }
                } catch (error) {
                    console.error('Add clauses error:', error);
                    alert('Failed to add clauses');
                } finally {
                    this.loading = false;
                }
            },
            
            // Remove clause from template
            async removeClause(clauseId) {
                if (!confirm('Are you sure you want to remove this clause from the template?')) {
                    return;
                }
                
                try {
                    const response = await fetch(`/settings/template-clauses/${window.templateId}/${clauseId}`, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json',
                            'X-CSRF-TOKEN': window.csrfToken
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        alert(data.message);
                        location.reload();
                    } else {
                        const error = await response.json();
                        alert(error.error || 'Failed to remove clause');
                    }
                } catch (error) {
                    console.error('Remove clause error:', error);
                    alert('Failed to remove clause');
                }
            },
            
            // Drag and drop handlers
            startDrag(clauseId, event) {
                this.draggedItem = clauseId;
                
                // Add visual feedback
                event.target.classList.add('opacity-50');
                event.dataTransfer.effectAllowed = 'move';
            },
            
            endDrag(event) {
                // Remove visual feedback
                event.target.classList.remove('opacity-50');
            },
            
            allowDrop(event) {
                event.preventDefault();
                event.dataTransfer.dropEffect = 'move';
            },
            
            dragEnter(event, targetId) {
                event.preventDefault();
                if (this.draggedItem && this.draggedItem !== targetId) {
                    event.target.closest('[data-clause-id]').classList.add('bg-blue-50', 'dark:bg-blue-900');
                }
            },
            
            dragLeave(event, targetId) {
                event.target.closest('[data-clause-id]').classList.remove('bg-blue-50', 'dark:bg-blue-900');
            },
            
            drop(event, targetId) {
                event.preventDefault();
                
                // Remove all visual feedback
                document.querySelectorAll('[data-clause-id]').forEach(el => {
                    el.classList.remove('bg-blue-50', 'dark:bg-blue-900', 'opacity-50');
                });
                
                if (this.draggedItem && this.draggedItem !== targetId) {
                    this.reorderClauses(this.draggedItem, targetId);
                }
                this.draggedItem = null;
            },
            
            // Reorder clauses
            async reorderClauses(draggedId, targetId) {
                this.loading = true;
                
                // Get current order and update it
                const clauseElements = Array.from(document.querySelectorAll('[data-clause-id]'));
                const clauseIds = clauseElements.map(el => parseInt(el.dataset.clauseId));
                
                // Move dragged item to new position
                const draggedIndex = clauseIds.indexOf(parseInt(draggedId));
                const targetIndex = clauseIds.indexOf(parseInt(targetId));
                
                clauseIds.splice(draggedIndex, 1);
                clauseIds.splice(targetIndex, 0, parseInt(draggedId));
                
                try {
                    const response = await fetch(`/settings/template-clauses/${window.templateId}/reorder`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-CSRF-TOKEN': window.csrfToken
                        },
                        body: JSON.stringify({
                            clause_ids: clauseIds
                        })
                    });
                    
                    if (response.ok) {
                        // Update DOM order dynamically instead of reloading
                        this.updateDOMOrder(clauseIds);
                        
                        // Optional: Show a subtle success indicator
                        this.showSuccessToast('Clause order updated');
                    } else {
                        const error = await response.json();
                        alert(error.error || 'Failed to reorder clauses');
                        // Revert DOM changes on failure
                        location.reload();
                    }
                } catch (error) {
                    console.error('Reorder error:', error);
                    alert('Failed to reorder clauses');
                    // Revert DOM changes on failure
                    location.reload();
                } finally {
                    this.loading = false;
                }
            },
            
            // Update DOM order without page reload
            updateDOMOrder(clauseIds) {
                const container = document.querySelector('[data-clause-container]');
                if (!container) return;
                
                // Get all clause elements
                const clauseElements = Array.from(container.querySelectorAll('[data-clause-id]'));
                
                // Reorder elements in DOM according to new order
                clauseIds.forEach(clauseId => {
                    const element = clauseElements.find(el => parseInt(el.dataset.clauseId) === clauseId);
                    if (element) {
                        container.appendChild(element);
                    }
                });
            },
            
            // Show subtle success toast
            showSuccessToast(message) {
                // Create a simple toast notification
                const toast = document.createElement('div');
                toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50 transition-opacity duration-300';
                toast.textContent = message;
                document.body.appendChild(toast);
                
                // Remove toast after 3 seconds
                setTimeout(() => {
                    toast.style.opacity = '0';
                    setTimeout(() => document.body.removeChild(toast), 300);
                }, 3000);
            },
            
            // Copy preview content to clipboard
            async copyToClipboard() {
                try {
                    await navigator.clipboard.writeText(this.previewContent);
                    alert('Template content copied to clipboard!');
                } catch (error) {
                    console.error('Failed to copy to clipboard:', error);
                    // Fallback for older browsers
                    const textArea = document.createElement('textarea');
                    textArea.value = this.previewContent;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    alert('Template content copied to clipboard!');
                }
            }
        };
    };
    
    // Global functions for buttons
    function togglePreview() {
        window.templateClausesInstance.togglePreview();
    }
    
    function showAddClausesModal() {
        window.templateClausesInstance.showAddClausesModal();
    }
    
    // Store instance for global access
    document.addEventListener('alpine:init', () => {
        Alpine.data('templateClauses', window.templateClauses);
    });
</script>
@endpush

@section('settings-content')
<div x-data="templateClauses()" x-init="window.templateClausesInstance = $data">

    <!-- Template Information -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-6">
        <div class="flex items-start justify-between">
            <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">{{ $template->name }}</h3>
                <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">{{ $template->description }}</p>
                <div class="flex items-center space-x-4 mt-3 text-sm text-gray-500 dark:text-gray-400">
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"></path>
                        </svg>
                        {{ ucfirst(str_replace('_', ' ', $template->template_type)) }}
                    </span>
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        {{ $templateClauses->count() }} clause(s)
                    </span>
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        {{ $templateClauses->where('pivot.is_required', true)->count() }} required
                    </span>
                </div>
            </div>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium 
                @if($template->status === 'active') bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200
                @elseif($template->status === 'draft') bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200
               @else bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200 @endif">
                {{ ucfirst($template->status) }}
            </span>
        </div>
    </div>

    <!-- Template Clauses List -->
    <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg relative">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">Template Clauses</h3>
            <p class="text-sm text-gray-600 dark:text-gray-400">Drag to reorder clauses, or click to modify settings</p>
        </div>

        @if($templateClauses->count() > 0)
            <!-- Loading overlay -->
            <div x-show="loading" class="absolute inset-0 bg-white bg-opacity-75 dark:bg-gray-800 dark:bg-opacity-75 flex items-center justify-center z-10">
                <div class="flex items-center space-x-2 text-gray-600 dark:text-gray-300">
                    <svg class="animate-spin w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    <span>Updating order...</span>
                </div>
            </div>
            
            <div class="divide-y divide-gray-200 dark:divide-gray-700" data-clause-container>
                @foreach($templateClauses as $clause)
                    <div class="p-6 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-move transition-colors duration-200" 
                         data-clause-id="{{ $clause->id }}"
                         draggable="true"
                         @dragstart="startDrag({{ $clause->id }}, $event)"
                         @dragend="endDrag($event)"
                         @dragover="allowDrop($event)"
                         @dragenter="dragEnter($event, {{ $clause->id }})"
                         @dragleave="dragLeave($event, {{ $clause->id }})"
                         @drop="drop($event, {{ $clause->id }})">
                        
                        <div class="flex items-start justify-between">
                            <div class="flex-1">
                                <div class="flex items-center space-x-3">
                                    <div class="flex flex-col space-y-1 cursor-move" title="Drag to reorder">
                                        <div class="w-4 h-0.5 bg-gray-400 rounded"></div>
                                        <div class="w-4 h-0.5 bg-gray-400 rounded"></div>
                                        <div class="w-4 h-0.5 bg-gray-400 rounded"></div>
                                    </div>
                                    <h4 class="text-lg font-medium text-gray-900 dark:text-white">
                                        {{ $clause->name ?: 'Untitled Clause' }}
                                        @if($clause->pivot->is_required)
                                            <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 ml-2">
                                                Required
                                            </span>
                                        @endif
                                    </h4>
                                </div>
                                
                                <div class="mt-2 flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                                    <span class="inline-flex items-center">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                                        </svg>
                                        {{ $clause->category ? ucfirst(str_replace('_', ' ', $clause->category)) : 'No Category' }}
                                    </span>
                                    <span class="inline-flex items-center">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
                                        </svg>
                                        Order: {{ $clause->pivot->sort_order }}
                                    </span>
                                    @if($clause->pivot->conditions)
                                        <span class="inline-flex items-center text-blue-600 dark:text-blue-400">
                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                                            </svg>
                                            Has Conditions
                                        </span>
                                    @endif
                                </div>
                                
                                <div class="mt-3">
                                    <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
                                        {{ Str::limit(strip_tags($clause->content), 200) }}
                                    </p>
                                </div>
                            </div>
                            
                            <div class="flex items-center space-x-2 ml-4">
                                <button onclick="editClauseSettings({{ $clause->id }})" 
                                        class="inline-flex items-center px-3 py-1.5 border border-gray-300 dark:border-gray-600 rounded-md text-xs font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    </svg>
                                    Settings
                                </button>
                                <button @click="removeClause({{ $clause->id }})" 
                                        class="inline-flex items-center px-3 py-1.5 border border-red-300 rounded-md text-xs font-medium text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                    </svg>
                                    Remove
                                </button>
                            </div>
                        </div>
                    </div>
                @endforeach
            </div>
        @else
            <div class="p-12 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No clauses added</h3>
                <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Get started by adding clauses to this template.</p>
                <div class="mt-6">
                    <button @click="showAddClausesModal()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md text-sm font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Add Clauses
                    </button>
                </div>
            </div>
        @endif
    </div>

    <!-- Add Clauses Modal -->
    <div x-show="showAddModal" 
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-150"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed inset-0 z-50 overflow-y-auto" 
         style="display: none;">
        
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

            <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full sm:p-6">
                <div class="sm:flex sm:items-start">
                    <div class="w-full mt-3 text-center sm:mt-0 sm:text-left">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">
                            Add Clauses to Template
                        </h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                            Select clauses to add to "{{ $template->name }}" template
                        </p>

                        <!-- Search and Filter -->
                        <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <input type="text" x-model="searchQuery" placeholder="Search clauses..." 
                                       class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                            </div>
                            <div>
                                <select x-model="selectedCategory" class="block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
                                    <option value="">All Categories</option>
                                    @foreach($categories as $key => $name)
                                        <option value="{{ $key }}">{{ $name }}</option>
                                    @endforeach
                                </select>
                            </div>
                        </div>

                        <!-- Available Clauses List -->
                        <div class="mt-6 max-h-96 overflow-y-auto border border-gray-200 dark:border-gray-600 rounded-md">
                            @if($availableClauses->count() > 0)
                                @foreach($availableClauses as $clause)
                                    <div class="p-4 border-b border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700">
                                        <label class="flex items-start cursor-pointer">
                                            <input type="checkbox" 
                                                   :checked="selectedClauses.includes({{ $clause->id }})"
                                                   @change="toggleClauseSelection({{ $clause->id }})"
                                                   class="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                                            <div class="ml-3 flex-1">
                                                <div class="text-sm font-medium text-gray-900 dark:text-white">
                                                    {{ $clause->name ?: 'Untitled Clause' }}
                                                </div>
                                                <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                                                    {{ $clause->category ? ucfirst(str_replace('_', ' ', $clause->category)) : 'No Category' }}
                                                    • {{ $clause->clause_type ? ucfirst(str_replace('_', ' ', $clause->clause_type)) : 'Standard' }}
                                                </div>
                                                <div class="text-sm text-gray-600 dark:text-gray-400 mt-2">
                                                    {{ Str::limit(strip_tags($clause->content), 150) }}
                                                </div>
                                            </div>
                                        </label>
                                    </div>
                                @endforeach
                            @else
                                <div class="p-8 text-center text-gray-500 dark:text-gray-400">
                                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                    </svg>
                                    <p class="mt-2">All available clauses have been added to this template.</p>
                                </div>
                            @endif
                        </div>
                    </div>
                </div>
                
                <div class="mt-5 sm:mt-4 sm:flex sm:flex-flex flex-wrap-reverse">
                    <button @click="addSelectedClauses()" :disabled="selectedClauses.length === 0 || loading"
                            class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed">
                        <span x-show="!loading">Add Selected Clauses</span>
                        <span x-show="loading">Adding...</span>
                    </button>
                    <button @click="showAddModal = false" type="button"
                            class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-300 hover:text-gray-500 dark:hover:text-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:w-auto sm:text-sm">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Full Page Preview Modal -->
    <div x-show="showPreview" 
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-150"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed inset-0 z-50 bg-white dark:bg-gray-900 flex flex-col" 
         style="display: none;">
        
        <!-- Header Bar -->
        <div class="flex-shrink-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
                        Template Preview
                    </h1>
                    <span class="text-sm text-gray-500 dark:text-gray-400">
                        {{ $template->name }}
                    </span>
                </div>
                
                <div class="flex items-center space-x-3">
                    <!-- Print Button -->
                    <button onclick="window.print()" 
                            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                        </svg>
                        Print
                    </button>
                    
                    <!-- Copy Button -->
                    <button @click="copyToClipboard()" 
                            class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                        </svg>
                        Copy
                    </button>
                    
                    <!-- Close Button -->
                    <button @click="showPreview = false" 
                            class="inline-flex items-center px-4 py-2 bg-gray-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                        Close
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Preview Content - Scrollable Area -->
        <div class="flex-1 overflow-y-auto min-h-0">
            <div class="max-w-5xl mx-auto p-8">
                <div class="bg-white dark:bg-gray-800 shadow-sm border border-gray-200 dark:border-gray-700 rounded-lg">
                    <!-- Document Header -->
                    <div class="px-8 py-6 border-b border-gray-200 dark:border-gray-700">
                        <div class="flex items-center justify-between">
                            <div>
                                <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
                                    Contract Document Preview
                                </h2>
                                <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                                    Based on template: {{ $template->name }}
                                </p>
                            </div>
                            <div class="text-right">
                                <div class="text-sm text-gray-500 dark:text-gray-400">
                                    Generated on {{ now()->format('F j, Y \a\t g:i A') }}
                                </div>
                                <div class="text-sm text-gray-500 dark:text-gray-400">
                                    Version {{ $template->version }}
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Document Body -->
                    <div class="px-8 py-6">
                        <div class="prose prose-sm max-w-none dark:prose-invert">
                            <pre x-text="previewContent" class="whitespace-pre-wrap text-sm text-gray-800 dark:text-gray-200 font-serif leading-relaxed tracking-wide" style="font-family: 'Times New Roman', Times, serif; line-height: 1.6;"></pre>
                        </div>
                    </div>
                    
                    <!-- Document Footer -->
                    <div class="px-8 py-4 bg-gray-50 dark:bg-gray-700 border-t border-gray-200 dark:border-gray-600">
                        <div class="flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                            <span>This is a preview document generated from the template system</span>
                            <span>Page 1 of 1</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Print Styles for Preview -->
    <style>
        @media print {
            body * {
                visibility: hidden;
            }
            
            [x-show="showPreview"] * {
                visibility: visible;
            }
            
            [x-show="showPreview"] {
                position: static !important;
                background: white !important;
            }
            
            .sticky {
                display: none !important;
            }
            
            .max-w-5xl {
                max-width: none !important;
                margin: 0 !important;
                padding: 0 !important;
            }
            
            .shadow-sm, .border {
                box-shadow: none !important;
                border: none !important;
            }
            
            .bg-gray-50, .bg-gray-700 {
                background: white !important;
            }
            
            .text-gray-500, .text-gray-400 {
                color: #666 !important;
            }
        }
    </style>

</div> <!-- Close main Alpine.js container -->
@endsection