@props(['field', 'value' => null, 'errors' => []])

@php
    $fieldSlug = $field['field_slug'];
    $hasError = !empty($errors[$fieldSlug]);
    $uiConfig = $field['ui_config'] ?? [];
    
    // Extract UI configuration
    $mode = $uiConfig['mode'] ?? 'tree'; // tree, code, form, view
    $schema = $uiConfig['schema'] ?? null; // JSON schema for validation
    $readonly = $uiConfig['readonly'] ?? false;
    $collapsible = $uiConfig['collapsible'] ?? true; // Allow collapsing objects/arrays
    $showValidation = $uiConfig['show_validation'] ?? true;
    $height = $uiConfig['height'] ?? 'auto'; // Fixed height or auto
    $theme = $uiConfig['theme'] ?? 'light'; // light, dark
    $sortKeys = $uiConfig['sort_keys'] ?? false; // Sort object keys
    $expandAll = $uiConfig['expand_all'] ?? false; // Expand all nodes by default
    
    // Format value for display
    $displayValue = '';
    if ($value) {
        if (is_string($value)) {
            $displayValue = $value;
        } elseif (is_array($value) || is_object($value)) {
            $displayValue = json_encode($value, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
        }
    }
    
    // Default JSON structure for new entries
    $defaultJson = $uiConfig['default_json'] ?? '{\n  "key": "value",\n  "array": [\n    "item1",\n    "item2"\n  ],\n  "object": {\n    "nested": true\n  }\n}';
    
    $containerClass = 'json-editor-container';
    if ($theme === 'dark') $containerClass .= ' json-dark-theme';
    if ($readonly) $containerClass .= ' json-readonly';
@endphp

<div class="mb-4 mb-6">
    <label for="{{ $fieldSlug }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        {{ $field['label'] }}
        @if($field['is_required'])
            <span class="text-red-600 dark:text-red-400">*</span>
        @endif
        <div class="json-controls float-end">
            <div class="btn-group px-6 py-2 font-medium rounded-md transition-colors-group-sm">
                <button type="button" class="btn border border-gray-600 text-gray-600 hover:bg-gray-50 json-mode-px-6 py-2 font-medium rounded-md transition-colors" data-mode="tree" title="Tree View">
                    <i class="fas fa-sitemap"></i>
                </flux:button>
                <button type="button" class="btn border border-gray-600 text-gray-600 hover:bg-gray-50 json-mode-px-6 py-2 font-medium rounded-md transition-colors" data-mode="code" title="Code View">
                    <i class="fas fa-code"></i>
                </flux:button>
                <button type="button" class="btn border border-gray-600 text-gray-600 hover:bg-gray-50 json-mode-px-6 py-2 font-medium rounded-md transition-colors" data-mode="form" title="Form View">
                    <i class="fas fa-list"></i>
                </flux:button>
            </div>
            @unless($readonly)
                <button type="button" class="btn border border-green-600 text-green-600 hover:bg-green-50 px-6 py-2 font-medium rounded-md transition-colors-sm ml-2" id="{{ $fieldSlug }}_format" title="Format JSON">
                    <i class="fas fa-indent"></i>
                </flux:button>
                <button type="button" class="btn border border-blue-600 text-blue-600 hover:bg-blue-50 px-6 py-2 font-medium rounded-md transition-colors-sm" id="{{ $fieldSlug }}_validate" title="Validate JSON">
                    <i class="fas fa-check"></i>
                </flux:button>
            @endunless
        </div>
    </flux:label>
    
    <div class="{{ $containerClass }}" @if($height !== 'auto') style="height: {{ $height }};" @endif>
        {{-- Tree/Form Editor Container --}}
        <div class="json-visual-editor" id="{{ $fieldSlug }}_visual" style="{{ $mode === 'code' ? 'display: none;' : '' }}">
            <div class="json-tree-container mx-auto" id="{{ $fieldSlug }}_tree"></div>
        </div>
        
        {{-- Code Editor --}}
        <div class="json-code-editor" id="{{ $fieldSlug }}_code" style="{{ $mode !== 'code' ? 'display: none;' : '' }}">
            <textarea 
                id="{{ $fieldSlug }}_textarea"
                class="block w-full px-6 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm json-textarea {{ $hasError ? 'border-red-500' : '' }}"
                placeholder="{{ empty($displayValue) ? $defaultJson : '' }}"
                @if($readonly) readonly @endif
                style="font-family: 'Courier New', monospace; min-height: 200px;"
            >{{ old($fieldSlug, $displayValue) }}</flux:textarea>
        </div>
        
        {{-- Hidden input for form submission --}}
        <input type="hidden" id="{{ $fieldSlug }}" name="{{ $fieldSlug }}" value="{{ old($fieldSlug, $displayValue) }}" />
        
        {{-- JSON Status Bar --}}
        <div class="json-status-bar">
            <div class="json-validation-status" id="{{ $fieldSlug }}_status">
                <i class="fas fa-circle text-gray-600 dark:text-gray-400"></i>
                <span class="status-text">Ready</span>
            </div>
            <div class="json-stats" id="{{ $fieldSlug }}_stats">
                <span class="object-count">Objects: 0</span>
                <span class="array-count">Arrays: 0</span>
                <span class="property-count">Properties: 0</span>
            </div>
        </div>
    </div>
    
    @if($field['help_text'] || $schema)
        <div class="json-help mt-2">
            @if($field['help_text'])
                <small class="form-text text-gray-600 dark:text-gray-400 block">{{ $field['help_text'] }}</small>
            @endif
            @if($schema)
                <small class="form-text text-cyan-600 dark:text-cyan-400">
                    <i class="fas fa-info-circle"></i>
                    <a href="#" class="json-schema-toggle" data-bs-toggle="collapse" data-bs-target="#{{ $fieldSlug }}_schema">
                        View JSON Schema
                    </a>
                </small>
                <div class="collapse mt-2" id="{{ $fieldSlug }}_schema">
                    <div class="card bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden-body">
                        <pre class="json-schema-display">{{ json_encode($schema, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) }}</pre>
                    </div>
                </div>
            @endif
        </div>
    @endif
    
    @if($hasError)
        <div class="text-red-600 text-sm mt-1 block">
            @foreach($errors[$fieldSlug] as $error)
                {{ $error }}
            @endforeach
        </div>
    @endif
</div>

@push('styles')
<style>
    .json-editor-container {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        background: white;
        overflow: hidden;
    }
    
    .json-dark-theme {
        background: #2d3748;
        color: white;
    }
    
    .json-dark-theme .json-textarea {
        background: #2d3748;
        color: white;
        border: none;
    }
    
    .json-controls {
        margin-top: -0.25rem;
    }
    
    .json-mode-btn.active {
        background-color: var(--bs-primary);
        color: white;
    }
    
    .json-visual-editor,
    .json-code-editor {
        min-height: 200px;
        max-height: 500px;
        overflow-y: auto;
        padding: 1rem;
    }
    
    .json-textarea {
        border: none;
        resize: vertical;
        background: transparent;
        outline: none;
        box-shadow: none;
    }
    
    .json-textarea:focus {
        border: none;
        box-shadow: none;
    }
    
    .json-tree-container {
        font-family: 'Courier New', monospace;
        font-size: 0.875rem;
        line-height: 1.4;
    }
    
    .json-node {
        margin-left: 1rem;
        border-left: 1px dashed #dee2e6;
        padding-left: 0.5rem;
        margin-bottom: 0.25rem;
    }
    
    .json-node.root {
        margin-left: 0;
        border-left: none;
        padding-left: 0;
    }
    
    .json-key {
        font-weight: 600;
        color: #0066cc;
        cursor: pointer;
    }
    
    .json-key:hover {
        color: #004499;
        text-decoration: underline;
    }
    
    .json-value {
        margin-left: 0.5rem;
    }
    
    .json-value.string {
        color: #22863a;
    }
    
    .json-value.number {
        color: #005cc5;
    }
    
    .json-value.boolean {
        color: #d73a49;
    }
    
    .json-value.null {
        color: #6f42c1;
        font-style: italic;
    }
    
    .json-toggle {
        cursor: pointer;
        user-select: none;
        color: #586069;
        margin-right: 0.25rem;
    }
    
    .json-toggle:hover {
        color: #24292e;
    }
    
    .json-collapsed {
        display: none;
    }
    
    .json-add-button {
        background: none;
        border: none;
        color: #28a745;
        cursor: pointer;
        font-size: 0.75rem;
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
        margin-left: 0.5rem;
    }
    
    .json-add-button:hover {
        background: rgba(40, 167, 69, 0.1);
    }
    
    .json-remove-button {
        background: none;
        border: none;
        color: #dc3545;
        cursor: pointer;
        font-size: 0.75rem;
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
        margin-left: 0.5rem;
    }
    
    .json-remove-button:hover {
        background: rgba(220, 53, 69, 0.1);
    }
    
    .json-input {
        background: transparent;
        border: 1px solid transparent;
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
        font-family: inherit;
        font-size: inherit;
        color: inherit;
    }
    
    .json-input:focus {
        background: rgba(0, 123, 255, 0.1);
        border-color: #007bff;
        outline: none;
    }
    
    .json-status-bar {
        background: #f8f9fa;
        border-top: 1px solid #dee2e6;
        padding: 0.5rem 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.75rem;
    }
    
    .json-dark-theme .json-status-bar {
        background: #1a202c;
        border-color: #4a5568;
        color: #e2e8f0;
    }
    
    .json-validation-status .fas {
        margin-right: 0.25rem;
    }
    
    .json-stats span {
        margin-right: 1rem;
    }
    
    .json-schema-display {
        font-size: 0.75rem;
        max-height: 200px;
        overflow-y: auto;
        margin: 0;
        background: #f8f9fa;
        padding: 0.5rem;
        border-radius: 0.25rem;
    }
    
    .json-readonly .json-add-button,
    .json-readonly .json-remove-button {
        display: none;
    }
    
    .json-readonly .json-input {
        pointer-events: none;
    }
    
    /* Syntax highlighting for code view */
    .json-highlight .json-key {
        color: #0366d6;
    }
    
    .json-highlight .json-string {
        color: #032f62;
    }
    
    .json-highlight .json-number {
        color: #005cc5;
    }
    
    .json-highlight .json-boolean {
        color: #d73a49;
    }
    
    .json-highlight .json-null {
        color: #6f42c1;
    }
</style>
@endpush

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const hiddenInput = document.getElementById('{{ $fieldSlug }}');
        const visualEditor = document.getElementById('{{ $fieldSlug }}_visual');
        const codeEditor = document.getElementById('{{ $fieldSlug }}_code');
        const textarea = document.getElementById('{{ $fieldSlug }}_textarea');
        const treeContainer = document.getElementById('{{ $fieldSlug }}_tree');
        const statusElement = document.getElementById('{{ $fieldSlug }}_status');
        const statsElement = document.getElementById('{{ $fieldSlug }}_stats');
        const modeButtons = document.querySelectorAll('.json-mode-btn');
        const formatButton = document.getElementById('{{ $fieldSlug }}_format');
        const validateButton = document.getElementById('{{ $fieldSlug }}_validate');
        
        const readonly = {{ $readonly ? 'true' : 'false' }};
        const schema = @json($schema);
        let currentMode = '{{ $mode }}';
        let jsonData = {};
        
        // Initialize
        try {
            const initialValue = hiddenInput.value || textarea.value || '{}';
            jsonData = JSON.parse(initialValue);
        } catch (e) {
            jsonData = {};
        }
        
        // Update active mode button
        function updateModeButton() {
            modeButtons.forEach(btn => {
                btn.classList.toggle('active', btn.dataset.mode === currentMode);
            });
        }
        
        // Mode switching
        modeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const newMode = this.dataset.mode;
                
                // Save current data
                if (currentMode === 'code') {
                    try {
                        jsonData = JSON.parse(textarea.value || '{}');
                    } catch (e) {
                        updateStatus('error', 'Invalid JSON syntax');
                        return;
                    }
                }
                
                currentMode = newMode;
                updateModeButton();
                
                // Show/hide appropriate editors
                if (currentMode === 'code') {
                    visualEditor.style.display = 'none';
                    codeEditor.style.display = 'block';
                    textarea.value = JSON.stringify(jsonData, null, 2);
                } else {
                    codeEditor.style.display = 'none';
                    visualEditor.style.display = 'block';
                    renderTree();
                }
                
                updateHiddenInput();
            });
        });
        
        // Render JSON as tree
        function renderTree() {
            treeContainer.innerHTML = '';
            const rootNode = createTreeNode('root', jsonData, true);
            treeContainer.appendChild(rootNode);
            updateStats();
        }
        
        // Create tree node
        function createTreeNode(key, value, isRoot = false) {
            const nodeDiv = document.createElement('div');
            nodeDiv.className = `json-node ${isRoot ? 'root' : ''}`;
            
            const isObject = typeof value === 'object' && value !== null && !Array.isArray(value);
            const isArray = Array.isArray(value);
            const isComplex = isObject || isArray;
            
            let html = '';
            
            if (isComplex) {
                const count = isArray ? value.length : Object.keys(value).length;
                const type = isArray ? 'Array' : 'Object';
                const toggleIcon = '▼';
                
                html += `
                    <div class="json-complex-header">
                        <span class="json-toggle">${toggleIcon}</span>
                        <span class="json-key">${isRoot ? 'root' : key}</span>
                        <span class="json-type-info text-gray-600 dark:text-gray-400">${type}(${count})</span>
                `;
                
                if (!readonly && !isRoot) {
                    html += `<button type="button" class="json-remove-button" title="Remove"><i class="fas fa-times"></i></flux:button>`;
                }
                
                html += `</div><div class="json-children">`;
                
                if (isArray) {
                    value.forEach((item, index) => {
                        const childNode = createTreeNode(index, item);
                        html += childNode.outerHTML;
                    });
                    
                    if (!readonly) {
                        html += `<button type="button" class="json-add-button" data-type="array" title="Add Item"><i class="fas fa-plus"></i> Add Item</flux:button>`;
                    }
                } else {
                    Object.keys(value).forEach(objKey => {
                        const childNode = createTreeNode(objKey, value[objKey]);
                        html += childNode.outerHTML;
                    });
                    
                    if (!readonly) {
                        html += `<button type="button" class="json-add-button" data-type="object" title="Add Property"><i class="fas fa-plus"></i> Add Property</flux:button>`;
                    }
                }
                
                html += `</div>`;
            } else {
                // Simple value
                const valueType = typeof value;
                const valueClass = value === null ? 'null' : valueType;
                const displayValue = value === null ? 'null' : 
                                  valueType === 'string' ? `"${value}"` : 
                                  String(value);
                
                html += `
                    <div class="json-simple-item">
                        <span class="json-key">${key}</span>:
                        <input type="text" class="json-input json-value ${valueClass}" 
                               value="${displayValue}" 
                               data-key="${key}" 
                               data-type="${valueClass}"
                               ${readonly ? 'readonly' : ''} />
                `;
                
                if (!readonly && !isRoot) {
                    html += `<button type="button" class="json-remove-button" title="Remove"><i class="fas fa-times"></i></flux:button>`;
                }
                
                html += `</div>`;
            }
            
            nodeDiv.innerHTML = html;
            
            // Add event listeners
            if (!readonly) {
                addTreeEventListeners(nodeDiv, key, value);
            }
            
            return nodeDiv;
        }
        
        // Add event listeners to tree nodes
        function addTreeEventListeners(nodeDiv, key, value) {
            // Toggle collapse/expand
            const toggle = nodeDiv.querySelector('.json-toggle');
            if (toggle) {
                toggle.addEventListener('click', function() {
                    const children = nodeDiv.querySelector('.json-children');
                    children.classList.toggle('json-collapsed');
                    this.textContent = children.classList.contains('json-collapsed') ? '▶' : '▼';
                });
            }
            
            // Value input changes
            const inputs = nodeDiv.querySelectorAll('.json-input');
            inputs.forEach(input => {
                input.addEventListener('change', function() {
                    updateJsonFromTree();
                });
            });
            
            // Add buttons
            const addButtons = nodeDiv.querySelectorAll('.json-add-button');
            addButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const type = this.dataset.type;
                    if (type === 'array') {
                        // Add new array item
                        const newValue = '';
                        // Implementation would add to array
                    } else {
                        // Add new object property
                        const newKey = prompt('Enter property name:');
                        if (newKey) {
                            // Implementation would add to object
                        }
                    }
                    renderTree();
                });
            });
            
            // Remove buttons
            const removeButtons = nodeDiv.querySelectorAll('.json-remove-button');
            removeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    if (confirm('Remove this item?')) {
                        // Implementation would remove from data structure
                        renderTree();
                    }
                });
            });
        }
        
        // Update JSON data from tree inputs
        function updateJsonFromTree() {
            // Implementation would collect all input values and rebuild JSON structure
            updateHiddenInput();
            updateStats();
        }
        
        // Format JSON button
        formatButton?.addEventListener('click', function() {
            try {
                const parsed = JSON.parse(textarea.value || '{}');
                textarea.value = JSON.stringify(parsed, null, 2);
                jsonData = parsed;
                updateHiddenInput();
                updateStatus('success', 'JSON formatted successfully');
            } catch (e) {
                updateStatus('error', 'Invalid JSON: ' + e.message);
            }
        });
        
        // Validate JSON button
        validateButton?.addEventListener('click', function() {
            validateJson();
        });
        
        // JSON validation
        function validateJson() {
            try {
                const parsed = currentMode === 'code' ? 
                    JSON.parse(textarea.value || '{}') : 
                    jsonData;
                
                let isValid = true;
                let errors = [];
                
                // Schema validation if provided
                if (schema) {
                    // Simple schema validation (in production, use a proper JSON schema validator)
                    // This is a placeholder implementation
                    isValid = true; // Implement actual schema validation
                }
                
                if (isValid) {
                    updateStatus('success', 'Valid JSON');
                    jsonData = parsed;
                    updateHiddenInput();
                } else {
                    updateStatus('error', 'Schema validation failed: ' + errors.join(', '));
                }
                
            } catch (e) {
                updateStatus('error', 'Invalid JSON: ' + e.message);
            }
        }
        
        // Update status display
        function updateStatus(type, message) {
            const icon = statusElement.querySelector('.fas');
            const text = statusElement.querySelector('.status-text');
            
            icon.className = `fas fa-circle text-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'muted'}`;
            text.textContent = message;
        }
        
        // Update stats
        function updateStats() {
            if (!statsElement) return;
            
            let objectCount = 0;
            let arrayCount = 0;
            let propertyCount = 0;
            
            function countItems(obj) {
                if (Array.isArray(obj)) {
                    arrayCount++;
                    obj.forEach(item => {
                        if (typeof item === 'object' && item !== null) {
                            countItems(item);
                        }
                    });
                } else if (typeof obj === 'object' && obj !== null) {
                    objectCount++;
                    propertyCount += Object.keys(obj).length;
                    Object.values(obj).forEach(value => {
                        if (typeof value === 'object' && value !== null) {
                            countItems(value);
                        }
                    });
                }
            }
            
            countItems(jsonData);
            
            statsElement.innerHTML = `
                <span class="object-count">Objects: ${objectCount}</span>
                <span class="array-count">Arrays: ${arrayCount}</span>
                <span class="property-count">Properties: ${propertyCount}</span>
            `;
        }
        
        // Update hidden input
        function updateHiddenInput() {
            const jsonString = JSON.stringify(jsonData);
            hiddenInput.value = jsonString;
            
            if (currentMode === 'code') {
                textarea.value = JSON.stringify(jsonData, null, 2);
            }
        }
        
        // Textarea changes in code mode
        textarea.addEventListener('input', function() {
            try {
                jsonData = JSON.parse(this.value || '{}');
                updateHiddenInput();
                updateStatus('success', 'Valid JSON');
                updateStats();
            } catch (e) {
                updateStatus('warning', 'Typing...');
            }
        });
        
        // Initialize display
        updateModeButton();
        if (currentMode === 'code') {
            textarea.value = JSON.stringify(jsonData, null, 2);
        } else {
            renderTree();
        }
        updateStats();
        updateStatus('success', 'Ready');
    });
</script>
@endpush