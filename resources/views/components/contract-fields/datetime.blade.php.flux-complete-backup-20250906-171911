@props(['field', 'value' => null, 'errors' => []])

@php
    $fieldSlug = $field['field_slug'];
    $hasError = !empty($errors[$fieldSlug]);
    $uiConfig = $field['ui_config'] ?? [];
    $inputClass = 'block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm' . ($hasError ? ' border-red-500' : '');
    
    // Extract UI configuration
    $format = $uiConfig['format'] ?? 'Y-m-d H:i'; // PHP date format
    $displayFormat = $uiConfig['display_format'] ?? 'M j, Y at g:i A'; // Human readable format
    $minDate = $uiConfig['min_date'] ?? null;
    $maxDate = $uiConfig['max_date'] ?? null;
    $minTime = $uiConfig['min_time'] ?? null;
    $maxTime = $uiConfig['max_time'] ?? null;
    $disabledDates = $uiConfig['disabled_dates'] ?? [];
    $enableSeconds = $uiConfig['enable_seconds'] ?? false;
    $timeStep = $uiConfig['time_step'] ?? 15; // Minutes
    $defaultTime = $uiConfig['default_time'] ?? '09:00'; // Default time when date is selected
    $timezone = $uiConfig['timezone'] ?? 'UTC';
    $dateOnly = $uiConfig['date_only'] ?? false;
    $timeOnly = $uiConfig['time_only'] ?? false;
    
    // Format value for display
    $displayValue = $value;
    if ($value && !is_string($value)) {
        if ($timeOnly) {
            $displayValue = $value->format('H:i' . ($enableSeconds ? ':s' : ''));
        } elseif ($dateOnly) {
            $displayValue = $value->format('Y-m-d');
        } else {
            $displayValue = $value->format($format);
        }
    }
@endphp

<div class="mb-4 mb-6">
    <label for="{{ $fieldSlug }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        {{ $field['label'] }}
        @if($field['is_required'])
            <span class="text-red-600 dark:text-red-400">*</span>
        @endif
        @if($timezone !== 'UTC')
            <small class="text-gray-600 dark:text-gray-400">({{ $timezone }})</small>
        @endif
    </label>
    
    <div class="datetime-input-container mx-auto">
        @if($timeOnly)
            {{-- Time only input --}}
            <div class="flex">
                <span class="flex-text">
                    <i class="fas fa-clock"></i>
                </span>
                <input 
                    type="time"
                    id="{{ $fieldSlug }}"
                    name="{{ $fieldSlug }}"
                    class="{{ $inputClass }} time-picker"
                    value="{{ old($fieldSlug, $displayValue) }}"
                    @if($field['is_required']) required @endif
                    @if($minTime) min="{{ $minTime }}" @endif
                    @if($maxTime) max="{{ $maxTime }}" @endif
                    @if($enableSeconds) step="1" @else step="{{ $timeStep * 60 }}" @endif
                />
            </div>
        @elseif($dateOnly)
            {{-- Date only input --}}
            <div class="flex">
                <input 
                    type="date"
                    id="{{ $fieldSlug }}"
                    name="{{ $fieldSlug }}"
                    class="{{ $inputClass }} date-picker"
                    value="{{ old($fieldSlug, $displayValue) }}"
                    placeholder="{{ $field['placeholder'] ?? 'Select date...' }}"
                    @if($field['is_required']) required @endif
                    @if($minDate) min="{{ $minDate }}" @endif
                    @if($maxDate) max="{{ $maxDate }}" @endif
                    data-format="{{ $format }}"
                    @if(!empty($disabledDates)) data-disabled-dates="{{ json_encode($disabledDates) }}" @endif
                />
                <span class="flex-text">
                    <i class="fas fa-calendar"></i>
                </span>
            </div>
        @else
            {{-- DateTime input --}}
            <div class="flex">
                <input 
                    type="datetime-local"
                    id="{{ $fieldSlug }}"
                    name="{{ $fieldSlug }}"
                    class="{{ $inputClass }} datetime-picker"
                    value="{{ old($fieldSlug, $displayValue) }}"
                    placeholder="{{ $field['placeholder'] ?? 'Select date and time...' }}"
                    @if($field['is_required']) required @endif
                    @if($minDate) min="{{ $minDate }}" @endif
                    @if($maxDate) max="{{ $maxDate }}" @endif
                    @if($enableSeconds) step="1" @else step="{{ $timeStep * 60 }}" @endif
                    data-format="{{ $format }}"
                    data-display-format="{{ $displayFormat }}"
                    data-timezone="{{ $timezone }}"
                    data-default-time="{{ $defaultTime }}"
                    @if(!empty($disabledDates)) data-disabled-dates="{{ json_encode($disabledDates) }}" @endif
                />
                <span class="flex-text">
                    <i class="fas fa-calendar-alt"></i>
                </span>
            </div>
        @endif
        
        {{-- Display formatted value --}}
        @if(!$timeOnly && !$dateOnly && $displayValue)
            <small class="form-text text-gray-600 dark:text-gray-400 mt-1">
                <i class="fas fa-info-circle"></i>
                Display: {{ \Carbon\Carbon::parse($displayValue)->format($displayFormat) }}
            </small>
        @endif
    </div>
    
    @if($field['help_text'])
        <small class="form-text text-gray-600 dark:text-gray-400">{{ $field['help_text'] }}</small>
    @endif
    
    @if($hasError)
        <div class="text-red-600 text-sm mt-1">
            @foreach($errors[$fieldSlug] as $error)
                {{ $error }}
            @endforeach
        </div>
    @endif
</div>

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const datetimeInput = document.getElementById('{{ $fieldSlug }}');
        const timezone = '{{ $timezone }}';
        const defaultTime = '{{ $defaultTime }}';
        const disabledDates = @json($disabledDates);
        
        @unless($timeOnly)
        // Initialize Flatpickr for enhanced date/datetime picking
        const flatpickrConfig = {
            @if($dateOnly)
            enableTime: false,
            dateFormat: 'Y-m-d',
            @elseif($timeOnly)
            enableTime: true,
            noCalendar: true,
            dateFormat: 'H:i{{ $enableSeconds ? ":S" : "" }}',
            time_24hr: true,
            @else
            enableTime: true,
            dateFormat: '{{ $format }}',
            time_24hr: true,
            @endif
            @if($enableSeconds && !$dateOnly)
            enableSeconds: true,
            @endif
            @if($minDate)
            minDate: '{{ $minDate }}',
            @endif
            @if($maxDate)
            maxDate: '{{ $maxDate }}',
            @endif
            @if(!empty($disabledDates))
            disable: @json($disabledDates),
            @endif
            @if(!$timeOnly && !$dateOnly)
            minuteIncrement: {{ $timeStep }},
            defaultHour: {{ explode(':', $defaultTime)[0] }},
            defaultMinute: {{ explode(':', $defaultTime)[1] }},
            @endif
            allowInput: true,
            clickOpens: true,
            weekNumbers: true,
            @if(!$dateOnly)
            plugins: [
                new confirmDatePlugin({
                    confirmText: "Confirm",
                    confirmIcon: "<i class='fas fa-check'></i>",
                    showAlways: false
                })
            ],
            @endif
            onChange: function(selectedDates, dateStr, instance) {
                // Custom validation can be added here
                if (selectedDates.length > 0) {
                    validateDateTime(selectedDates[0]);
                }
            }
        };
        
        const picker = flatpickr(datetimeInput, flatpickrConfig);
        @endunless
        
        // Validate datetime constraints
        function validateDateTime(date) {
            const errors = [];
            
            @if($minTime && !$dateOnly)
                const minTime = '{{ $minTime }}';
                const timeStr = date.toTimeString().substr(0, 5);
                if (timeStr < minTime) {
                    errors.push(`Time cannot be before ${minTime}`);
                }
            @endif
            
            @if($maxTime && !$dateOnly)
                const maxTime = '{{ $maxTime }}';
                const timeStr = date.toTimeString().substr(0, 5);
                if (timeStr > maxTime) {
                    errors.push(`Time cannot be after ${maxTime}`);
                }
            @endif
            
            // Check for disabled dates
            if (disabledDates.length > 0) {
                const dateStr = date.toISOString().split('T')[0];
                if (disabledDates.includes(dateStr)) {
                    errors.push('Selected date is not available');
                }
            }
            
            // Display validation errors
            const container = datetimeInput.closest('.mb-4');
            let errorDiv = container.querySelector('.datetime-validation-errors');
            
            if (errors.length > 0) {
                if (!errorDiv) {
                    errorDiv = document.createElement('div');
                    errorDiv.className = 'datetime-validation-errors text-red-600 dark:text-red-400 small mt-1';
                    container.appendChild(errorDiv);
                }
                errorDiv.innerHTML = errors.map(error => `<i class="fas fa-exclamation-circle"></i> ${error}`).join('<br>');
                datetimeInput.classList.add('border-red-500');
            } else {
                if (errorDiv) {
                    errorDiv.remove();
                }
                datetimeInput.classList.remove('border-red-500');
            }
        }
        
        // Handle timezone conversion if needed
        @if($timezone !== 'UTC')
        datetimeInput.addEventListener('change', function() {
            if (this.value) {
                // Convert from local timezone to specified timezone
                // This is a simplified implementation - real apps would use moment.js or date-fns
                const localDate = new Date(this.value);
                const utcDate = new Date(localDate.getTime() - (localDate.getTimezoneOffset() * 60000));
                
                // Store the UTC value for server processing
                this.setAttribute('data-utc-value', utcDate.toISOString());
            }
        });
        @endif
        
        // Quick time buttons for common times
        @if(!$dateOnly && !$timeOnly)
        const quickTimeButtons = [
            { label: '9:00 AM', time: '09:00' },
            { label: '12:00 PM', time: '12:00' },
            { label: '1:00 PM', time: '13:00' },
            { label: '5:00 PM', time: '17:00' }
        ];
        
        const quickTimesContainer = document.createElement('div');
        quickTimesContainer.className = 'quick-times mt-2';
        quickTimesContainer.innerHTML = '<small class="text-gray-600 dark:text-gray-400">Quick times:</small> ';
        
        quickTimeButtons.forEach(btn => {
            const button = document.createElement('button');
            button.type = 'button';
            button.className = 'btn px-3 py-1 text-sm btn-outline-secondary mr-1';
            button.textContent = btn.label;
            button.addEventListener('click', function() {
                const currentDate = datetimeInput.value ? datetimeInput.value.split('T')[0] : new Date().toISOString().split('T')[0];
                datetimeInput.value = `${currentDate}T${btn.time}`;
                datetimeInput.dispatchEvent(new Event('change', { bubbles: true }));
            });
            quickTimesContainer.appendChild(button);
        });
        
        datetimeInput.closest('.mb-4').appendChild(quickTimesContainer);
        @endif
    });
</script>
@endpush