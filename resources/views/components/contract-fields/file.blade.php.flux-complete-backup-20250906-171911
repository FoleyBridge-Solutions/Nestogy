@props(['field', 'value' => null, 'errors' => []])

@php
    $fieldSlug = $field['field_slug'];
    $hasError = !empty($errors[$fieldSlug]);
    $uiConfig = $field['ui_config'] ?? [];
    $inputClass = 'block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm' . ($hasError ? ' border-red-500' : '');
    
    // Extract UI configuration
    $multiple = $uiConfig['multiple'] ?? false;
    $acceptTypes = $uiConfig['accept_types'] ?? []; // ['image/*', 'application/pdf', etc.]
    $maxFileSize = $uiConfig['max_file_size'] ?? 10; // MB
    $maxFiles = $uiConfig['max_files'] ?? 5;
    $showPreview = $uiConfig['show_preview'] ?? true;
    $dragDrop = $uiConfig['drag_drop'] ?? true;
    $uploadUrl = $uiConfig['upload_url'] ?? null; // AJAX upload endpoint
    $existingFiles = $uiConfig['existing_files'] ?? []; // For edit forms
    
    // Format accept types for HTML input
    $acceptString = empty($acceptTypes) ? '' : implode(',', $acceptTypes);
    
    // Convert max file size to bytes for JavaScript
    $maxFileSizeBytes = $maxFileSize * 1024 * 1024;
    
    // Image extensions for preview
    $imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'];
    
    // Existing files data
    $existingFilesData = [];
    if ($value && !$multiple) {
        // Single file
        if (is_string($value)) {
            $existingFilesData[] = [
                'name' => basename($value),
                'url' => $value,
                'size' => null,
                'type' => mime_content_type(public_path($value)) ?? 'application/octet-stream'
            ];
        }
    } elseif ($value && $multiple && is_array($value)) {
        // Multiple files
        foreach ($value as $file) {
            if (is_string($file)) {
                $existingFilesData[] = [
                    'name' => basename($file),
                    'url' => $file,
                    'size' => null,
                    'type' => mime_content_type(public_path($file)) ?? 'application/octet-stream'
                ];
            }
        }
    }
@endphp

<div class="mb-4 mb-6">
    <label for="{{ $fieldSlug }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        {{ $field['label'] }}
        @if($field['is_required'])
            <span class="text-red-600 dark:text-red-400">*</span>
        @endif
        @if($maxFileSize)
            <small class="text-gray-600 dark:text-gray-400">(Max {{ $maxFileSize }}MB{{ $multiple ? ' each' : '' }})</small>
        @endif
    </label>
    
    <div class="file-input-container mx-auto">
        @if($dragDrop)
            {{-- Drag and Drop Area --}}
            <div class="file-drop-zone" id="{{ $fieldSlug }}_dropzone">
                <div class="drop-zone-content">
                    <i class="fas fa-cloud-upload-alt fa-3x text-gray-600 dark:text-gray-400 mb-6"></i>
                    <p class="mb-2">Drag and drop files here</p>
                    <p class="text-gray-600 dark:text-gray-400 small mb-6">or</p>
                    <button type="button" class="btn px-6 py-2 font-medium rounded-md transition-colors-outline-primary" id="{{ $fieldSlug }}_browse">
                        <i class="fas fa-folder-open"></i> Browse Files
                    </button>
                </div>
                
                <input 
                    type="file"
                    id="{{ $fieldSlug }}"
                    name="{{ $fieldSlug }}{{ $multiple ? '[]' : '' }}"
                    class="file-input hidden"
                    @if($multiple) multiple @endif
                    @if($acceptString) accept="{{ $acceptString }}" @endif
                    @if($field['is_required']) required @endif
                />
            </div>
        @else
            {{-- Standard File Input --}}
            <div class="flex">
                <input 
                    type="file"
                    id="{{ $fieldSlug }}"
                    name="{{ $fieldSlug }}{{ $multiple ? '[]' : '' }}"
                    class="{{ $inputClass }}"
                    @if($multiple) multiple @endif
                    @if($acceptString) accept="{{ $acceptString }}" @endif
                    @if($field['is_required']) required @endif
                />
                <button type="button" class="btn px-6 py-2 font-medium rounded-md transition-colors-outline-secondary" onclick="document.getElementById('{{ $fieldSlug }}').click()">
                    <i class="fas fa-folder-open"></i> Browse
                </button>
            </div>
        @endif
        
        {{-- File List --}}
        <div class="file-list mt-6" id="{{ $fieldSlug }}_list">
            {{-- Existing files will be populated here --}}
        </div>
        
        {{-- Upload Progress --}}
        @if($uploadUrl)
            <div class="upload-progress mt-2" id="{{ $fieldSlug }}_progress" style="display: none;">
                <div class="progress">
                    <div class="progress-bar" role="progressbar"></div>
                </div>
                <small class="progress-text text-gray-600 dark:text-gray-400"></small>
            </div>
        @endif
    </div>
    
    {{-- File Type and Size Info --}}
    @if(!empty($acceptTypes) || $maxFileSize)
        <small class="form-text text-gray-600 dark:text-gray-400">
            @if(!empty($acceptTypes))
                Allowed types: {{ implode(', ', $acceptTypes) }}
            @endif
            @if(!empty($acceptTypes) && $maxFileSize) • @endif
            @if($maxFileSize)
                Max size: {{ $maxFileSize }}MB{{ $multiple ? ' per file' : '' }}
            @endif
            @if($multiple && $maxFiles)
                • Max {{ $maxFiles }} files
            @endif
        </small>
    @endif
    
    @if($field['help_text'])
        <small class="form-text text-gray-600 dark:text-gray-400 block">{{ $field['help_text'] }}</small>
    @endif
    
    @if($hasError)
        <div class="text-red-600 text-sm mt-1 block">
            @foreach($errors[$fieldSlug] as $error)
                {{ $error }}
            @endforeach
        </div>
    @endif
</div>

@push('styles')
<style>
    .file-drop-zone {
        border: 2px dashed #dee2e6;
        border-radius: 0.5rem;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s ease;
        background: #f8f9fa;
        cursor: pointer;
    }
    
    .file-drop-zone:hover,
    .file-drop-zone.drag-over {
        border-color: #0d6efd;
        background: rgba(13, 110, 253, 0.1);
    }
    
    .file-drop-zone.drag-over .drop-zone-content {
        transform: scale(1.05);
    }
    
    .drop-zone-content {
        transition: transform 0.2s ease;
    }
    
    .file-item {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        background: white;
        margin-bottom: 0.5rem;
        transition: all 0.2s ease;
    }
    
    .file-item:hover {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .file-item.uploading {
        opacity: 0.7;
    }
    
    .file-item.error {
        border-color: #dc3545;
        background: #f8d7da;
    }
    
    .file-item.success {
        border-color: #28a745;
        background: #d4edda;
    }
    
    .file-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #e9ecef;
        border-radius: 0.25rem;
        margin-right: 1rem;
        flex-shrink: 0;
    }
    
    .file-preview {
        width: 40px;
        height: 40px;
        object-fit: cover;
        border-radius: 0.25rem;
        margin-right: 1rem;
        flex-shrink: 0;
    }
    
    .file-info {
        flex-grow: 1;
        min-width: 0;
    }
    
    .file-name {
        font-weight: 500;
        margin-bottom: 0.25rem;
        word-break: break-all;
    }
    
    .file-details {
        font-size: 0.875rem;
        color: #6c757d;
        display: flex;
        gap: 1rem;
    }
    
    .file-actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .file-remove {
        background: none;
        border: none;
        color: #dc3545;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s ease;
    }
    
    .file-remove:hover {
        background: rgba(220, 53, 69, 0.1);
    }
    
    .upload-progress .progress {
        height: 0.5rem;
    }
    
    .progress-text {
        margin-top: 0.25rem;
        display: block;
    }
</style>
@endpush

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const fileInput = document.getElementById('{{ $fieldSlug }}');
        const dropzone = document.getElementById('{{ $fieldSlug }}_dropzone');
        const browseBtn = document.getElementById('{{ $fieldSlug }}_browse');
        const fileList = document.getElementById('{{ $fieldSlug }}_list');
        const progressContainer = document.getElementById('{{ $fieldSlug }}_progress');
        
        const maxFileSize = {{ $maxFileSizeBytes }};
        const maxFiles = {{ $maxFiles }};
        const acceptTypes = @json($acceptTypes);
        const imageExtensions = @json($imageExtensions);
        const uploadUrl = '{{ $uploadUrl }}';
        const multiple = {{ $multiple ? 'true' : 'false' }};
        
        let selectedFiles = [];
        let existingFiles = @json($existingFilesData);
        
        // Initialize existing files
        existingFiles.forEach(file => {
            addFileToList(file, true);
        });
        
        // Browse button click
        browseBtn?.addEventListener('click', () => fileInput.click());
        
        // Drag and drop events
        if (dropzone) {
            dropzone.addEventListener('click', () => fileInput.click());
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropzone.addEventListener(eventName, preventDefaults, false);
            });
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropzone.addEventListener(eventName, () => dropzone.classList.add('drag-over'), false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropzone.addEventListener(eventName, () => dropzone.classList.remove('drag-over'), false);
            });
            
            dropzone.addEventListener('drop', handleDrop, false);
        }
        
        // File input change
        fileInput.addEventListener('change', function() {
            handleFiles(Array.from(this.files));
        });
        
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        function handleDrop(e) {
            const files = Array.from(e.dataTransfer.files);
            handleFiles(files);
        }
        
        function handleFiles(files) {
            const validFiles = [];
            
            files.forEach(file => {
                const validation = validateFile(file);
                if (validation.valid) {
                    if (!multiple) {
                        selectedFiles = []; // Clear previous files for single upload
                        fileList.innerHTML = '';
                    }
                    
                    if (multiple && selectedFiles.length + existingFiles.length >= maxFiles) {
                        showError(`Maximum ${maxFiles} files allowed`);
                        return;
                    }
                    
                    selectedFiles.push(file);
                    validFiles.push(file);
                    addFileToList(file, false);
                } else {
                    showError(`${file.name}: ${validation.error}`);
                }
            });
            
            // Upload files if upload URL is provided
            if (uploadUrl && validFiles.length > 0) {
                uploadFiles(validFiles);
            }
        }
        
        function validateFile(file) {
            // Check file size
            if (file.size > maxFileSize) {
                return {
                    valid: false,
                    error: `File size exceeds ${{{ $maxFileSize }}}MB limit`
                };
            }
            
            // Check file type
            if (acceptTypes.length > 0) {
                const isValidType = acceptTypes.some(type => {
                    if (type.includes('*')) {
                        const baseType = type.split('/')[0];
                        return file.type.startsWith(baseType);
                    }
                    return file.type === type;
                });
                
                if (!isValidType) {
                    return {
                        valid: false,
                        error: 'File type not allowed'
                    };
                }
            }
            
            return { valid: true };
        }
        
        function addFileToList(file, isExisting = false) {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.setAttribute('data-file-id', isExisting ? file.name : file.name + '_' + Date.now());
            
            const isImage = isExisting 
                ? imageExtensions.some(ext => file.name.toLowerCase().endsWith('.' + ext))
                : file.type.startsWith('image/');
            
            let previewHtml = '';
            if (isImage && file.url) {
                previewHtml = `<img src="${file.url}" class="file-preview" alt="${file.name}">`;
            } else if (isImage && !isExisting) {
                previewHtml = `<div class="file-preview" id="preview_${file.name}_${Date.now()}"></div>`;
                // Generate preview for new image files
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const preview = document.getElementById(`preview_${file.name}_${Date.now()}`);
                        if (preview) {
                            preview.innerHTML = `<img src="${e.target.result}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 0.25rem;" alt="${file.name}">`;
                        }
                    };
                    reader.readAsDataURL(file);
                }
            } else {
                const iconClass = getFileIcon(isExisting ? file.name : file.name);
                previewHtml = `<div class="file-icon"><i class="${iconClass}"></i></div>`;
            }
            
            const sizeText = file.size ? formatFileSize(file.size) : (isExisting && file.url ? 'Existing file' : '');
            const typeText = isExisting ? (file.type || 'Unknown') : file.type;
            
            fileItem.innerHTML = `
                ${previewHtml}
                <div class="file-info">
                    <div class="file-name">${file.name}</div>
                    <div class="file-details">
                        <span>${sizeText}</span>
                        <span>${typeText}</span>
                    </div>
                </div>
                <div class="file-actions">
                    ${isExisting && file.url ? `<a href="${file.url}" target="_blank" class="btn px-4 py-1 text-sm px-6 py-2 font-medium rounded-md transition-colors-outline-primary" title="View"><i class="fas fa-eye"></i></a>` : ''}
                    <button type="button" class="file-remove" title="Remove"><i class="fas fa-times"></i></button>
                </div>
            `;
            
            // Add remove functionality
            fileItem.querySelector('.file-remove').addEventListener('click', function() {
                removeFile(fileItem, file, isExisting);
            });
            
            fileList.appendChild(fileItem);
        }
        
        function removeFile(fileItem, file, isExisting) {
            if (isExisting) {
                existingFiles = existingFiles.filter(f => f.name !== file.name);
            } else {
                selectedFiles = selectedFiles.filter(f => f.name !== file.name);
            }
            
            fileItem.remove();
        }
        
        function getFileIcon(filename) {
            const ext = filename.toLowerCase().split('.').pop();
            const icons = {
                pdf: 'fas fa-file-pdf text-red-600 dark:text-red-400',
                doc: 'fas fa-file-word text-blue-600 dark:text-blue-400',
                docx: 'fas fa-file-word text-blue-600 dark:text-blue-400',
                xls: 'fas fa-file-excel text-green-600 dark:text-green-400',
                xlsx: 'fas fa-file-excel text-green-600 dark:text-green-400',
                ppt: 'fas fa-file-powerpoint text-yellow-600 dark:text-yellow-400',
                pptx: 'fas fa-file-powerpoint text-yellow-600 dark:text-yellow-400',
                zip: 'fas fa-file-archive text-gray-600 dark:text-gray-400',
                rar: 'fas fa-file-archive text-gray-600 dark:text-gray-400',
                txt: 'fas fa-file-alt text-gray-600 dark:text-gray-400',
                csv: 'fas fa-file-csv text-green-600 dark:text-green-400'
            };
            
            return icons[ext] || 'fas fa-file text-gray-600 dark:text-gray-400';
        }
        
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        function showError(message) {
            const container = fileInput.closest('.mb-4');
            let errorDiv = container.querySelector('.file-upload-error');
            
            if (!errorDiv) {
                errorDiv = document.createElement('div');
                errorDiv.className = 'file-upload-error px-4 py-3 rounded mb-4 bg-red-100 border border-red-400 text-red-700 alert-dismissible fade show mt-2';
                container.appendChild(errorDiv);
            }
            
            errorDiv.innerHTML = `
                <i class="fas fa-exclamation-circle"></i> ${message}
                <button type="button" class="px-6 py-2 font-medium rounded-md transition-colors-close" data-bs-dismiss="alert"></button>
            `;
        }
        
        // AJAX file upload (if upload URL provided)
        function uploadFiles(files) {
            if (!uploadUrl) return;
            
            const formData = new FormData();
            files.forEach((file, index) => {
                formData.append(`files[${index}]`, file);
            });
            
            // Add CSRF token
            const csrfToken = document.querySelector('meta[name="csrf-token"]');
            if (csrfToken) {
                formData.append('_token', csrfToken.getAttribute('content'));
            }
            
            progressContainer.style.display = 'block';
            const progressBar = progressContainer.querySelector('.progress-bar');
            const progressText = progressContainer.querySelector('.progress-text');
            
            fetch(uploadUrl, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                progressContainer.style.display = 'none';
                
                if (data.success) {
                    // Handle successful upload
                    files.forEach((file, index) => {
                        const fileItem = fileList.querySelector(`[data-file-id="${file.name}_${Date.now()}"]`);
                        if (fileItem) {
                            fileItem.classList.add('success');
                        }
                    });
                } else {
                    showError(data.message || 'Upload failed');
                }
            })
            .catch(error => {
                progressContainer.style.display = 'none';
                showError('Upload failed: ' + error.message);
            });
        }
    });
</script>
@endpush