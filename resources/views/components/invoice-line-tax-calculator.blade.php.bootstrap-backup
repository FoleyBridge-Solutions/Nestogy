@props([
    'lineItem' => null,
    'customer' => null,
    'product' => null,
    'quantity' => 1,
    'unitPrice' => 0,
])

<div id="line-tax-calculator-{{ $lineItem->id ?? 'new' }}" class="line-tax-calculator">
    <!-- Customer Address (for jurisdiction) -->
    <div class="row mb-3">
        <div class="col-md-12">
            <div class="card border-info">
                <div class="card-header bg-light">
                    <h6 class="mb-0">
                        <i class="fas fa-map-marker-alt text-info"></i>
                        Tax Jurisdiction
                        <span class="badge bg-info ms-2" id="tax-jurisdiction-confidence">{{ $customer ? 'Calculated' : 'Unknown' }}</span>
                    </h6>
                </div>
                <div class="card-body py-2">
                    @if($customer)
                        <div class="d-flex justify-content-between align-items-center">
                            <span><strong>{{ $customer->name }}</strong></span>
                            <span class="text-muted">{{ $customer->city }}, {{ $customer->state }} {{ $customer->zip_code }}</span>
                        </div>
                    @else
                        <div class="text-muted">Customer address required for tax calculation</div>
                    @endif
                </div>
            </div>
        </div>
    </div>

    <!-- Tax Calculation Fields (if product requires them) -->
    @if($product && $product->requiresTaxData())
        <div class="card border-primary mb-3">
            <div class="card-header bg-primary text-white">
                <h6 class="mb-0">
                    <i class="fas fa-list-check"></i>
                    Tax Calculation Information
                    <span class="badge bg-light text-dark ms-2">{{ $product->taxProfile->name ?? 'Standard' }}</span>
                </h6>
            </div>
            <div class="card-body">
                <div class="row" id="dynamic-tax-fields-{{ $lineItem->id ?? 'new' }}">
                    @foreach($product->getRequiredTaxFields() as $field)
                        @php
                            $fieldDef = $product->taxProfile->getFieldDefinition($field['name'] ?? $field);
                            $fieldName = $field['name'] ?? $field;
                            $fieldLabel = $fieldDef['label'] ?? ucwords(str_replace('_', ' ', $fieldName));
                            $fieldType = $fieldDef['type'] ?? 'text';
                            $fieldHelp = $fieldDef['help'] ?? '';
                            $fieldId = "line_tax_field_{$fieldName}_" . ($lineItem->id ?? 'new');
                        @endphp
                        
                        @if($fieldType === 'number')
                            <div class="col-md-6 mb-3">
                                <label for="{{ $fieldId }}" class="form-label">
                                    {{ $fieldLabel }}
                                    <span class="text-danger">*</span>
                                    @if($fieldHelp)
                                        <i class="fas fa-info-circle text-muted ms-1" 
                                           data-bs-toggle="tooltip" 
                                           title="{{ $fieldHelp }}"></i>
                                    @endif
                                </label>
                                <input type="number" 
                                       class="form-control line-tax-field" 
                                       id="{{ $fieldId }}" 
                                       name="line_tax_data[{{ $fieldName }}]"
                                       data-field="{{ $fieldName }}"
                                       min="{{ $fieldDef['min'] ?? 0 }}"
                                       step="{{ $fieldDef['step'] ?? '1' }}"
                                       value="{{ $fieldDef['default'] ?? '' }}"
                                       required>
                                <div class="invalid-feedback">Please enter a valid {{ strtolower($fieldLabel) }}</div>
                            </div>
                        @elseif($fieldType === 'address')
                            <div class="col-md-12 mb-3">
                                <label class="form-label">
                                    {{ $fieldLabel }}
                                    <span class="text-danger">*</span>
                                    @if($fieldHelp)
                                        <i class="fas fa-info-circle text-muted ms-1" 
                                           data-bs-toggle="tooltip" 
                                           title="{{ $fieldHelp }}"></i>
                                    @endif
                                </label>
                                <div class="row">
                                    <div class="col-md-6">
                                        <input type="text" 
                                               class="form-control line-tax-field" 
                                               placeholder="City"
                                               id="{{ $fieldId }}_city" 
                                               name="line_tax_data[{{ $fieldName }}][city]"
                                               data-field="{{ $fieldName }}_city"
                                               value="{{ $customer->city ?? '' }}"
                                               aria-label="{{ $fieldLabel }} City">
                                    </div>
                                    <div class="col-md-3">
                                        <input type="text" 
                                               class="form-control line-tax-field" 
                                               placeholder="State"
                                               id="{{ $fieldId }}_state" 
                                               name="line_tax_data[{{ $fieldName }}][state]"
                                               data-field="{{ $fieldName }}_state"
                                               maxlength="2"
                                               style="text-transform: uppercase"
                                               value="{{ $customer->state ?? '' }}"
                                               aria-label="{{ $fieldLabel }} State">
                                    </div>
                                    <div class="col-md-3">
                                        <input type="text" 
                                               class="form-control line-tax-field" 
                                               placeholder="ZIP"
                                               id="{{ $fieldId }}_zip" 
                                               name="line_tax_data[{{ $fieldName }}][zip]"
                                               data-field="{{ $fieldName }}_zip"
                                               maxlength="10"
                                               value="{{ $customer->zip_code ?? '' }}"
                                               aria-label="{{ $fieldLabel }} ZIP Code">
                                    </div>
                                </div>
                            </div>
                        @else
                            <div class="col-md-6 mb-3">
                                <label for="{{ $fieldId }}" class="form-label">
                                    {{ $fieldLabel }}
                                    @if($fieldHelp)
                                        <i class="fas fa-info-circle text-muted ms-1" 
                                           data-bs-toggle="tooltip" 
                                           title="{{ $fieldHelp }}"></i>
                                    @endif
                                </label>
                                <input type="text" 
                                       class="form-control line-tax-field" 
                                       id="{{ $fieldId }}" 
                                       name="line_tax_data[{{ $fieldName }}]"
                                       data-field="{{ $fieldName }}"
                                       value="{{ $fieldDef['default'] ?? '' }}">
                            </div>
                        @endif
                    @endforeach
                </div>
            </div>
        </div>
    @endif

    <!-- Tax Calculation Results -->
    <div class="card border-success" id="line-tax-results-{{ $lineItem->id ?? 'new' }}" style="display: none;">
        <div class="card-header bg-success text-white">
            <div class="d-flex align-items-center justify-content-between">
                <h6 class="mb-0">
                    <i class="fas fa-calculator"></i>
                    Line Item Tax Calculation
                </h6>
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" id="line-tax-loading-{{ $lineItem->id ?? 'new' }}" style="display: none;"></div>
                    <span class="badge bg-light text-dark" id="line-tax-engine-{{ $lineItem->id ?? 'new' }}">{{ $product->getTaxEngineType() ?? 'Standard' }}</span>
                </div>
            </div>
        </div>
        <div class="card-body">
            <!-- Line Item Summary -->
            <div class="row">
                <div class="col-md-8">
                    <div class="line-tax-summary p-3 bg-light rounded">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Line Subtotal ({{ $quantity }} Ã— ${{ number_format($unitPrice, 2) }}):</span>
                            <span class="h6 mb-0">$<span id="line-subtotal-{{ $lineItem->id ?? 'new' }}">{{ number_format($quantity * $unitPrice, 2) }}</span></span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center mb-2 text-muted">
                            <span>Line Tax (<span id="line-tax-rate-{{ $lineItem->id ?? 'new' }}">0.00</span>%):</span>
                            <span>+ $<span id="line-tax-amount-{{ $lineItem->id ?? 'new' }}">0.00</span></span>
                        </div>
                        <hr class="my-2">
                        <div class="d-flex justify-content-between align-items-center">
                            <strong class="h6 mb-0">Line Total:</strong>
                            <strong class="h5 mb-0 text-success">$<span id="line-total-{{ $lineItem->id ?? 'new' }}">{{ number_format($quantity * $unitPrice, 2) }}</span></strong>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="tax-metadata">
                        <h6 class="text-muted mb-2">Tax Details</h6>
                        <small class="text-muted">
                            <div class="mb-1"><strong>Jurisdiction:</strong><br><span id="line-jurisdiction-{{ $lineItem->id ?? 'new' }}">-</span></div>
                            <div class="mb-1"><strong>Tax Types:</strong><br><span id="line-tax-types-{{ $lineItem->id ?? 'new' }}">-</span></div>
                        </small>
                    </div>
                </div>
            </div>
            
            <!-- Tax Breakdown Toggle -->
            <div class="mt-3" id="line-tax-breakdown-section-{{ $lineItem->id ?? 'new' }}" style="display: none;">
                <div class="d-flex align-items-center justify-content-between mb-2">
                    <h6 class="text-muted mb-0">
                        <i class="fas fa-chart-pie"></i>
                        Tax Breakdown
                    </h6>
                    <button type="button" class="btn btn-sm btn-outline-secondary" id="toggle-line-breakdown-{{ $lineItem->id ?? 'new' }}">
                        <i class="fas fa-chevron-down"></i> Show Details
                    </button>
                </div>
                <div id="line-tax-breakdown-list-{{ $lineItem->id ?? 'new' }}" class="collapse">
                    <!-- Tax breakdown items will be inserted here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden fields to store line tax data -->
    <input type="hidden" id="line_tax_amount_{{ $lineItem->id ?? 'new' }}" name="line_tax_amount" value="0">
    <input type="hidden" id="line_tax_rate_{{ $lineItem->id ?? 'new' }}" name="line_tax_rate" value="0">
    <input type="hidden" id="line_tax_data_{{ $lineItem->id ?? 'new' }}" name="line_tax_calculation_data" value="">
</div>

@push('scripts')
<script>
class InvoiceLineTaxCalculator {
    constructor(lineId) {
        this.lineId = lineId;
        this.container = document.getElementById(`line-tax-calculator-${lineId}`);
        this.product = @json($product);
        this.customer = @json($customer);
        this.quantity = {{ $quantity }};
        this.unitPrice = {{ $unitPrice }};
        this.isCalculating = false;
        
        this.init();
    }
    
    init() {
        // Initialize tooltips
        this.initializeTooltips();
        
        // Initialize breakdown toggle
        this.initializeBreakdownToggle();
        
        // Listen for tax field changes
        this.attachFieldListeners();
        
        // Auto-calculate if we have all required data
        if (this.customer && this.hasAllRequiredFields()) {
            this.calculateLineTax();
        }
    }
    
    initializeTooltips() {
        var tooltipTriggerList = [].slice.call(this.container.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    }
    
    initializeBreakdownToggle() {
        const toggleBtn = document.getElementById(`toggle-line-breakdown-${this.lineId}`);
        const breakdownList = document.getElementById(`line-tax-breakdown-list-${this.lineId}`);
        
        if (toggleBtn && breakdownList) {
            toggleBtn.addEventListener('click', () => {
                const isCollapsed = !breakdownList.classList.contains('show');
                
                if (isCollapsed) {
                    breakdownList.classList.add('show');
                    toggleBtn.innerHTML = '<i class="fas fa-chevron-up"></i> Hide Details';
                } else {
                    breakdownList.classList.remove('show');
                    toggleBtn.innerHTML = '<i class="fas fa-chevron-down"></i> Show Details';
                }
            });
        }
    }
    
    attachFieldListeners() {
        const taxFields = this.container.querySelectorAll('.line-tax-field');
        taxFields.forEach(field => {
            field.addEventListener('change', () => {
                this.validateField(field);
                this.calculateLineTax();
            });
            
            field.addEventListener('input', debounce(() => {
                this.calculateLineTax();
            }, 500));
        });
    }
    
    validateField(field) {
        const value = field.value.trim();
        const isRequired = field.hasAttribute('required');
        
        if (isRequired && !value) {
            field.classList.add('is-invalid');
            field.classList.remove('is-valid');
        } else if (value) {
            field.classList.remove('is-invalid');
            field.classList.add('is-valid');
        } else {
            field.classList.remove('is-invalid', 'is-valid');
        }
    }
    
    hasAllRequiredFields() {
        if (!this.product || !this.product.requires_tax_data) {
            return true;
        }
        
        const requiredFields = this.container.querySelectorAll('.line-tax-field[required]');
        return Array.from(requiredFields).every(field => field.value.trim() !== '');
    }
    
    collectTaxData() {
        const taxData = {};
        const taxFields = this.container.querySelectorAll('.line-tax-field');
        
        taxFields.forEach(field => {
            const fieldName = field.dataset.field;
            const value = field.value.trim();
            
            if (value) {
                if (fieldName.includes('_')) {
                    const parts = fieldName.split('_');
                    const mainField = parts[0];
                    const subField = parts.slice(1).join('_');
                    
                    if (!taxData[mainField]) {
                        taxData[mainField] = {};
                    }
                    taxData[mainField][subField] = value;
                } else {
                    taxData[fieldName] = value;
                }
            }
        });
        
        return taxData;
    }
    
    async calculateLineTax() {
        if (!this.customer || this.isCalculating) {
            return;
        }
        
        if (this.product && this.product.requires_tax_data && !this.hasAllRequiredFields()) {
            this.hideResults();
            return;
        }
        
        this.isCalculating = true;
        this.showLoading();
        
        const taxData = this.collectTaxData();
        const lineTotal = this.quantity * this.unitPrice;
        
        try {
            const response = await fetch('/api/tax-engine/calculate-line', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                },
                body: JSON.stringify({
                    base_price: this.unitPrice,
                    quantity: this.quantity,
                    product_id: this.product?.id,
                    customer_id: this.customer?.id,
                    tax_data: taxData
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.displayResults(result.data);
            } else {
                console.error('Line tax calculation error:', result.error);
                this.showError(result.error);
            }
        } catch (error) {
            console.error('Error calculating line tax:', error);
            this.showError('Failed to calculate tax. Please try again.');
        } finally {
            this.isCalculating = false;
            this.hideLoading();
        }
    }
    
    showLoading() {
        const loadingSpinner = document.getElementById(`line-tax-loading-${this.lineId}`);
        const resultsCard = document.getElementById(`line-tax-results-${this.lineId}`);
        
        if (loadingSpinner) {
            loadingSpinner.style.display = 'inline-block';
        }
        
        if (resultsCard) {
            resultsCard.style.display = 'block';
        }
    }
    
    hideLoading() {
        const loadingSpinner = document.getElementById(`line-tax-loading-${this.lineId}`);
        if (loadingSpinner) {
            loadingSpinner.style.display = 'none';
        }
    }
    
    displayResults(data) {
        // Update amounts
        document.getElementById(`line-subtotal-${this.lineId}`).textContent = data.subtotal.toFixed(2);
        document.getElementById(`line-tax-amount-${this.lineId}`).textContent = data.tax_amount.toFixed(2);
        document.getElementById(`line-tax-rate-${this.lineId}`).textContent = data.tax_rate.toFixed(2);
        document.getElementById(`line-total-${this.lineId}`).textContent = data.total.toFixed(2);
        
        // Update metadata
        document.getElementById(`line-jurisdiction-${this.lineId}`).textContent = 
            data.jurisdictions && data.jurisdictions.length > 0 
                ? data.jurisdictions.map(j => j.name).join(', ')
                : 'Standard jurisdiction';
        
        document.getElementById(`line-tax-types-${this.lineId}`).textContent = 
            data.tax_breakdown && Object.keys(data.tax_breakdown).length > 0
                ? Object.values(data.tax_breakdown).map(tax => tax.name).join(', ')
                : 'Standard sales tax';
        
        // Show breakdown if available
        if (data.tax_breakdown && Object.keys(data.tax_breakdown).length > 0) {
            this.displayTaxBreakdown(data.tax_breakdown);
        }
        
        // Store calculated values
        document.getElementById(`line_tax_amount_${this.lineId}`).value = data.tax_amount;
        document.getElementById(`line_tax_rate_${this.lineId}`).value = data.tax_rate;
        document.getElementById(`line_tax_data_${this.lineId}`).value = JSON.stringify(data);
        
        // Show results
        document.getElementById(`line-tax-results-${this.lineId}`).style.display = 'block';
        
        // Trigger line total update event for invoice totals
        this.container.dispatchEvent(new CustomEvent('lineTaxCalculated', {
            detail: { lineId: this.lineId, taxData: data }
        }));
    }
    
    displayTaxBreakdown(breakdown) {
        const section = document.getElementById(`line-tax-breakdown-section-${this.lineId}`);
        const list = document.getElementById(`line-tax-breakdown-list-${this.lineId}`);
        
        if (!section || !list) return;
        
        list.innerHTML = '';
        
        for (const [code, tax] of Object.entries(breakdown)) {
            const item = document.createElement('div');
            item.className = 'd-flex justify-content-between mb-1 p-2 bg-light rounded';
            item.innerHTML = `
                <span><strong>${tax.name}</strong> (${tax.rate}%)</span>
                <span class="text-success">$${tax.amount.toFixed(2)}</span>
            `;
            list.appendChild(item);
        }
        
        section.style.display = 'block';
    }
    
    showError(error) {
        const resultsCard = document.getElementById(`line-tax-results-${this.lineId}`);
        if (resultsCard) {
            resultsCard.className = 'card border-danger';
            resultsCard.querySelector('.card-header').className = 'card-header bg-danger text-white';
            resultsCard.querySelector('.card-body').innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    Tax calculation failed: ${error}
                </div>
            `;
            resultsCard.style.display = 'block';
        }
    }
    
    hideResults() {
        const resultsCard = document.getElementById(`line-tax-results-${this.lineId}`);
        if (resultsCard) {
            resultsCard.style.display = 'none';
        }
    }
    
    updateQuantityAndPrice(quantity, unitPrice) {
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        
        if (this.customer && this.hasAllRequiredFields()) {
            this.calculateLineTax();
        }
    }
}

// Debounce helper
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Initialize calculator on DOM ready
document.addEventListener('DOMContentLoaded', function() {
    new InvoiceLineTaxCalculator('{{ $lineItem->id ?? "new" }}');
});
</script>
@endpush

<style>
.line-tax-calculator .card {
    transition: box-shadow 0.15s ease-in-out;
}

.line-tax-calculator .card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.line-tax-summary {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 1px solid #dee2e6;
}

.line-tax-field {
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.line-tax-field:focus {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

.line-tax-field.is-valid {
    border-color: #198754;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='m2.3 6.73.93.93 4.83-4.83-.93-.93-3.9 3.9L.7 4.24z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.line-tax-field.is-invalid {
    border-color: #dc3545;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 4.6 1.4 1.4 1.4-1.4M7.4 8.2 6 6.8l-1.4 1.4'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

@media (max-width: 768px) {
    .line-tax-calculator .tax-metadata {
        margin-top: 1rem;
    }
}
</style>