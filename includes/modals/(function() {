(function() {
    'use strict';

    var ALERT_CODES = [
        'successfulBackup',
        'failedBackup',
        'missedBackup',
        'bootVM',
        'diskUsage',
        'licenseUnavailable',
        'poolStatus',
        'protectedSystem',
        'vaultReplication',
    ];

    var ALERT_NAMES = [
        'Successful Backup',
        'Failed Backup',
        'Missed Backup',
        'Boot VM',
        'Agent Status',
        'Disk Usage',
        'License Unavailable',
        'Pool Status',
        'Protected System',
        'Vault Replication',
    ];

    /**
     * @class ConnectWiseSettings
     * This class manages the UI for the ConnectWise Integrations Settings
     * section of the Replibit UI.
     *
     * @constructor
     */
    var ConnectWiseSettings = function() {
        /**
         * Object for storing the CW settings data.
         * @type {Object}
         */
        this.data = {
            username: '',
            password: '',
            member_id: '',
            api_url: '',
            company: '',
            is_inherited_from_gmp: false,
            alerts: {
                company: { id: 0, text: '' }
            },
            billing: {
                enabled: false,
                customer: { id: 0, text: '' },
                agreement: { id: 0, text: '' },
                addition: { id: 0, text: '' }
            }
        };

        this.initialised = false;
        this.openModalsCount = 0;

        /**
         * ConnectWise form elements.
         * @type {Object}
         */
        this.form = {
            username: null,
            password: null,
            memberId: null,
            company: null,
            domain: null,
            inherit_configuration: null,
            alerts: {},
            billing: {}
        };

        /**
         * ConnectWise panels.
         * @type {Object}
         */
        this.sections = {
            inherit_configuration: null,
            credentials: null,
            billing: null,
            alerts: null
        };
    };


    /**
     * Return an object with the credentials data.
     *
     * Try to get the credentials from the form. If the form is empty, use
     * the credentials stored in the server.
     *
     * @returns {Object} the credentials data object.
     */
    ConnectWiseSettings.prototype.getCredentials = function() {
       return {
          username: this.form.username.val() || this.data.username,
          password: this.form.password.val() || this.data.password,
          member_id: this.form.memberId.val() || this.data.member_id,
          company: this.form.company.val() || this.data.company,
          api_url: this.form.domain.val() || this.data.api_url
       };
    };


    /**
     * Check if all required credentials have been entered.
     *
     * @returns {Boolean} whether the credentials were entered or not.
     */
    ConnectWiseSettings.prototype.hasCredentials = function() {
        var creds = this.getCredentials();
        return creds.username && creds.password && creds.company && creds.api_url;
    };


    ConnectWiseSettings.prototype.display = function(validate) {
        var self = this;

        if (!this.initialised) {
            this.init();
        }

        // Initialize the sections.
        this.disableSections();

        // Fetch the settings from the API and initialize the form.
        this.fetch(function() {
            self.reset({ onlyCreds: true });

            if (validate && self.hasCredentials()) {
                self.validateCredentials();
            }
        });
    };

    ConnectWiseSettings.prototype.manageInheritConfigurationSection = function () {
        var self = this;
        if (this.data.is_inherited_from_gmp) {
            this.sections.inherit_configuration.show();
        }
        else {
            $.ajax({
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                url: 'api/cw_settings/utils/is_inheritance_allowed',
                success: function (res) {
                    if (res && res.data && res.data.is_inheritance_allowed) {
                        self.sections.inherit_configuration.show();
                    }
                    else {
                        self.sections.inherit_configuration.hide();
                    }
                }
            });
        }
    };

    ConnectWiseSettings.prototype.manageLicenseAlertSection = function () {
        var self = this;
        $.ajax({
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            url: 'api/cw_settings/utils/is_license_alert_enabled',
            success: function (res) {
                if (res && res.data && res.data.is_license_alert_enabled) {
                    self.sections.alert_license_unavailable_cw.show();
                } else {
                    self.sections.alert_license_unavailable_cw.hide();
                }
            }
        });
    };

    ConnectWiseSettings.prototype.inheritConfiguration = function () {
        var self = this;
        var inherit_from_gmp = this.form.inherit_configuration[0].checked;
        var data = {
            "inherit_from_gmp": inherit_from_gmp
        };

        $.ajax({
            url: 'api/cw_settings/utils/inherit_from_gmp',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(data),
            dataType: 'json',
            success: function (res) {

                if (res.error) {
                    self.disableSections();
                    self.showError('An error ocurred.\n' + res.error);
                    return;
                }

                self.display(inherit_from_gmp);
            }
        });
    };

    /**
     * ConnectWise Settings UI initializer.
     *
     * Bind all the events on the ConnectWise Settings form with their
     * corresponding handlers.
     */
    ConnectWiseSettings.prototype.init = function() {
        var billingData = this.data.billing;
        var alertsData = this.data.alerts;
        var form = this.form;
        var self = this;

        // Form sections.
        this.sections.credentials = $('#cw-credentials');
        this.sections.billing = $('#cw-billing');
        this.sections.alerts = $('#cw-alerts-settings');
        this.sections.inherit_configuration = $('#inherit-cw-configuration-section');
        this.sections.alert_license_unavailable_cw = $('#alertLicenseUnavailableCW');

        if (isVault()){
            this.sections.billing.parent().hide();
        }

        // Form fields.
        form.company = $('#CompanyName');
        form.domain = $('#DomainName');
        form.memberId = $('#cwMemberId');
        form.password = $('#Password');
        form.username = $('#UserName');
        form.inherit_configuration = $('#inherit-cw-configuration');
        form.alerts.company = $('#serviceTicketCompany');
        form.alerts.createAlertBtn = $('#createAlertBtn');
        form.alerts.alertTypeSelector = $('#alertTypeSelector').select2({
            data: ALERT_CODES.map(function(code, i) {
                return { id: code, text: ALERT_NAMES[i] };
            })
        });
        form.billing.enabled = $('#cwBillingEnabled');
        form.billing.customer = $('#cwCustomer');
        form.billing.agreement = $('#cwAgreement');
        form.billing.addition = $('#cwAddition');

        this.form.inherit_configuration.on('change', function(){
            self.inheritConfiguration();
        });

        // Disable the billing and ticketing sections when creds are modified.
        this.sections.credentials.find("input").on("keyup", function() {
            self.disableSections();
        });

        // Checkbox for enabling the billing integration with CW.
        form.billing.enabled.on('change', function() {
            billingData.enabled = this.checked;

            if (this.checked) {
                $('#cwBillingSettings').show();
            } else {
                $('#cwBillingSettings').hide();
            }
        });

        // Company for the billing integration.
        form.billing.customer.on('change', function() {
            billingData.customer.text = $(this).children(':selected').text();
            billingData.customer.id = Number($(this).val());

            self.resetBillingAgreement();
            self.resetBillingAddition();
        });

        // Agreement for filtering the additions.
        form.billing.agreement.on('change', function() {
            billingData.agreement.text = $(this).children(':selected').text();
            billingData.agreement.id = Number($(this).val());

            self.resetBillingAddition();
        });

        // Addition to be updated with billing information.
        form.billing.addition.on('change', function() {
            billingData.addition.text = $(this).children(':selected').text();
            billingData.addition.id = Number($(this).val());
        });

        // Ticket boards and status selectors.
        ALERT_CODES.forEach(function(name) {
            // References to each alert setting field.
            var alert = form.alerts[name] = {
                board: $('#' + name + 'Board'),
                openStatus: $('#' + name + 'OpenStatus'),
                closedStatus: $('#' + name + 'ClosedStatus'),
                enabled: $('#' + name + 'Enabled')
            };

            // Default values.
            var ticket = alertsData[name] = {
                enabled: false,
                board: { id: 0, text: '' },
                openStatus: { id: 0, text: '' },
                closedStatus: { id: 0, text: '' }
            };

            // "Enable ticket type" checkbox.
            alert.enabled.on('change', function() {
                ticket.enabled = this.checked;
                if (alert.board.val()) {
                    self.setAlertEditing(alert, this.checked);
                } else {
                    alert.board.prop('disabled', false);
                    alert.openStatus.prop('disabled', true);
                    alert.closedStatus.prop('disabled', true);
                }
            });

            // Service board.
            alert.board.on('change', function() {
                ticket.board.id = Number($(this).val());
                ticket.board.text = $(this).children(':selected').text();

                // Reset ticket mappings
                ticket.openStatus = { id: 0, text: '' };
                ticket.closedStatus = { id: 0, text: '' };
                alert.openStatus.empty();
                alert.closedStatus.empty();
                self.initTicketStatus();
            });

            // Closed ticket status.
            alert.closedStatus.on('change', function() {
                ticket.closedStatus.id = Number($(this).val());
                ticket.closedStatus.text = $(this).children(':selected').text();
            });

            // Open ticket status.
            alert.openStatus.on('change', function() {
                ticket.openStatus.id = Number($(this).val());
                ticket.openStatus.text = $(this).children(':selected').text();
            });
        });

        // Service ticket company.
        form.alerts.company.on('change', function() {
            alertsData.company.id = Number($(this).val());
            alertsData.company.text = $(this).children(':selected').text();
        });

        // Create test alert button.
        form.alerts.createAlertBtn.on('click', function() {
            var alertType = form.alerts.alertTypeSelector.children(':selected').text();
            self.popup('Creating test ticket', true);

            $.ajax({
                url: 'api/createCWTicket',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify({ type: alertType }),
                dataType: 'json',
                success: function(res) {
                  self.hidePopup();
                  if (res.error) {
                    self.showError(res.error);
                  }
                }
            });
        });

        this.initialised = true;
    };


    ConnectWiseSettings.prototype.initBillingPanel = function() {
        this.initBillingCustomer();
        this.initBillingAgreement();
        this.initBillingAddition();
    };


    ConnectWiseSettings.prototype.initBillingCustomer = function() {
        var self = this;

        if (this.data.billing.customer.id) {
            this.form.billing.customer.select2({
                data: [this.data.billing.customer]
            });
        }

        this.form.billing.customer.select2({
            placeholder: 'Select a company',
            ajax: {
                url: 'api/cw_companies/abc/get_companies',
                type: 'POST',
                delay: 400,
                contentType: 'application/json; charset=utf-8',
                data: function(params) {
                    var body = self.getCredentials();
                    body.p = params.page;

                    if (params.term) {
                        body.conditions = 'name contains "' + params.term + '"';
                    }

                    return JSON.stringify(body);
                },
                dataType: 'json',
                processResults: function(res) {
                    if (res.error) {
                         self.showError(res.error);
                         return [];
                     }

                    return {
                        results: res.data.map(function(d) {
                            return {id: d.id, text: d.name};
                        })
                    };
                }
            }
        });
    };


    ConnectWiseSettings.prototype.initBillingAgreement = function(data) {
        var self = this;

        if (this.data.billing.agreement.id) {
            this.form.billing.agreement.select2({
                data: [this.data.billing.agreement]
            });
        }

        this.form.billing.agreement.select2({
            placeholder: 'Select an agreement',
            ajax: {
                url: 'api/cw_agreements/abc/all',
                type: 'POST',
                delay: 400,
                contentType: 'application/json; charset=utf-8',
                data: function(params) {
                    var body = self.getCredentials();
                    body.p = params.page;
                    body.conditions = 'company/id=' + self.data.billing.customer.id;

                    return JSON.stringify(body);
                },
                dataType: 'json',
                processResults: function(res) {
                    if (res.error) {
                         self.showError(res.error);
                         return [];
                     }

                    return {
                        results: res.data.map(function(d) {
                            return {id: d.id, text: d.name};
                        })
                    };
                }
            }
        });
    };


    ConnectWiseSettings.prototype.resetBillingAgreement = function() {
        this.data.billing.agreement = { id: 0, text: '' };
        this.form.billing.agreement.empty();
        this.initBillingAgreement();
    };


    ConnectWiseSettings.prototype.initBillingAddition = function(data) {
        var self = this;

        if (this.data.billing.addition.id) {
            this.form.billing.addition.select2({
                data: [this.data.billing.addition]
            });
        }

        this.form.billing.addition.select2({
            placeholder: 'Select an addition',
            ajax: {
                type: 'POST',
                url: function() {
                    return 'api/cw_agreements/' + self.data.billing.agreement.id + '/get_additions';
                },
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                delay: 400,
                data: function(params) {
                    var body = self.getCredentials();
                    body.p = params.page;

                    return JSON.stringify(body);
                },
                processResults: function(res) {
                    if (res.error) {
                         self.showError(res.error);
                         return [];
                     }

                    return {
                        results: res.data.map(function(d) {
                            return {id: d.id, text: d.description};
                        })
                    };
                }
            }
        });
    };


    ConnectWiseSettings.prototype.resetBillingAddition = function() {
        this.data.billing.addition = { id: 0, text: '' };
        this.form.billing.addition.empty();
        this.initBillingAddition();
    };


    ConnectWiseSettings.prototype.initTicketPanel = function() {
        this.initTicketCompany();
        this.initTicketBoards();
        this.initTicketStatus();
    };


    ConnectWiseSettings.prototype.initTicketCompany = function() {
        var self = this;

        if (this.data.alerts.company.id) {
            this.form.alerts.company.select2({data: [this.data.alerts.company]});
        }
        else {
            this.form.alerts.company.val([]).trigger('change.select2');
        }

        this.form.alerts.company.select2({
            placeholder: 'Select a company',
            ajax: {
                type: 'POST',
                url: 'api/cw_companies/abc/get_companies',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                delay: 400,
                data: function(params) {
                    var body = self.getCredentials();
                    body.p = params.page;

                    if (params.term) {
                        body.conditions = 'name contains "' + params.term + '"';
                    }

                    return JSON.stringify(body);
                },
                processResults: function(res) {
                    if (res.error) {
                        self.showError(res.error);
                        return [];
                    }

                    return {
                        results: res.data.map(function(d) {
                            return {id: d.id, text: d.name};
                        })
                    };
                }
            }
        });
    };


    ConnectWiseSettings.prototype.initTicketBoards = function() {
        var self = this;

        ALERT_CODES.forEach(function(current) {
            if (self.data.alerts[current].board.id) {
                self.form.alerts[current].board.select2({data: [self.data.alerts[current].board]});
                self.form.alerts[current].board.val(self.data.alerts[current].board.id).trigger('change.select2');
            }
            else {
                self.form.alerts[current].board.val([]).trigger('change.select2');
            }

            self.form.alerts[current].board.select2({
                placeholder: 'Service board',
                ajax: {
                    type: 'POST',
                    url: 'api/cw_service_boards/abs/get_for_company',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    delay: 400,
                    data: function(params) {
                        var body = self.getCredentials();
                        body.p = params.page;

                        if (params.term) {
                            body.conditions = 'name contains "' + params.term + '"';
                        }

                        return JSON.stringify(body);
                    },
                    processResults: function(res) {
                        if (res.error) {
                            self.showError(res.error);
                            return [];
                        }

                        return {
                            results: res.data.map(function(d) {
                                return {id: d.id, text: d.name};
                            })
                        };
                    }
                }
            });
        });
    };


    ConnectWiseSettings.prototype.initTicketStatus = function() {
        var self = this;
        var options = {
            placeholder: 'Select a status',
            ajax: {
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                delay: 400,
                data: function(params) {
                    var body = self.getCredentials();
                    body.p = params.page;

                    return JSON.stringify(body);
                },
                processResults: function(res) {
                    if (res.error) {
                        self.showError(res.error);
                        return [];
                    }

                    return {
                        results: res.data.map(function(d) {
                            return {id: d.id, text: d.name};
                        })
                    };
                }
            }
        };

        ALERT_CODES.forEach(function(current) {
            // Create a copy of the options object.
            var currentOpts = Object.create(options);
            var alertForm = self.form.alerts[current];
            var alertData = self.data.alerts[current];

            if (alertData.openStatus.id) {
                alertForm.openStatus.select2({ data: [alertData.openStatus] });
                alertForm.openStatus.val(alertData.openStatus.id).trigger('change.select2');
            }
            else {
                alertForm.openStatus.val([]).trigger('change.select2');
            }

            if (alertData.closedStatus.id) {
                alertForm.closedStatus.select2({ data: [alertData.closedStatus] });
                alertForm.closedStatus.val(alertData.closedStatus.id).trigger('change.select2');
            }
            else {
                alertForm.closedStatus.val([]).trigger('change.select2');
            }

            currentOpts.ajax.url = function() {
                return 'api/cw_service_boards/' + alertData.board.id + '/get_statuses';
            };

            alertForm.openStatus.select2(currentOpts);
            alertForm.closedStatus.select2(currentOpts);
            self.setAlertEditing(alertForm, alertData.enabled);
        });

    };


    ConnectWiseSettings.prototype.disableSections = function() {
        // Collapse the sections.
        this.sections.billing.collapse('hide');
        this.sections.alerts.collapse('hide');

        // Disable the section panel toggle button.
        $('a[href="#cw-billing"]')
            .css('pointer-events', 'none')
            .addClass('collapsed');
        $('a[href="#cw-alerts-settings"]')
            .css('pointer-events', 'none')
            .addClass('collapsed');
    };


    ConnectWiseSettings.prototype.enableSections = function() {
        // Enable the section panel toggle button.
        $('a[href="#cw-billing"]').css("pointer-events", "auto");
        $('a[href="#cw-alerts-settings"]').css("pointer-events", "auto");

    };


    /**
     * Fetch the ConnectWise settings from the API.
     *
     * @param {Function} cb Callback function. Takes an error and the response.
     */
    ConnectWiseSettings.prototype.fetch = function(cb) {
        var self = this;

        $.ajax({
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            url: 'api/cw_settings',
            success: function(res) {
                if (res.error) {
                    self.showError(res.error);
                    return;
                }

                if (res && res.data) {
                    self.extend({
                        username: res.data.username || '',
                        password: res.data.password || '',
                        company: res.data.company || '',
                        api_url: res.data.api_url || '',
                        member_id: res.data.member_id || '',
                        alerts: res.data.alerts || {},
                        billing: res.data.billing || {},
                        is_inherited_from_gmp: res.data.is_inherited_from_gmp || false
                    });

                    if (res.data.alerts && !res.data.alerts.company) {
                        self.data.alerts.company = {text: "", id: 0}
                    }
                }

                if (cb) {
                    cb(null, res.data);
                }
            }
        });
    };


    /**
     * Reset the CW settings form with the current CW settings.
     */
    ConnectWiseSettings.prototype.reset = function(opts) {
        var self = this;
        var opts = opts || {};

        this.form.username.val(this.data.username);
        this.form.password.val(this.data.password);
        this.form.domain.val(this.data.api_url);
        this.form.memberId.val(this.data.member_id);
        this.form.company.val(this.data.company);
        this.form.billing.enabled[0].checked = this.data.billing.enabled;

        // Set inherit configuration checkbox value
        this.form.inherit_configuration[0].checked = this.data.is_inherited_from_gmp;

        // Hide/show inherit configuration section
        this.manageInheritConfigurationSection();

        // Hide/show the billing panel inputs depending on whether it is enabled.
        if (this.data.billing.enabled) {
            $('#cwBillingSettings').show();
        } else {
            $('#cwBillingSettings').hide();
        }

        if (!opts.onlyCreds) {
            self.initBillingPanel();
            self.initTicketPanel();

            ALERT_CODES.forEach(function(name) {
                var alert = self.form.alerts[name];
                var data = self.data.alerts[name];
                if (alert?.enabled?.[0] !== undefined) {
                  alert.enabled[0].checked = data.enabled;
                }
            });
        }

        // Enable/disable editing settings
        this.setSettingsEditing(!this.data.is_inherited_from_gmp);
        // Hide or show license alert section
        this.manageLicenseAlertSection();
    };


    /**
     * Send the credentials to the API to be validated.
     */
    ConnectWiseSettings.prototype.validateCredentials = function() {
        var self = this;
        var data = this.getCredentials();

        this.popup('Validating credentials', true);

        $.ajax({
            url: 'api/cw_settings/utils/validate_credentials',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(data),
            dataType: 'json',
            success: function(res) {
                if (res.error) {
                    self.disableSections();
                    self.hidePopup();
                    self.showError('An error ocurred.\n' + res.error);
                    return;
                }

                self.extend(res.data);
                self.reset();

                // Hide the credentials section.
                $('a[href="#cw-credentials"]').addClass('collapsed');
                self.sections.credentials.collapse('hide');

                // Show the billing section.
                if (isVault()) {
                    $('a[href="#cw-alerts-settings"]').removeClass('collapsed');
                    self.sections.alerts.collapse('show');
                } else {
                    $('a[href="#cw-billing"]').removeClass('collapsed');
                    self.sections.billing.collapse('show');
                    self.sections.alerts.collapse('hide');
                }

                self.enableSections();

                self.hidePopup();
            }
        });

    };


    /**
     * Validate the Alerts-Ticket mappings.
     */
    ConnectWiseSettings.prototype.validateAlertMappings = function() {
        var settings = this;
        var mapping = null;
        var name = '';
        var l = ALERT_CODES.length;
        var enabledAlerts = ALERT_CODES.some(function(name) {
           return settings.form.alerts[name].enabled[0].checked;
        });

        if (enabledAlerts && !this.data.alerts.company.id) {
            this.showError('You must select a company in the ticketing integration settings.');
            return false;
        }

        for (var i = 0; i < l; i++) {
            name = ALERT_NAMES[i];
            mapping = this.data.alerts[ALERT_CODES[i]];

            if (!mapping.enabled) continue;

            if (!mapping.board.id) {
                this.showError(name + ' alerts: You must select a Service Board.');
                return false;
            }

            if (!mapping.openStatus.id && ALERT_CODES[i] !== "successfulBackup") {
                this.showError(name + ' alerts: Invalid status for new tickets.');
                return false;
            }

            if (!mapping.closedStatus.id) {
                this.showError(name + ' alerts: Invalid status for closed tickets.');
                return false;
            }
        }

        return true;
    };

    /**
     * Validate the billing settings
     */
    ConnectWiseSettings.prototype.validateBilling = function() {
        if (!this.data.billing.enabled) {
            return true;
        }

        if (!this.data.billing.customer.id) {
            this.showError('You must select a Customer for Billing Integration');
            return false;
        }

        if (!this.data.billing.agreement.id) {
            this.showError('You must select an Agreement for Billing Integration');
            return false;
        }

        if (!this.data.billing.addition.id) {
            this.showError('You must select an Addition for Billing Integration');
            return false;
        }

        return true;
    };

    /**
     * Show an alert box with the error message.
     *
     * @param {string} msg  The error message.
     */
    ConnectWiseSettings.prototype.showError = function(msg) {
        $('#apiAlert').modal('show');
        $("#apiErrorMsg").html(msg);
    };


    /**
     * Enable/disable board and ticket mapping editing
     *
     * @param {Object}  alert Alert object
     * @param {Boolean} value If true, editing will be allowed
     */
    ConnectWiseSettings.prototype.setAlertEditing = function(alert, value) {
        alert.board.prop('disabled', !value);
        alert.openStatus.prop('disabled', !value);
        alert.closedStatus.prop('disabled', !value);
    };

    /**
     * Enable/disable CW settings editing
     *
     * @param {Boolean} value If true, editing will be allowed
     */
    ConnectWiseSettings.prototype.setSettingsEditing = function (value) {
        this.form.username.prop('disabled', !value);
        this.form.password.prop('disabled', !value);
        this.form.domain.prop('disabled', !value);
        this.form.company.prop('disabled', !value);


        ALERT_CODES.forEach(function(name) {
           var alert = {
                board: $('#' + name + 'Board'),
                openStatus: $('#' + name + 'OpenStatus'),
                closedStatus: $('#' + name + 'ClosedStatus'),
                enabled: $('#' + name + 'Enabled')
            };
            alert.board.prop('disabled', !value);
            alert.openStatus.prop('disabled', !value);
            alert.closedStatus.prop('disabled', !value);
            alert.enabled.prop('disabled', !value);
        });
    };

    /**
     * Extend the CW settings with the given object.
     *
     * @param {Object} obj  The object with the new settings data.
     */
    ConnectWiseSettings.prototype.extend = function(obj) {
        function extend(a, b) {
            a = a || {};
            b = b || {};

            Object
                .keys(b)
                .forEach(function(key) {
                    if (b[key] !== null && typeof b[key] === 'object') {
                        a[key] = extend(a[key], b[key]);
                    } else {
                        a[key] = b[key];
                    }
                });

            return a;
        }

        extend(this.data, obj);
    };


    /**
     * Send the new ConnectWise settings to the API to be saved.
     *
     * @param {Function} cb Callback function. Takes an error and the response.
     */
    ConnectWiseSettings.prototype.save = function(cb) {
        var self = this;
        var data = {
            username: this.form.username.val(),
            password: this.form.password.val(),
            company: this.form.company.val(),
            api_url: this.form.domain.val(),
            alerts: this.data.alerts,
            billing: this.data.billing
        };

        if (!this.validateAlertMappings() || !this.validateBilling()) {
            return;
        }

        $.ajax({
            url: 'api/cw_settings/update',
            type: 'PUT',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(data),
            dataType: 'json',
            success: function(res) {
                self.extend(data);

                if (res.error) {
                    self.showError(res.error);
                    return;
                }

                if (typeof cb === 'function') {
                    cb(res.err, res.data);
                }

                self.popup('Settings saved successfully');
            }
        });
    };


    /**
     * Display a popup with the given message.
     *
     * @param {String}  msg     The message to be displayed.
     * @param {Boolean} persist If true, the popup will not hide.
     */
    ConnectWiseSettings.prototype.popup = function(msg, persist) {
        $('.imgloader').html('<img src="style/images/ajax-loader.gif"/>');
        $('#alertmsg').html(msg);
        $('#showalerts').modal('show');
        $('body').addClass('displayblock');

        this.openModalsCount += 1;

        if (!persist) {
            setTimeout(this.hidePopup.bind(this, name), 3000);
        }
    };


    /**
     * Hide the popup.
     */
    ConnectWiseSettings.prototype.hidePopup = function(name) {
        this.openModalsCount -= 1;

        if (this.openModalsCount === 0) {
            $('#showalerts').modal('hide');
            $('body').removeClass('displayblock');
            $('.modal-backdrop').remove();
        }
    };

    /**
     * Import a configuration file.
     */
    ConnectWiseSettings.prototype.importSettings = function() {
        var fileInput = document.createElement('input');
        var reader;
        var settings = this;

        if (!FileReader) {
           this.popup("Your browser does not support reading local files");
           return;
        }

        reader = new FileReader();

        fileInput.setAttribute('type', 'file');

        // Add support for Firefox.
        fileInput.style.visibility = 'hidden';
        document.body.appendChild(fileInput);

        // When a new setting is imported, validate the credentials and save
        // the settings.
        reader.onload = function(evt) {
            settings.data = JSON.parse(evt.target.result);
            settings.reset();
            settings.validateCredentials();
            settings.save();
        };

        // Set the file select handler.
        fileInput.addEventListener('change', function(evt) {
            reader.readAsText(evt.target.files[0]);
        });

        // Trigger the file select dialog.
        fileInput.click();

        // Remove the unnecessary input.
        document.body.removeChild(fileInput);
    };


    /**
     * Export the current settings to a file.
     */
    ConnectWiseSettings.prototype.exportSettings = function() {
        var filename = 'settings.json';

        // Binary Large Object with the serialized settings (JSON).
        var blob = new Blob(
            [JSON.stringify(this.data, null, 2)],
            { type: 'text/plain;charset=utf-8' }
        );

        if (navigator && navigator.msSaveBlob) {   // IE10+
            navigator.msSaveBlob(blob, filename);
        } else {
            var link = document.createElement('a');

            link.setAttribute('href', URL.createObjectURL(blob));
            link.setAttribute('download', filename);

            // Adds compatibility for Firefox.
            link.style.visibility = 'hidden';
            document.body.appendChild(link);

            // Trigger the download.
            link.click();

            // Remove the link since it's no longer necessary.
            document.body.removeChild(link);
        }
    };


    window.ConnectWiseSettings = new ConnectWiseSettings();
})();

window.ReplibitApi = (function ReplibitApi() {
  function postRequest(url, data) {
    var result = $.ajax({
      type: 'POST',
      url: url,
      contentType: 'application/json; charset=utf-8',
      headers: {
        'Replibit-Server': $.jStorage.get('machineId'),
      },
      data: data || {},
      dataType: 'json',
    });

    return {
      done: result.done,
      fail: result.fail,
    };
  }

  return {
    post: postRequest,
  };
}).call(window)


window.VolumeExportApi = (function VolumeExportApi() {
  function stopExport(snapshotName) {
    return ReplibitApi.post('api/volumes_export/' + snapshotName + '/stop_export');
  }

  return {
    stopExport: stopExport,
  };
}).call(window)

window.SnapshotsTable = (function SnapshotsTable() {
	var SnapshotActionsTemplate = (function SnapshotActionsTemplate() {
		function makeSnapshotActionsTemplate(protectedSystem, aData, iDisplayIndex) {
			var snapshotName = aData.snapshotId;
	
			var isAnyVMStarted = checkVritSShot(protectedSystem.snapshotUsage);
			var usedByAction = (protectedSystem.snapshotUsage[snapshotName] || '');
			const isIncrementalRecoveryRunning = protectedSystem.uiVisibilityState.isIncrementalRecoveryInProgress;
	
			var isVMStarted = (usedByAction === 'testkvm' || usedByAction === 'livekvm');
			var isMounted = (usedByAction === 'testmount' || usedByAction === 'livemount');
			var isIscsiStarted = (usedByAction === 'testiscsi' || usedByAction === 'liveiscsi');
			var infoMessage = aData.usage && aData.usage.application ? aData.usage.application : getUsedByActionInfo(usedByAction);

			function buttonTemplateVirtualization() {
				var functionName = 'configureVirtualization';
				var snapshotAction = 'startvm';
				var buttonText = 'Start VM';
	
				if (isVMStarted) {
					functionName = usedByAction === 'testkvm' ? 'stopVirt' : 'stopok';
					snapshotAction = "stopvm";
					buttonText = 'Stop VM';
				}

				var disabledTemplate = disableIf((isAnyVMStarted && !isVMStarted) || (usedByAction && !isVMStarted) || isIncrementalRecoveryRunning);
				return (
					'<a ' + disabledTemplate + ' class="btn btn-default snapshots-table-btn" ' + (!protectedSystem.uiVisibilityState.showStartVMButton ? 'style="display: none"' : '') + ' id="virtualButton' + iDisplayIndex + '" onclick="' + functionName + '(\'' + snapshotName + '\',\'' + snapshotAction + '\',\'' + protectedSystem.uuid + '\',' + protectedSystem.encrypted + ',\'' + protectedSystem.machineId + '\'' + (functionName == 'stopVirt' ? ',true' : '') + ')">' +
						buttonContent(buttonText) +	
					'</a>'
				);
			}

			function buttonTemplateTerminal() {
				if (!isVMStarted) {
					return '';
				}

				return (
					'<a class=" btn btn-default" ' + (!protectedSystem.uiVisibilityState.showTerminalButton ? 'style="display: none"' : '') + ' data-toggle="modal" id="terminalButton' + iDisplayIndex + '" onclick="getTerminal(\'' + snapshotName + '\',\'terminal\',\'' + protectedSystem.machineId + '\')">' +
						buttonContent('Terminal') +	
					'</a>'
				);
			}

			function buttonTemplateMount() {
				var functionName = 'mountSnapshot';
				var snapshotAction = 'mount';
				var buttonText = 'Mount';
	
				if (isMounted) {
					snapshotAction = "dismount";
					functionName = "dismount";
					buttonText = 'Dismount';
				}

				return (
					'<a ' + disableIf((usedByAction && !isMounted) || isIncrementalRecoveryRunning) + ' class=" btn btn-default snapshots-table-btn" ' + (!protectedSystem.uiVisibilityState.showMountButton ? 'style="display: none"' : '') + ' id="mountButton' + iDisplayIndex + '" onclick="' + functionName + '(\'' + snapshotName + '\',\'' + snapshotAction + '\',\'' + protectedSystem.uuid + '\',' + protectedSystem.encrypted + ',\'' + protectedSystem.machineId + '\')" >' +
						buttonContent(buttonText) +	
					'</a>'
				);
			}
	
			function buttonTemplateIscsi() {
				var functionName = "configureIscsi";
				var snapshotAction = "createIscsiTarget";
				var buttonText = "iSCSI Start";
	
				if (isIscsiStarted) {
					functionName = "iscsiStop";
					snapshotAction = "destroyIscsiTarget";
					buttonText = "iSCSI Stop";
				}

				return (
					'<a ' + disableIf((usedByAction && !isIscsiStarted) || isIncrementalRecoveryRunning) + ' class="btn btn-default snapshots-table-btn" ' + (!protectedSystem.uiVisibilityState.showISCSIStartButton ? 'style="display: none"' : '') + ' id="iscsiButton' + iDisplayIndex + '" onclick="' + functionName + '(\'' + snapshotName + '\',\'' + snapshotAction + '\',\'' + protectedSystem.uuid + '\',' + protectedSystem.encrypted + ',\'' + protectedSystem.machineId + '\')">' +
						buttonContent(buttonText) +
					'</a>'
				);
			}
	
			function buttonTemplateExport() {
				if (usedByAction === 'fuse_export') {
					return (
						'<button class="btn btn-default snapshots-table-btn js__stop-fuse-export" data-snapshot-name="' + snapshotName + '" type="button">' +
							buttonContent('Stop Export') +
						'</button>'
					);
				}
				return (
					'<a ' + disableIf(usedByAction || isIncrementalRecoveryRunning) + ' class="btn btn-default snapshots-table-btn" '+ (!protectedSystem.uiVisibilityState.showExportButton ? 'style="display: none"' : '') + ' data-toggle="modal" id="exportButton' + iDisplayIndex + '" onclick="configureExport(\'' + snapshotName + '\',\'convert\',\'' + protectedSystem.uuid + '\',' + protectedSystem.encrypted + ',\'' + protectedSystem.machineId + '\')">' +
						buttonContent('Export') +
					'</a>'
				);
			}
	
			function buttonTemplateNotes() {
				var iconClass = aData.notes.length ? 'icon-notepad' : 'icon-notepad-empty';
				return (
					'<a onclick="snpNote(\'' + aData._id + '\'); " data-toggle="modal" href="#snpNotes">' +
						'<input type="hidden" id="notes_' + aData._id + '" value="' + aData.notes + '">' +
						'<span class="' + iconClass + ' table-icon active"></span>' +
					'</a>'
				);
			}

			function buttonTemplateInfo() {
				if (!infoMessage || isIncrementalRecoveryRunning) {
					return '';
				}
				return (
					'<a onclick="showSnapInUseMsg(\'This snapshot is in use by ' + infoMessage + '\'); " data-toggle="modal">' +
						'<span class="icon-information table-icon active"></span>' +
					'</a>'
				);
			}

			function buttonTemplateDeleteSnapshot() {
				if (usedByAction || isIncrementalRecoveryRunning) {
					return (
						'<a class="imgdisabled ui-link">' +
							'<span class="icon-delete icon-color-inactive table-icon" title="Snapshot in use, Can not delete Snapshot"></span>' +
						'</a>'
					);
				}
				return (
					'<a onclick="delSnp(\'' + snapshotName + '\',\'' + protectedSystem.machineId + '\',\'' + protectedSystem.uuid + '\',' + protectedSystem.encrypted + '); " data-toggle="modal" href="#delSnpConfirm" class="ui-link">' +
						'<span class="icon-delete table-icon active" title="Delete"></span>' +
					'</a>'
				);
			}

			return (
				'<div class="dtSnapshotActions">' +
					'<div id="s' + iDisplayIndex + '" style="display: inline-block;">' +
						buttonTemplateVirtualization() +
						buttonTemplateTerminal() +
						buttonTemplateMount() +
						buttonTemplateExport() +
						buttonTemplateIscsi() +
					'</div>' +
					'<div style="display: inline-block; vertical-align: middle;">' +
            			buttonTemplateInfo() +
						buttonTemplateNotes() +
						buttonTemplateDeleteSnapshot() +
					'</div>' +
				'</div>'
			);
		}

		function disableIf(condition) {
			return condition ? 'disabled' : '';
		}

		function buttonContent(text) {
			return (
				'<span class="button-content">' +
					'<span class="button-text">' + text + '</span>' +
				'</span>'
			);
		}

		return {
			make: makeSnapshotActionsTemplate,
		}
	}).call(window);

	function fillSnapshotsTable(protectedSystem) {
		var hasClusterVolumes = Boolean(protectedSystem.cluster && protectedSystem.cluster['name']);
		var columns = [
			{ mDataProp: 'snapshotId', sWidth: 'auto' },
			{ mDataProp: 'written', sWidth: 'auto' },
			{ mDataProp: 'used', sWidth: 'auto' },
			{ mDataProp: 'clusterVolumes', sDefaultContent: [], sWidth: "auto", bVisible: hasClusterVolumes },
			{ mDataProp: 'notes', sWidth: isInfinityCloudVault() ? '440px' : '570px' },
		];
		var lastColumn = hasClusterVolumes ? 4 : 3;

		function rowCallback(nRow, aData, iDisplayIndex) {
			$('td:eq(0)', nRow).html(aData.snapshotTimeFormatted);
			
			if (hasClusterVolumes) {
				$('td:eq(' + (lastColumn - 1) + ')', nRow).html(aData.clusterVolumes.join(' '));
			}

			var actionsTemplate = SnapshotActionsTemplate.make(protectedSystem, aData, iDisplayIndex);
			$('td:eq(' + lastColumn + ')', nRow).html(actionsTemplate);

			return nRow;
		}

		var tableOptions = $.extend({}, defaultDataTablesOptions, {
			aaSorting: [[0, 'desc']],
			dom: '<"top"lpf>rt<"clear">rtip',
			bDestroy: true,
			bStateSave: false,
			bProcessing: true,
			bAutoWidth: false,
			bServerSide: true,
			sAjaxSource: 'api/snapshots',
			fnServerParams: function(aoData) {
        aoData.push({"name": "psId", "value": protectedSystem.uuid})
        appendLoginToDataArray(aoData)
			},
			aoColumns: columns,
			aoColumnDefs: [{
				sClass: 'dtNoWrap',
				bSortable: false,
				aTargets: [4]
			}],
			fnRowCallback: rowCallback,
		});
		$('#psdTable')
			.dataTable(tableOptions);
	}

	function initButtonClickEvents() {
		$('body').on('click', '.js__stop-fuse-export', function stopFuseExport(event) {
			event.preventDefault();

			var element = $(this);
			var snapshotName = element.data('snapshot-name');

			element.attr('disabled', 'disabled');

			VolumeExportApi.stopExport(snapshotName)
				.done(function onDoneHandler() {
					element.removeAttr('disabled');
					viewDetails($.jStorage.get('psystemid'));
				})
				.fail(function onFailHandler() {
					element.removeAttr('disabled');
					showModalAlertWithTimeout('Unable to stop volume export');
				});
		})
	}

	initButtonClickEvents()

	return {
		refresh: fillSnapshotsTable,
	}
}).call(window);

var tZones = "";
var repflag = "";
var diskname = "";
var defaultflag = "";
var smtpData = "";
var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var weekDaysShortNames = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
var MIGRATION_PWD_STRENGTH = 8;
var USER_PASSWORD_MIN_LENGTH = 8;
var USER_PASSWORD_MAX_LENGTH = 256;

var D2C_STATUS_PROP_NAME = "isD2CEnabled";

const IC_VAULT_MIN_MAX_RETENTION = "AXCIENT_HOSTED_RETENTION_LIMITS"
const RETENTION_LIMITS_ALL = "ALL";
const RETENTION_LIMITS_DAILY = "DAILY";
const RETENTION_LIMITS_WEEKLY = "WEEKLY";
const RETENTION_LIMITS_MONTHLY = "MONTHLY";
const RETENTION_LIMITS_YEARLY = "YEARLY";
const IS_RETENTION_LIMITED = "retention_limited"

const UNASSIGNED_RETENTION = "unassigned"

const OS_TYPE_WINDOWS = "WINDOWS";
const OS_TYPE_LINUX = "LINUX";
const OS_TYPE_MACOS = "MACOS";


var defaultDataTablesOptions = {
    "language": {
        "paginate": {
            "previous": "ᐸ",
            "next": "ᐳ",
        },
        "processing": "Loading...",
        "emptyTable": "&nbsp",
        "infoEmpty": "No Entries",
    },
    "infoCallback": function(settings, start, end, max, total, pre) {
        // Hide pagination if no entries or all of them can fit on first page
        $(this).parent()
               .find(".paging_simple_numbers")
               .css("visibility", (total === 0 || (start == 1 && end == max)) ? "hidden" : "visible");
        return pre;
    },
    "preDrawCallback": function( settings ) {
        var length = getDisplayLength();
        if (length) {
            this.api().page.len(length);
        }
    },
    "initComplete": function(settings, json) {
        $(this).DataTable().on( 'length', function ( e, settings, len ) {
            setDisplayLength(len);
        })
    },
    "fnServerParams": function(aoData) {
        appendLoginToDataArray(aoData)
    },
    "aLengthMenu": [[5, 10, 20, 50, 100],[5, 10, 20, 50, 100]],
};

const volumeExclusionReasons = {
    0: 'Volume is the same as another volume',
    1: 'Volume isRemovable Media: Excluded by default',
    2: 'Volumes contains a Local Cache repository: Excluded by default',
    3: 'Volume is Protected System Recovery mount point: Excluded by default',
    4: 'Volume was explicitly excluded from backup',
    5: 'Volume is selected for backup but in Failed state',
    6: 'Volume has an incompatible filesystem',
    7: 'Volume is missing (not found)',
    8: 'Volume was not selected for backup',
    9: 'Volume was excluded for an unknown reason',
    10: 'Volume is part of another volume: Excluded by default'
};

// dictionary used for calling getFeatureFlag function
const FEATURE_FLAG = {
  INCREMENTAL_RECOVERY: 'manual_inc_vault_recovery',
};

function inIFrame() {
    return window.location != window.parent.location;
}

function IsNumeric(input) {
    return (input - 0) == input && input.length > 0;
}

function isPositiveInteger(str) {
    var n = Math.floor(Number(str));
    return n !== Infinity && String(n) === str && n >= 0;
}

function isPositiveFloat(str, numbersAfterComma) {
    var reg = new RegExp("^\\s*(?=.*[0-9])\\d*(?:\\.\\d{" + numbersAfterComma + "})?\\s*$");
    if (str.match(reg)) {
        return true;
    }
    return false;
}

function isHostName(hostname) {
    return /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$/.test(hostname);
}

function isIpAddress(ipAddress) {
    return /^(?!0)(?!.*\.$)((1?\d?\d|25[0-5]|2[0-4]\d)(\.|$)){4}$/.test(ipAddress);
}

function insert(str, index, value) {
    return str.substr(0, index) + value + str.substr(index);
}

function testPassword(password, minLength, maxLength, digit, mixedCase, specialChar){
    if (password.length < minLength) {
        return false;
    }

    if (maxLength !== undefined) {
        if (password.length > maxLength) {
            return false;
        }
    }

    var hasDigit = digit ? /\d/.test(password) : true;
    var hasLowerCase = mixedCase ? /[a-z]/.test(password) : true;
    var hasUpperCase = mixedCase ? /[A-Z]/.test(password) : true;
    var hasSpecialChar = specialChar ? /\W/.test(password) : true;

    return hasDigit && hasLowerCase && hasUpperCase && hasSpecialChar;
}

function hasQuotationMarks(text) {
    return /('|")/.test(text)
}

function encodeHtmlEntities(str) {
    return $('<div>').text(str).html()
}

/**
* Checks against empty strings.
*/
function isEmpty(str) {
    return (!str || 0 === str.length);
}

function schedulerTime(h, m) {
    var stime = h + ":" + m;
    if (h > 11) {
        if (h == 12) {
            stime = h + ":" + m + " PM";
        } else {
            stime = (h - 12) + ":" + m + " PM";
        }
    } else {
        if (h == 0) {
            h = 12;
        }
        stime = h + ":" + m + " AM";
    }
    var hrfix = stime.split(":");
    var minfix = hrfix[1].split(" ");
    var ap = minfix[1];
    hrfix = (parseInt(hrfix[0]) < 10) ? "0" + hrfix[0] : hrfix[0];
    minfix = (parseInt(minfix[0]) < 10) ? "0" + minfix[0] : minfix[0];
    stime = hrfix + ":" + minfix + " " + ap;
    return stime;
}

function formatTime(h, m, s) {
    var stime = h + ":" + m + " ";
    if (h > 11) {
        if (h == 12) {
            stime = h + ":" + m + " " + "PM";
        } else {
            stime = (h - 12) + ":" + m + " " + "PM";
        }
    } else {
        if (h == 0) {
            h = 12;
        }
        stime = h + ":" + m + " " + "AM";
    }
    var hrfix = stime.split(":");
    var minfix = hrfix[1].split(" ");
    var ap = minfix[1];
    if (hrfix[0].length == 1) {
        hrfix = (parseInt(hrfix[0]) < 10) ? "0" + hrfix[0] : hrfix[0];
    } else if (hrfix[0].length > 1) {
        hrfix = hrfix[0];
    }
    if (minfix[0].length == 1) {
        minfix = (parseInt(minfix[0]) < 10) ? "0" + minfix[0] : minfix[0];
    } else if (minfix[0].length > 1) {
        minfix = minfix[0];
    }
    stime = hrfix + ":" + minfix + " " + ap;
    return stime;
}

// This decision was taken from
// https://stackoverflow.com/questions/563406/add-days-to-javascript-date?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
Date.prototype.plusDays = function(days) {
  var dat = new Date(this.valueOf());
  dat.setDate(dat.getDate() + days);
  return dat;
};

function daysFromNowDate(days) {
  var today = new Date();
  return today.plusDays(days);
}

function formatDate(d) {
    if (d == 'Invalid Date') return ' ';
    d = new Date(d * 1000);
    var dd = d.getDate()
    dd = (dd < 10) ? '0' + dd : dd;
    var mm = d.getMonth() + 1;
    mm = (mm < 10) ? '0' + mm : mm;
    var yy = d.getFullYear() % 100
    yy = (yy < 10) ? '0' + yy : yy;
    return days[d.getDay()] + ' ' + mm + '-' + dd + '-' + yy + ' ' + formatTime(d.getHours(), d.getMinutes(), 0);
}

$('.userid').on("click", function () {
    usertable();
});

function getD2CAgent(id, cn, un) {
    if (isVault()) {
      var d2cAgentDownloadUrl = "api/getD2CAgent";
      var a = document.createElement("a");
      a.href = d2cAgentDownloadUrl.concat('/', id);
      document.body.appendChild(a);
      a.click();
      a.remove();
    }
}

function getDisplayLength(){
  return $.jStorage.get("iDisplayLength");
}

function setDisplayLength(iDisplayLength) {
  $.jStorage.set("iDisplayLength", iDisplayLength);
}

function getLogin(){
  return $.jStorage.get("uiUsername") || $.jStorage.get("username")
}

function appendLoginToDataArray(data) {
  data.push({ "name": "login", "value": getLogin()});
}

function getUsers() {
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#usserverid").val();
    var select = $('#usserverid');
    select.empty();
    $.each(nodes, function (key, val) {
        var name = val.split('#');
        var urlip = "";
        if (name[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = name[0];
        }
        var id = (mid != "" || mid == $.jStorage.get("machineId")) ? mid : $.jStorage.get("machineId");
        var sel = (key == id) ? " selected " : "";
        $("#usserverid").append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
    });
    mid = $("#usserverid").val();
    var oTable;
    var quotaG = "";
    quotaG = $.ajax({
        url: "api/storage/abc/zfsGetQuota",
        type: 'POST',
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        async: false
    }).responseText;
    quotaG = (quotaG == undefined) ? "" : quotaG;
    if (showSessionTimedOutIfUnauthorized(quotaG)) {
        return false;
    }
    var quotesNotSupported = (quotaG.indexOf("not_supported") !== -1);
    var showColumns = [0, 1, 3];
    var exportOptions = {};
    if (!quotesNotSupported) {
        quotaG = eval('[' + quotaG + ']');
        showColumns = [0, 1, 2, 3];
        exportOptions.format = {
            body: function (data, row, column, node) {
                if (column === 2) {
                    return $('#vquota_' + $('#userdetail tr:nth-child(' + (row + 1) + ') td:first-child').html()).val() + ' GB';
                }
                return data;
            }
        }
    }

    var isD2CEnabled = $.jStorage.get(D2C_STATUS_PROP_NAME);
    var isLinuxAgentEnabledFlag = isLinuxAgentEnabled();
    var isMacOSAgentEnabledFlag = isMacOSAgentEnabled();

    var oTable = $('#userTable').dataTable($.extend({}, defaultDataTablesOptions, {
        dom: 'B<"clear"><"top"lpf>rt<"clear">rtip',
        buttons: addButtons('Users', false, showColumns, exportOptions),
        "bDestroy": true,
        "bStateSave": false,
        "bProcessing": true,
        "bServerSide": true,
        "bAutoWidth": false,
        "aaSorting": [],
        "sAjaxSource": "api/users",
        "fnServerParams": function (aoData) {
            aoData.push({
               "name": "without_admin",
               "value": true
            })
            appendLoginToDataArray(aoData)
        },
        "aoColumns": [
            {
                "mDataProp": "userName"
            },
            {
                "mDataProp": "role"
            },
            {
                "mDataProp": "role"
            },
            {
                "mDataProp": "diskUsage"
            },
            {
                "mDataProp": "download",
                "sDefaultContent": "",
                visible: isD2CEnabled
            }
        ],
        "aoColumnDefs": [
            {
                "bSortable": false,
                "aTargets": [2,4]
            },
        ],
        "fnRowCallback": function (nRow, aData, iDisplayIndex) {
            if (aData.role != "admin") {
                if (isD2CEnabled) {
                    document.getElementById("userTable").getElementsByTagName('th')[4].innerText = "Direct to Cloud Agent";
                    var cloudAgentUrlWindows = '<div style="text-align: center; display: inline-block;"><div style="padding: 0px 8px 0px 0px; float: none;"><button onclick="chooseBackupAgentForD2C(\'' + aData._id + '\')" style="border: none; background: none;"><class class="icon-windows button-icon" title="Windows agent"></class></button></div></div>';
                    $('td:eq(4)', nRow).html(cloudAgentUrlWindows);
                    if (isLinuxAgentEnabledFlag) {
                      var cloudAgentLinuxUrl = '<div style="text-align: center; display: inline-block;"><div style="padding: 0px 8px 0px 0px; float: none;"><button onclick="showLinuxAgentDownloadInfo(\'' + aData._id + '\')" style="border: none; background: none;"><class class="icon-linux button-icon" title="Linux agent"></class></button></div></div>';
                      $('td:eq(4)', nRow).append(cloudAgentLinuxUrl);
                    }
                    if(isLinuxAgentEnabledFlag && isMacOSAgentEnabledFlag) {
                      var cloudAgentMacOSUrl = '<div style="text-align: center; display: inline-block;"><div style="padding: 0px 8px 0px 0px; float: none;"><button onclick="showMacOSAgentDownloadInfo(\'' + aData._id + '\')" style="border: none; background: none;"><class class="icon-macos button-icon" title="macOS agent"></class></button></div></div>';
                      $('td:eq(4)', nRow).append(cloudAgentMacOSUrl);
                    }
                    var d2cToken = '<div style="text-align: center; display: inline-block;"><div style="padding-left: 12px; float: none; border-left: 2px groove"><button onclick="showD2CTokenInfo(\'' + aData._id + '\', \'' + aData.userName + '\')" style="border: none; background: none;"><class class="icon-key button-icon" title="D2C Token"></class></button></div></div>';
                    $('td:eq(4)', nRow).append(d2cToken);
                }
                if (quotesNotSupported) {
                  $('td:eq(2)', nRow).html('<div style="text-align: center; display: inline-block;"></div>');
                } else {
                  $.each(quotaG, function (j, val) {
                    $.each(val, function (k, v) {
                      if (k == aData.userName) {
                        var quota = '<div style="display: flex;align-items: center;"><input class="input-min" type="number" id="vquota_' + aData.userName + '" value="' + v + '" data-quota="' + v + '" min="1" /><div style="margin: 0 10px 0 5px;">GB</div><a class="btn btn-default" id="setVQ" onclick="setVQuota(\'' + aData.userName + '\')" data-mini="true" data-inline="true" data-theme="b" data-icon="check"><div class="button-content"><span class="button-text">Set</span></div></a></div>';
                        $('td:eq(2)', nRow).html(quota);
                        return nRow;
                      }
                    });
                  });
                }
            } else {
                if (quotesNotSupported) {
                  $('td:eq(2)', nRow).html('<div style="text-align: center; display: inline-block;"></div>');
                } else {
                  $('td:eq(2)', nRow).html("None");
                }
                $('td:eq(3)', nRow).html("None");
                return nRow;
            }
        }
    }));
}

function initCreateClientModal() {
    $("#clientCreationButton").attr("disabled", "");
    $("#newClientUserName").val("");
    $("#newClientCompanyName").val("");
}

function checkNewClientDetails() {
    var userNameElem = $("#newClientUserName");
    var companyNameElem = $("#newClientCompanyName");
    var creationButtonElem = $("#clientCreationButton");

    userNameElem.val(userNameElem.val().replace(/\s/g, ''));

    userNameElem.val() && companyNameElem.val() ?
        creationButtonElem.removeAttr("disabled") :
        creationButtonElem.attr("disabled", "");
}

function validateNewClientDetails() {
    var userNameElem = $("#newClientUserName");
    var companyNameElem = $("#newClientCompanyName");

    companyNameElem.val($.trim(companyNameElem.val()))

    var userName = userNameElem.val();
    var companyName = companyNameElem.val();

    if (userName.match(/^(aristos|replibit)/i)) {
        showModalAlertWithTimeout("The requested Client Username is not allowed");
        return false;
    }

    if(!userName.match(/^[a-zA-Z0-9\_.]+$/)) {
        showModalAlertWithTimeout('Client Username should contain only letters, numbers and the following characters: "_" and "."');
        return false;
    }

    if(!companyName.match(/^[a-zA-Z0-9\_&/ ]+$/)) {
        showModalAlertWithTimeout('Company should contain only letters, numbers and the following characters: " ", "_", "&" and "/"');
        return false;
    }

    return true;
}

function createClient() {
    if (!validateNewClientDetails()){
        return;
    }

    modalalert('showalerts', "Creating new client...");

    var clientDetails = {
        "userName": $("#newClientUserName").val(),
        "companyName": $("#newClientCompanyName").val()
    }

    $.ajax({
        type: "POST",
        url: "/api/utilities/abc/createD2CClient",
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify(clientDetails),
        success: function (data) {
            if (data.status == "ok") {
                $('#create-client-modal').modal('hide');
                modalalert("showalerts", "Client created");
                setTimeout("syncLicense(getUsers);", 3000);
            } else {
                showModalAlertWithTimeout(data.msg);
            }
        },
        error: function (result) {
            showModalAlertWithTimeout("Failed to create client")
            sessionTimeout(result);
        }
    });
}

function addUser() {
    if ($.trim($('#usrUserName').val()) === "") {
        modalalert('showalerts', "Username cannot be blank");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    if ($.trim($('#usrPassword').val()) === "") {
        modalalert('showalerts', "Password cannot be blank");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    if ($.trim($('#usrPassword').val()) != $.trim($('#usrPasswordConfirmation').val())) {
        modalalert('showalerts', "Passwords don't match");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    var data = {};
    data.userName = $.trim($('#usrUserName').val());
    data.password = $.trim($('#usrPassword').val());
    data.role = $.trim($('#usrRole').val());
    $.ajax({
        type: "POST",
        url: "/api/users",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', "User created successfully");
            $('#addUserModal').modal('hide');
            $('#usrUserName').val("");
            $('#usrPassword').val("");
            $('#usrPasswordConfirmation').val("");
            $('#usersTable').dataTable().fnReloadAjax();
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (errMsg) {
            if (errMsg.status == 409) {
                modalalert('showalerts', "User already exists");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        }
    });
}

function showModalAlertWithTimeout(text, timeout) {
    modalalert('showalerts', text);
    setTimeout(function () {
        $('#showalerts').modal('hide');
    }, timeout || 3000);
}

function setQuota(quotaElement, mid, customerName) {
    modalalert('showalerts', "Quota is updating please wait");

    var quota = quotaElement.val();
    var quotaOrigin = quotaElement.data('quota');
    var quotaChanged = false;

    if (quota == "") {
        quotaElement.val(quotaOrigin)
        showModalAlertWithTimeout("Quota value required or enter 0 for no limit");
        return false;
    } else if (!IsNumeric(quota)) {
        quotaElement.val(quotaOrigin)
        showModalAlertWithTimeout("Please enter valid quota");
        return false;
    }

    var data = {
        customerName : customerName || "aristosimgexports",
        quota : quota + "G"
    };

    $.ajax({
        type: "POST",
        url: "/api/storage/abc/setQuota",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            if (data.status == "ok") {
                quotaChanged = true;
                showModalAlertWithTimeout("Quota updated");
            } else {
                showModalAlertWithTimeout(data.msg);
            }
        },
        error: function (errMsg) {
            showModalAlertWithTimeout("Error updating Quota");
        }
    }).always( function () {
        if (quotaChanged) {
            quotaElement.val(quota)
            quotaElement.data('quota', quota)
        } else {
            quotaElement.val(quotaOrigin)
        }
    });
}

function setImgQuota() {
    setQuota($('#img'), $("#exserverid").val())
}

function getImgQuota() {
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#exserverid").val();
    var select = $('#exserverid');
    select.empty();
    $.each(nodes, function (key, val) {
        var name = val.split('#');
        var urlip = "";
        if (name[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = name[0];
        }
        var id = (mid != "" || mid == $.jStorage.get("machineId")) ? mid : $.jStorage.get("machineId");
        var sel = (key == id) ? " selected " : "";
        $("#exserverid").append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
    });
    mid = $("#exserverid").val();
    var urllink = 'api/storage/abc/zfsGetQuota';
    $.ajax({
        url: urllink,
        type: "POST",
        headers: {
            "Replibit-Server": mid
        },
        success: function (data) {
            var imgval = data.aristosimgexports;
            if (imgval == undefined) {
                return;
            }
            var quotaElement = $('#img');
            quotaElement.val(imgval);
            quotaElement.data('quota', imgval);
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function setVQuota(uname) {
    setQuota($('#vquota_' + uname), $("#usserverid").val(), uname)
}

function editUser(uid) {
    var location = "";
    var editUserDetails = eval('[' + $('#' + uid + '').val() + ']');
    $.each(editUserDetails, function (index, value) {
        location = value.locations;
    });
    $("#userEdit").popup("open");
    $("#editUserId").val(uid);
    $("#editlocation").val("abc");
}

function saveUser() {
    if ($('#npassword').val() == $('#cpassword').val() && $('#npassword').val() != "" && $('#cpassword').val() != "") {
        data = '{"password":"' + $('#npassword').val() + '","role":"customer","locations":["' + $('#editlocation').val() + '"]}';
        $.ajax({
            type: "PUT",
            url: "/api/users/" + $('#editUserId').val(),
            data: data,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                modalalert('showalerts', "User modified successfully");
                setTimeout("$('#showalerts').modal('hide');", 3000);

                $("#usLink").click();
            },
            error: function (errMsg) {
                $('#loginstatus').html('Unauthorised username/password');
            }
        });
    } else {
        modalalert('showalerts', "Password not matching or not empty");
        setTimeout("$('#showalerts').modal('hide');", 3000);

    }
    $('#npassword').val("");
    $('#cpassword').val("");
    $('#editlocation').val("");
    $("#userEdit").popup("close");
}

function deleteUser(uid) {
    $('#deluserlink').attr("onclick", "delCustomer('/api/users/" + uid + "')");
}

function deleteUserAppliance(uid) {
    $('#deluserapplink').attr("onclick", "delUser('" + uid + "');");
}

function delCustomer(uri) {
    $.ajax({
        url: uri,
        type: 'DELETE',
        success: function (data) {
            modalalert('showalerts', "User deleted successfully.");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            getUsers();
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    getUsers();
    $('#usLink').click();
}

function delUser(uid) {
    $.ajax({
        url: 'api/users/' + uid,
        type: 'DELETE',
        success: function (data) {
            modalalert('showalerts', "User deleted successfully.");
            $("#delUser").modal("hide");
            $('#usersTable').dataTable().fnReloadAjax();
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function resetPasswordAppliance(uid) {
    $('#resetPasswordLink').attr("onclick", "resetPassword('" + uid + "');");
}

function resetPassword(uid) {
    var newPassword = $('#newUsrPassword').val(),
      newPasswordConfirmation = $('#newUsrPasswordConfirmation').val();

    if ($.trim(newPassword) === '') {
        modalalert('showalerts', "Password cannot be blank");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    if (newPassword !== newPasswordConfirmation) {
        modalalert('showalerts', "Passwords don't match");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }

    var data = {'newPassword': newPassword};
    $.ajax({
        type: "POST",
        url: "/api/users/" + uid + "/reset_password",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', "Password reset successfully");
            $('#resetPasswordModal').modal('hide');
            $('#newUsrPassword').val("");
            $('#newUsrPasswordConfirmation').val("");
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            $("#altMsg").html("<h3>Password not updated</h3>");
            $("#altMsgPopup").modal("show");
            sessionTimeout(result);
        }
    });
}

/***********Protected system**************/
function checkVritSShot(snpData) {
    var ret = false;
    $.each(snpData, function (k, v) {
        if (v == "testkvm" || v == "livekvm") {
            ret = true;
            return;
        } else {
            if (ret) {
                ret = true;
            } else {
                ret = false;
            }
        }
    });
    return ret;
}

function getUsedByActionInfo(usedByAction) {
    switch (usedByAction) {
        case 'test_vm_recovery':
        case 'live_vm_recovery':
            return 'Virtual Office';
            break;
        case 'test_dral_recovery':
        case 'live_dral_recovery':
            return 'Recovery Center';
            break;
        case 'light_vm_recovery':
            return 'Cloud Autoverify';
            break;
        case 'ftps_recovery_export':
            return 'Virtual Disk Export in Recover Manager';
            break;
        case 'ftps_recovery_mount':
            return 'File & Folder recovery in Recover Manager';
            break;
        default:
            return '';
    }
}

function checkUsedInAxCloud(snpData) {
    var infoMessage = '';
    $.each(snpData, function (k, usedByAction) {
        infoMessage = getUsedByActionInfo(usedByAction);
        if (infoMessage) {
            return false;
        }
    });
    return infoMessage;
}

function arrayHasCSVbyID(csvs, csvId) {
    for(var i = 0; i < csvs.length; ++i) {
        if(csvs[i].id === csvId) {
            return true;
        }
    }
    return false;
}

function shouldShowVolume(cluster, volume) {
    if(cluster && 'csvId' in volume && volume.csvId) {  // if has cluster information
        var disks = cluster.disks;
        for(var i = 0; i < disks.length; ++i) {
            if(disks[i].status >= 3 && arrayHasCSVbyID(disks[i].volumes, volume.csvId)) {
                return true;  // show attached volumes
            }
        }
        return false;  // was not found in cluster
    }
    return true;  // does not have cluster information
}

function filterOSName(osName) {
    return osName.replace(/Microsoft /gi, "")  // remove "Microsoft " from name
                 .replace(/\(TM\)/gi, "")      // Trademark
                 .replace(/\(R\)/gi, "")       // Registered
                 .replace(/Edition/gi, "")     // Edition
                 .replace(/x64/gi, "")         // x64 bit indication
                 .replace("  ", " ")           // remove duplicate spaces
                 .replace(/,/g, "-");          // former/old filter
}

function getLogoProperties(osName) {
    osName = osName.replace(/ Small Business/gi, "")
    var supported  = [
        { caption: "Windows 2000", file: 'w2000_s2000.png', alt: 'w2000'},
        { caption: "Windows Server 2000", file: 'w2000_s2000.png', alt: 's2000'},
        { caption: "Windows XP", file: 'wxp_s2003.png', alt: 'wxp'},
        { caption: "Windows Server 2003", file: 'wxp_s2003.png', alt: 's2003'},
        { caption: "Windows 7", file: 'w7_w2008r2.png', alt: 'w7'},
        { caption: "Windows Server 2008 R2", file: 'w7_w2008r2.png', alt: 's2008r2'},
        { caption: "Windows Server 2011", file: 'w7_w2008r2.png', alt: 'sbs2011'},
        { caption: "Windows Vista", file: 'wvista_s2008.png', alt: 'wvista'},
        { caption: "Windows Server 2008", file: 'wvista_s2008.png', alt: 's2008'},
        { caption: "Windows 8", file: 'w8_s2012.png', alt: 'w8'},
        { caption: "Windows Server 2012", file: 'w8_s2012.png', alt: 's2012'},
        { caption: "Windows 10", file: 'w10_s2016.png', alt: 'w10'},
        { caption: "Windows Server 2016", file: 'w10_s2016.png', alt: 's2016'},
        { caption: "Windows Server 2019", file: 'w10_s2016.png', alt: 's2019'},
        { caption: "Windows Server 202", file: 'w10_s2016.png', alt: 's202X'},
        { caption: "Hyper-V Server 2012", file: 'hyperv-s2012.png', alt: 'hyperv2012'},
        { caption: "Hyper-V Server 2016", file: 'hyperv-s2016.png', alt: 'hyperv2016'},
        { caption: "Hyper-V Server 2019", file: 'hyperv-s2016.png', alt: 'hyperv2019'},
        { caption: "Hyper-V Server 202", file: 'hyperv-s2016.png', alt: 'hyperv202X'},
    ];
    for(var i = 0; i < supported.length; ++i) {
        if(osName.indexOf(supported[i].caption) !== -1) {
            return supported[i];
        }
    }
    return {caption: "", file: '', alt: ''};
}

function appendUserIdFromClientFilterToDataArray(userFilterSelector, aoData) {
  let containerName = userFilterSelector + "_container";
  if ($(containerName).is(":visible")) {
    var userId = $(userFilterSelector).val();
    if (userId !== "0") {
      aoData.push({"name": "userId", "value": userId})
    }
  }
}

function showTLSSessionExpiredMsgIfError(data, status) {
  if (data && data.indexOf("502 Bad Gateway") !== -1 || status === 502) {
    modalalert('showalerts', "Your TLS session has expired (try refreshing the page immediately) or the system is off or still booting up (can take up to 3 minutes). Please wait and refresh the page to try again.");
    setTimeout(() => window.location.replace('index.html'), 3 * 60 * 1000);
    return true;
  }
}

function showSessionTimedOutIfUnauthorized(data, status) {
  if (data && data.indexOf("401 Unauthorized") !== -1 || status === 401) {
    modalalert('showalerts', "Session timed out.");
    setTimeout(() => $('#showalerts').modal('hide'), 3000);
    $.jStorage.flush();
    $(location).attr('href', 'login.html');
    return true;
  }
}

function fetchDataForPSTableFrom(endpoint) {
    const data = $.ajax({
        url: `api/${endpoint}`,
        async: false,
        error: function (result) {
            sessionTimeout(result);
        }
    }).responseText;

    return eval(data);
}

function getRetentionSettingKey(id) {
  return 'retention-setting-' + id;
}

function getProtectedSystems() {
    $(".mainView").removeClass('mainView');
    $.ajax({
        url: "/api",
        async: false,
        success: function (data) {
            if (data.machineId != $.jStorage.get("machineId")) {
                $.jStorage.flush();
                window.location.replace("login.html");
                return false;
            }
        },
        error: function (errMsg) {
            sessionTimeout(errMsg);
        }
    });
    var admin_logged = $.jStorage.get("user") == "admin";
    var showSchedules = admin_logged;
    var scData = fetchDataForPSTableFrom("schedules");
    var retData = fetchDataForPSTableFrom("retentions/abc/show");
    if (scData === false || retData === false) return;
    $.each(retData, function (j, value) {
      $.jStorage.set(getRetentionSettingKey(value._id), value);
    });
    var unameTh = "";
    var unameTd = "";
    var location = "";
    var schedulerListTh = "Backup";
    var retentionListTh = "Retention";
    var schedulerListTd = "";
    var snapInUseInfo = "";
    var delImgLink = "";
    var seedPS = "";
    var locationTd = "osName";
    const isIncRecoveryEnabled = isIncrementalRecoveryEnabled();
    var columns;
    if (window.glob == "appliance") {
      columns = [
        { mDataProp: "systemName", defaultContent: "", width: "18%", className: "dtWrapTd", title: "System Name" },
        { mDataProp: "alias", defaultContent: "", width: "18%", className: "dtWrapTd", title: "Alias" },
        { defaultContent: "", orderable: false, className: "dtNoWrap", title: "Status" },
        { mDataProp: "osName", defaultContent: "", width: "18%", className: "dtWrapTd", title: "Operating System" },
        { defaultContent: "", width: "18%", orderable: false, title: "Folders / Volumes [Excluded]" },
        { defaultContent: "", width: "10%", orderable: false, title: unameTh + schedulerListTh },
        { defaultContent: "", width: "10%", orderable: false, title: unameTh + retentionListTh },
        { defaultContent: "", width: "5%", orderable: false, title: "Actions" },
      ]
    } else if (window.glob == "vault") {
        showSchedules = admin_logged && $.jStorage.get(D2C_STATUS_PROP_NAME);
        locationTd = "customerLocation";
        columns = [
            { mDataProp: "systemName", defaultContent: "", width: "15%", className: "dtWrapTd", title: "System Name" },
            { mDataProp: "alias", defaultContent: "", width: "15%", className: "dtWrapTd", title: "Alias" },
            { defaultContent: "", className: "dtNoWrap", orderable: false, title: "Status" },
            { mDataProp: "osName", defaultContent: "", width: "12%", className: "dtWrapTd", title: "Operating System" },
            { defaultContent: "", width: "10%", orderable: false, title: "Folders / Volumes [Excluded]" },
            { mDataProp: "userName", defaultContent: "", width: showSchedules ? "10%" : "12%", title: "Client" },
            { mDataProp: "customerLocation", defaultContent: "", width: showSchedules ? "10%" : "12%", orderable: false, title: "Location" },
        ];
        if (showSchedules) {
            columns.push({ defaultContent: "", orderable: false, title: schedulerListTh });
        }
        columns.push(
            { defaultContent: "", orderable: false, title: retentionListTh },
            { defaultContent: "", width: "5%", orderable: false, title: "Actions" },
        );
    }
    var exportOptions = {};
    exportOptions.format = {
        body: function (data, row, column, node) {
            // Here we explicitly get the data for Volumes column, or the value of the dropdown if the column has it, or in other cases if data variable is empty
            return (column === 3 || !data) ? $(node).find('select').length ? $(node).find('select > option:selected').text() : $(node).text() : data;
        }
    }
    var ptsdTable = $('.psTable').dataTable($.extend({}, defaultDataTablesOptions, {
        dom: 'B<"clear"><"top"lpf>rt<"clear">rtip',
        buttons: addButtons('Protected Systems', true, ':not(:nth-child(3))', exportOptions),
        "bDestroy": true,
        "bStateSave": true,
        "bProcessing": true,
        "bServerSide": true,
        "sAjaxSource": "api/protected_systems",
        fnServerParams: function(aoData) {
            appendUserIdFromClientFilterToDataArray("#protectedSystem_user_select", aoData)
            appendLoginToDataArray(aoData)
        },
        columns: columns,
        "fnRowCallback": function (nRow, aData, iDisplayIndex) {
            var scListData = "";
            var selectedsch = "";
            if (window.glob == "appliance" || (aData.d2c == true && showSchedules)) {
                scListData = '<div class="select-container"><select style="padding-right:20px;"id="' + aData._id + '_sclist" onchange="savePsScheduler(\'' + aData._id + '\', \'' + aData.machineId + '\')">';
                $.each(scData, function (j, value) {
                    var choose = (aData.cronid == value._id) ? "selected" : "";
                    if (choose == "selected") {
                        selectedsch = value.name;
                    }
                    scListData = scListData + '<option value="' + value._id + '" ' + choose + '>' + value.name + '</option>';

                });
                scListData = scListData + '</select></div>';
            }

            var retentionListTd;
            if (aData.fixedRetention == true){
              retentionListTd = '<div>Storage License</div>';
            }else{
              retentionListTd = '<div class="select-container"><select style="padding-right:20px;" id="' + aData._id + '_retlist" onchange="savePsRetentionAction(\'' + aData._id + '\', \'' + aData.machineId + '\')">';
              if (aData.retentionId === undefined) {
                retentionListTd += '<option style="font-style: italic;">Unassigned</option>';
              }
              let choose;
              $.each(retData, function (j, value) {
                if (aData.retentionId == value._id) {
                  choose = "selected";
                  $.jStorage.set(getRetentionPSSettingKey(aData._id), {systemType: aData.systemType, _id: value._id, name: value.name, ...getRetentionSettingBySystemType(aData.systemType, value)});
                } else {
                  choose = "";
                }
                retentionListTd = retentionListTd + '<option value="' + value._id + '" ' + choose + '>' + value.name + '</option>';
              });
              retentionListTd = retentionListTd + '</select></div>';
            }

            if (!aData.retentionId) {
              $.jStorage.set(getRetentionPSSettingKey(aData._id), {systemType: aData.systemType, ...aData.retentionMethod});
            }
            var isVrit = checkVritSShot(aData.snapshotUsage);
            var vRepli = Object.keys(aData.replication).some(function (vaultSettingId) {
              return aData.replication[vaultSettingId].enabled;
            });

            // Replication icon
            var online = "";
            if (vRepli && window.glob == "appliance") {
                online = online + "<a><span class='icon-cloud-success table-icon table-icon-success' title='Replication Enabled'></span></a>";
            } else if (window.glob == "appliance") {
                online = online + "<a><span class='icon-cloud-failure table-icon table-icon-failure' title='Replication Not Enabled'></span></a>";
            }

            // Virtualisation icon
            if(aData.uiVisibilityState.virtualization) {
              if (isVrit) {
                online = online + "<a><span class='icon-devices table-icon table-icon-success' title='Virtualized'</span></a>";
              } else {
                online = online + "<a><span class='icon-devices table-icon' title='VM Offline'</span></a>";
              }
            }

            // DeepCheck Icon
            var autoverifyIcon = getAutoverifyIcon(aData);
            if (autoverifyIcon) {
              online += autoverifyIcon;
            }

            // Local Cache Icon
            if (aData.localCacheState.visible){
                online += getLocalCacheIcon(aData.localCacheState.icon_type, aData.localCacheState.icon_hint);
            }

            // Blocked status icon
            if (!aData.isEnabled) {
                online += "<a><span class='icon-restricted table-icon table-icon-failure' title='Client Disabled or Deleted'></span></a>";
            }

            // Incremental Recovery icon only for appliance
            if (isAppliance() && isIncRecoveryEnabled && aData.incrementalRecovery) {
                online += "<a><span class='icon-onboarding-backups table-icon table-icon-cloud' title='Incremental Recovery in progress'></span></a>";
            }

            var osName = filterOSName(aData.osName);
            edata = JSON.stringify(aData);

            // Sort unit labels
            aData.volumes.sort(function (mounta, mountb){
              if(mounta.mountPointNames[0] > mountb.mountPointNames[0]){
                return 1;
              }else if(mounta.mountPointNames[0] < mountb.mountPointNames[0]){
                return -1;
              }
              return 0;
            });


            var volumes = "";
            if (aData.syncedFolders && aData.syncedFolders.length > 0) {
                // we don't have excluded volumes for synced folders
                volumes = aData.syncedFolders.map(function (folder) {
                    return folder.path;
                }).join(' ');
            }
            else {
                // currently protected volumes and protected CSVs that are attached
                var cluster = aData.cluster;
                volumes = aData.volumes.map(function (volume) {
                    if(shouldShowVolume(cluster, volume)) {
                        return volume.mountPointNames.join(' ');
                    }
                }).join(' ');

                // also append protected CSVs that are not attached
                if(cluster){
                    var csv_volumes = cluster.disks.map(function (disk) {
                        if(disk.status < 3) {
                            return disk.volumes.map(function (csv) {
                                if(csv.enabled) { return csv.volumeFriendlyName; }
                                else { return ''; }
                            }).join(' ');
                        } else { return ''; }
                    }).join(' ');
                    volumes = volumes + ' ' + csv_volumes;
                }
                if (aData.excludedVolumes && aData.excludedVolumes.length > 0) {
                    let excludedVolumes = aData.excludedVolumes.map(function (volume) {
                        return volume.mountPointNames.join(' ');
                    }).join(' ');
                    volumes = volumes + '   [ ' + excludedVolumes + ' ]';
                }
            }

            var infoMessage = checkUsedInAxCloud(aData.snapshotUsage)
            var details = '<a class="link-button"' + (aData.markedForDelete ? " disabled='disabled'":"") + ' href="#protectedSystemDetails" id="protectdetails" data-toggle="tab"  onclick="' + (aData.markedForDelete ? "" : 'viewD(\'' + aData._id + '\');') + '">' + aData.systemName + '</a>';

            if (infoMessage) {
                snapInUseInfo = '<a onclick="showSnapInUseMsg(\'Snapshot of this PS is in use by ' + infoMessage + '\');" data-toggle="modal" href="#showSnapInUse"><span class="icon-information table-icon active"></span></a>';
                delImgLink = '<a class="imgdisabled ui-link"><span class="icon-delete table-icon icon-color-inactive"></span></a>';
            } else {
                snapInUseInfo = '';
                delImgLink = '<a onclick="deletePS(\'' + aData._id + '\', \'' + aData.machineId + '\', ' + aData.encrypted + ');" data-toggle="modal" href="#delProtectedSys"><span class="icon-delete table-icon active"></span></a>';
            }

            seedPS = ''

            if (window.glob === "vault") {
                unameTd = aData.userName;
                if (aData.customerLocation) {
                  unameTd += ' - ' + aData.customerLocation;
                }
                schedulerListTd = scListData;
                location = aData.customerLocation;
                if (aData.replication.seedingEnabled) {
                    if (aData.replication.vaultLastSnapshot) {
                        seedPS = '<a onclick="seedVaultEnable(\'' + aData._id + '\',\'' + aData.machineId + '\');" data-toggle="modal" href="#seedProtectedSystem"><span class="icon-seed-complete table-icon table-icon-success active" title="Seeding Complete"></span></a>';
                    } else if (aData.seeded) {
                        seedPS = '<a onclick="seedVaultEnable(\'' + aData._id + '\',\'' + aData.machineId + '\');" data-toggle="modal" href="#seedProtectedSystem"><span class="icon-seed-complete table-icon table-icon-warning active" title="Seed Ingestion in Progress"></span></a>';
                    } else {
                        seedPS = '<a onclick="seedVaultEnable(\'' + aData._id + '\',\'' + aData.machineId + '\');" data-toggle="modal" href="#seedProtectedSystem"><span class="icon-seed-in-progress table-icon table-icon active" title="Seed Pending"></span></a>';
                    }
                }
            } else if (window.glob === "appliance") {
                schedulerListTd = scListData;
                locationTd = "";
            }

            if (aData.markedForDelete) {
                online = getSpinner("Deletion in progress");
                seedPS = ' ';
            }

            var phdata = $('<input>', {id: aData._id, type: "hidden", value: edata});
            aData.machineId = isVrit;
            aData.created = unameTd + ' ' + selectedsch;

            $('td:eq(0)', nRow).html(details);
            $('td:eq(1)', nRow).html(aData.alias);
            $('td:eq(2)', nRow).html(online);
            $('td:eq(2)', nRow).append(phdata);
            $('td:eq(3)', nRow).html(osName);
            $('td:eq(4)', nRow).html(volumes);

            var actions = snapInUseInfo + delImgLink + seedPS;
            if (window.glob == "appliance") {
                $('td:eq(5)', nRow).html(schedulerListTd);
                $('td:eq(6)', nRow).html(retentionListTd);
                $('td:eq(7)', nRow).html(actions);
            } else {
                $('td:eq(5)', nRow).html(aData.userName);
                $('td:eq(6)', nRow).html(location);
                if (showSchedules) {
                    $('td:eq(7)', nRow).html(schedulerListTd);
                    $('td:eq(8)', nRow).html(retentionListTd);
                    $('td:eq(9)', nRow).html(actions);
                } else {
                    $('td:eq(7)', nRow).html(retentionListTd);
                    $('td:eq(8)', nRow).html(actions);
                }
            }
            return nRow;
        }
    }));

    ptsdTable.fnSetFilteringDelay(250);

}

function getImportMigrate() {
    setTimeout('$("#migrateMP").trigger("focus")', 900);
    $('#imStatus').html("");
    $('#migrateMP').empty();
    $('#imPSlink').attr("disabled", "disabled");
    if ($.jStorage.get("machineId") != undefined) {
        var mid = $.jStorage.get("machineId");
    }
    var psid = "";
    if ($.jStorage.get("psystemid") != undefined) {
        psid = $.jStorage.get("psystemid");
    }
    var urllink = "api/utilities/abc/getMountedDevices";
    $.ajax({
        type: "POST",
        url: urllink,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            var options = "";
            if (JSON.stringify(data).length <= 2) {
                $('#imStatus').html("No USB connected");
            } else {
                $('#migrateMP').empty();
                var obj = eval(data);
                $.each(data, function (index, value) {
                    var mpt = value.mountPoint;
                    options = options + '<option value="' + index + '" >' + mpt + '</option>';
                });
                $('#migrateMP').append(options).trigger("create");
                if ($('#migrateMP').children().length < 1) {
                    $('#imPSlink').attr("disabled", "disabled");
                    $('#imStatus').html("No USB connected");
                } else {
                    $('#imPSlink').removeAttr("disabled", "disabled");
                    getMigratedList();
                }
                $('#migrateMP').on("change", function (e) {
                    getMigratedList();
                });
            }
        },
        error: function (result) {
            $('#migrateMP').html("");
            $('#imStatus').html("No USB connected");
            sessionTimeout(result);
        }
    });
}

function getVRecovery() {
    if (isDataTransferBlocked()) {
        showModalAlertWithTimeout("Unable to do the operation due to running vault conversion");
        return;
    }

    $("#recoveryUsb").modal('show');

    $('#rvStatus').html("");
    $('#recoverVMP').empty();
    $('#vrecoverlink').attr("disabled", "disabled");
    $('#recoveryUsbBaseSel').empty();
    $('#rusbpwd').val("");
    $('#rusbpwd2').val("");
    var mid = $('#midps').val();
    var psid = "";
    if ($.jStorage.get("psystemid") != undefined) {
        psid = $.jStorage.get("psystemid");
    }
    var urllink = "api/utilities/abc/getMountedDevices";
    $.ajax({
        type: "POST",
        url: urllink,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            var options = "";
            initSnapshotSelect($('#recoveryUsbBaseSel'), psid)
            if (JSON.stringify(data).length <= 2) {
                $('#rvStatus').html("No USB connected");
            } else {
                $('#recoverVMP').empty();
                var obj = eval(data);
                $.each(data, function (index, value) {
                    var mpt = value.mountPoint;
                    var fs = value.freeSpace;
                    var gb = (parseInt(fs) / (1024 * 1024 * 1024));
                    var fspace = gb.toFixed(2) + 'G';
                    if (parseInt(gb) >= 1024) {
                        gb = (parseInt(gb) / 1024);
                        fspace = gb.toFixed(2) + 'T';
                    }
                    options = options + '<option value="' + index + '$#rEp#$' + fspace + '$#rEp#$' + value.fileSystemType + '" >' + mpt + '</option>'
                });
                $('#recoverVMP').append(options).trigger("create");
                if ($('#recoverVMP').children().length < 1) {
                    $('#vrecoverlink').attr("disabled", "disabled");
                    $('#rvStatus').html("No USB connected");
                } else {
                    if ($('#recoveryUsbBaseSel').val()) {
                        $('#vrecoverlink').removeAttr("disabled");
                    }
                    $('#vrecoverlink').attr("onclick", "migratePs('/api/protected_systems/" + psid + "/migrate','','recoverthroughusb')");
                }
                var index = $('#recoverVMP').children(':selected').attr('value');
                index = index.split('$#rEp#$');
                $("#recoverMPspace").html(index[1]);
                if (index[2] != 'ntfs') {
                    $('#recagree').show();
                    if ($("#iagreerecover").prop("checked", true)) {
                        $('#vrecoverlink').removeAttr("disabled");
                    } else {
                        $('#vrecoverlink').attr("disabled", "disabled");
                    }
                }
                $('#recoverVMP').on("change", function (e) {
                    $("#recoverMPspace").html("");
                    index = $('#recoverVMP').children(':selected').attr('value');
                    index = index.split('$#rEp#$');
                    $("#recoverMPspace").html(index[1]);
                    if (index[2] != 'ntfs') {
                        $('#recagree').show();
                        $('#vrecoverlink').attr("disabled", "disabled");
                    }
                });
                $('#recoveryUsbBaseSel').on("change", function (e) {
                    index = $('#recoverVMP').children(':selected').attr('value');
                    index = index.split('$#rEp#$');
                    if (index[2] != 'ntfs') {
                        $('#recagree').show();
                        if (!$('#recoveryUsbBaseSel').val()) {
                            $('#vrecoverlink').attr("disabled", "disabled");
                        }
                        else {
                            $('#vrecoverlink').removeAttr("disabled");
                        }
                    } else if ($('#recoveryUsbBaseSel').val()) {
                        $('#vrecoverlink').removeAttr("disabled");
                    }
                });
            }
        },
        error: function (result) {
            $('#recoverVMP').html("");
            $('#rvStatus').html("No USB connected");
            sessionTimeout(result);
        }
    });
}

function getRecoverAppliance() {
    setTimeout('$("#recVIP").trigger("focus")', 900);
    $('.recoveryip').hide();
    $('.recoveryip-base-sel').hide();
    $('#recVIP').val("");
    $('#recpslink').attr('disabled', 'disabled');
    $('#recStatus').html("");
    $('#recFinalizeRecovery').prop('checked', false);
}

function showSnapInUseMsg(msg) {
    $('#snapInUseMsg').html(msg);
    $('#snapInUse').modal('show');
}

function savePsScheduler(pid, mid) {
    var cronData = {};
    cronData.cronid = $('#' + pid + '_sclist').val();
    $.ajax({
        type: "POST",
        url: 'api/protected_systems/' + pid + '/set_schedule',
        data: JSON.stringify(cronData),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', "Schedule updated successfully.");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            getProtectedSystems();
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function prepareRetentionData(pid) {
  let retentionId = $('#' + pid + '_retlist').val();
  return retentionId !== "Unassigned" ? {retentionId: retentionId} : {};
}

function savePsRetentionAction(pid, mid) {
    let {retentionId} = prepareRetentionData(pid);
    if (!retentionId) {
      return;
    }
    let settings = $.jStorage.get(getRetentionPSSettingKey(pid));
    let retentionSetting = $.jStorage.get(getRetentionSettingKey(retentionId));
    let selectedSettings = retentionSetting._id ? {name: retentionSetting.name, ...getRetentionSettingBySystemType(settings.systemType, retentionSetting)} : retentionSetting;
    if (isSecondRetentionSettingLower(settings, selectedSettings)) {
      fillRetentionPoliciesInDialog(settings, selectedSettings);
      $('#close-shorter-policy-msg-btn').off('click').on('click', function() {
        $('#' + pid + '_retlist').val(settings._id || "Unassigned");
      });
      $('#set-retention-method-btn').off('click').on('click', function() {
        savePsRetention(pid, mid);
      });
      $('#shorter-policy-msg').modal('show');
    } else {
      savePsRetention(pid, mid);
    }
}

function savePsRetention(pid, mid) {
    let retentionData = prepareRetentionData(pid);

    $.ajax({
        type: "POST",
        url: 'api/protected_systems/' + pid + '/set_retention',
        data: JSON.stringify(retentionData),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', "Retention policy updated successfully.");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            getProtectedSystems();
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function getMigratedList() {
    $('#imStatus').html("");
    $('#ipwd').val("");
    $('#migrateList').empty();
    $('#imPSlink').attr("disabled", "disabled");
    var psid = "";
    if ($.jStorage.get("psystemid") != undefined) {
        psid = $.jStorage.get("psystemid");
    }
    var urllink = "api/utilities/abc/migrationList";
    $.ajax({
        type: "POST",
        url: urllink,
        data: '{"usbDevice":"' + $('#migrateMP').val() + '"}',
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var options = "";
            if (JSON.stringify(data).length <= 2) {
                $('#imStatus').html("No Protected System available to import");
            } else {
                $('#migrateList').empty();
                var obj = eval(data);
                $.each(data, function (index, value) {
                    if (value.error) {
                        $('#imStatus').html(value.error);
                        return true;
                    }
                    var mpt = value.systemName + ' (' + value.userName + ')';
                    var spval = JSON.stringify(value).replace(/\"/g, '\'') + '$$$' + index;
                    options = options + '<option value="' + spval + '" >' + mpt + '</option>';
                });
                $('#migrateList').append(options).trigger("create");
                if ($('#migrateList').children().length < 1) {
                    $('#imPSlink').attr("disabled", "disabled");
                    if (!$('#imStatus').html()) {
                        $('#imStatus').html("No Protected System available to import");
                    }
                } else {
                    $('#imPSlink').removeAttr("disabled", "disabled");
                }
                updatePasswordMigrateField();
            }
        },
        error: function (result) {
            $('#migrateMP').html("");
            $('#imStatus').html("No USB connected");
            sessionTimeout(result);
        }
    });
}

function seedVaultEnable(psid, mid) {
    $.jStorage.set("psystemid", psid);
    $('#midps').val(mid);
    checkVaultUsb("seed");
}

function seedVault(psid, mid) {
    $.jStorage.set("psystemid", psid);
    $('#midps').val(mid);
    checkUsb("seed");
}

function disableUsbSeeding() {
  $('#seedlink').removeAttr("disabled", "disabled");
  $("#CheckUsbConnect").hide();
  $("#seedMount").attr("disabled", "disabled");
  $("#seedMount").prop('checked', false);
  $('#urllink').prop('checked', true);
  $("#seedMountPoint").attr("disabled", "disabled");
  $('#seedCheck').prop('checked', false);
}

function checkVaultUsb(target) {
    $('#expagree').show();
    $('#seedagree').show();
    document.getElementById("UsbLink").value = "";
    var mid = $('#midps').val();
    var urllink = "api/utilities/abc/getMountedDevices";
    var options = "";
    var targetSelect = (target == "export") ? "usbMountPoint" : "seedMountPoint";
    var targetShow = (target == "export") ? "usbSettings" : "seedMountPoint";
    $.ajax({
      type: "POST",
      url: urllink,
      contentType: "application/json; charset=utf-8",
      headers: {
        "Replibit-Server": mid
      },
      dataType: "json",
      success: function (data) {
        if (JSON.stringify(data).length <= 2) {
          disableUsbSeeding();
        } else {
          $('#' + targetSelect).html("");
          $('#' + targetShow).toggle(true);
          $("#CheckUsbConnect").hide();
          $('#seedlink').removeAttr("disabled", "disabled");
          $("#seedMount").removeAttr("disabled", "disabled");
          $("#seedMountPoint").removeAttr("disabled", "disabled");
          var obj = eval(data);
          $.each(data, function (index, value) {
            var mpt = value.mountPoint;
            var fs = value.freeSpace;
            var gb = (parseInt(fs) / (1024 * 1024 * 1024));
            var fspace = gb.toFixed(2) + 'G';
            if (parseInt(gb) >= 1024) {
              gb = (parseInt(gb) / 1024);
              fspace = gb.toFixed(2) + 'T';
            }
            options = options + '<option value="' + index + '$#rEp#$' + fspace + '$#rEp#$' + value.fileSystemType + '" >' + mpt + '</option>'
          });
          $('#' + targetSelect).append(options).trigger("create");
        }
      },
      error: function (result) {
        $('#' + targetSelect).html("");
        $('#' + targetShow).toggle(true);
        modalalert('showalerts', "Error in Connection");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        sessionTimeout(result);
      }
    });
}

function vaultSeed(method, mode) {
    modalalert('showalerts', "Loading...");
    if ($.jStorage.get("psystemid") != undefined) {
        var psid = $.jStorage.get("psystemid");
        //the machineId is not available, import into a cluster will import only to the node to which we are connected.
        //var s = JSON.parse($('#' + psid).val());
        //var mid = s.machineId;
        var vuri = '/api/protected_systems/' + psid + '/' + method;
    }
    var susM = $('#seedMountPoint').val().split('$#rEp#$');

    var data = {};

    if (mode == "vault") {
        data.mode = "vault"
        susM[2] = 'ntfs';
        var Importmode = $('input[name=seedMountPoint]:checked').val();
        if (Importmode == "seedMount") {
            data.usbDevice = susM[0];
        } else {
            if ($('#urllink').is(':checked')) {
                if ($.trim($('#UsbLink').val()).length <= 5) {
                    modalalert('showalerts', "Please enter a valid URL");
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                    return false;
                }
            }
            var usbLink = $("#UsbLink").val();
            data.url = usbLink;
        }
    } else if (mode == "migration") {
        susM[2] = 'ntfs';
        var ipwd = $('#ipwd').val();
        if(ipwd.length <= 0){
          modalalert('showalerts', "Assuming previous format or no password required...");
          setTimeout("$('#showalerts').modal('hide');", 2000);
        }
        var psid = $('#migrateList').val().split('$$$')
        if ($.jStorage.get("machineId") != undefined) {
            var mid = $.jStorage.get("machineId");
        }
        // mData needs to contain the decoded migration metadata
        var mData = JSON.parse(psid[0].replace(/\'/g, '\"'));
        data.usbDevice = $('#migrateMP').val();
        data.mode = "migration";
        data.passwd = ipwd;
        data.migrationData = mData;
        var vuri = '/api/utilities/' + psid[1] + '/importMigration';
    }
    if (susM[2] != "ntfs" && !($("#iagreeseed").prop("checked"))) {
        $('#seedlink').attr("disabled", "disabled");
        modalalert('showalerts', "Please check the I agree checkbox and try again.");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    $.ajax({
        type: "POST",
        url: vuri,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            if (data.status == "Started" || data == "Started") {
                if (window.glob == "vault") {
                    if (Importmode == "seedMount" || Importmode == "urllink") {
                        modalalert('showalerts', "Seed import started. It will take some time for the import to complete. Check the status on the Jobs page.");
                    }
                }
                var chk = (window.glob == "vault") ? "Import Seeding" : "";
                chk = (window.glob == "appliance") ? "Seeding " : "";
                chk = (mode == "migration") ? "Import migration " : chk;
                if ($('#urllink').is(':checked')) {
                    modalalert('showalerts', chk + "Seed import started. It will take some time for the import to complete. Check the status on the Jobs page.");
                } else {
                    modalalert('showalerts', chk + "Seed import started. Please do not eject the USB device until it is completed. Check the status on the Jobs page.");
                }
                setTimeout("$('#showalerts').modal('hide');", 3000);

            } else if (data.msg == "Success" || data == "Success") {
                modalalert('showalerts', "Migration started.");
                setTimeout("$('#showalerts').modal('hide');", 3000);

            } else {
                modalalert('showalerts', data.msg || data);
                setTimeout("$('#showalerts').modal('hide');", 6000);

            }
        },
        error: function (errMsg) {
            modalalert('showalerts', errMsg.msg);
            setTimeout("$('#showalerts').modal('hide');", 6000);
            sessionTimeout(errMsg);
        }
    });
    $("#seedProtectedSystem").modal('hide');
    $('#importMigratePS').modal('hide');
    $('#ipwd').val("");
    $('#ipwd2').val("");
}


$("#vseedCheck").on("click", function () {
    if ($('#vseedCheck').is(':checked')) {
        $("#vseedCheck").prop("checked", true);
        $('#vaultreplabel').css("background-color", "#4596ce");
    } else {
        $("#vseedCheck").prop("checked", false);
        $('#vaultreplabel').css("background-color", "#d6d6d6");

    }
});
$("#MBaseselection").on("click", function () {
    if ($('#MBaseselection').is(':checked')) {
        $("#MBaseselection").prop("checked", true);
        $('#BaseSelectionlabel').css("background-color", "#4596ce");
    } else {
        $("#MBaseselection").prop("checked", false);
        $('#BaseSelectionlabel').css("background-color", "#d6d6d6");

    }
});

function validateRetentionForNonAxcientVaults(method) {
    if (method === 'basic') {
      var basic_all = parseInt($('#basic-all').val().trim());
      if (isNaN(basic_all) ||basic_all < -1 || basic_all === 0 || basic_all > 9999) {
          return "Retain all must be set number between 1 and 9999 or -1.";
      }
    } else if (method === 'custom') {
      var custom_all = parseInt($('#custom-all').val().trim());
      if (isNaN(custom_all) || custom_all < 1 || custom_all > 9999) {
        return "Retain all must be set number between 1 and 9999";
      }
      let custom_daily = parseInt($('#custom-daily').val().trim());
      let custom_weekly = parseInt($('#custom-weekly').val().trim());
      let custom_monthly = parseInt($('#custom-monthly').val().trim());
      let custom_yearly = parseInt($('#custom-yearly').val().trim());

      if (isNaN(custom_daily) || custom_daily < -1) {
        return "Days must be a number greater than or equal to -1.";
      }
      if (isNaN(custom_weekly) || custom_weekly < -1) {
        return "Weeks must be a number greater than or equal to -1.";
      }
      if (isNaN(custom_monthly) || custom_monthly < -1) {
        return "Months must be a number greater than or equal to -1.";
      }
      if (isNaN(custom_yearly) || custom_yearly < -1) {
        return "Years must be a number greater than or equal to -1.";
      }
    }

    return '';
}

function showRetentionSettings() {
  $('#retention-method-modal').modal('show');
}

function isSecondRetentionSettingLower(retentionSettings1, retentionSettings2) {
  if (retentionSettings2.parameters.allDays === -1) {
    return false;
  }

  if (retentionSettings2.method === 'basic' && retentionSettings1.method === 'custom') {
    return true;
  } else if (retentionSettings2.method === 'custom' && retentionSettings1.method === 'basic') {
    return false;
  }

  let parameters1 = retentionSettings1.parameters;
  let parameters2 = retentionSettings2.parameters;
  return Object.keys(parameters1).some(function (key) {
    return parameters2.hasOwnProperty(key) && parameters2[key] < (parameters1[key] === -1 ? Infinity : parameters1[key]);
  });
}

function setRetentionPolicyNameInDialog(side, name) {
  $('#shorter-policy-msg .retention-name-' + side + ' .current-policy').html(name || '<i>Unassigned</i>');
}

function fillRetentionPoliciesInDialog(current, selected) {
    $('#shorter-policy-msg').removeClass('edit-retention-policy-case').addClass('change-retention-settings-case');
    $('#shorter-policy-msg .retention-workstation').show();
    setRetentionPolicyNameInDialog('left.workstation', current.name);
    updateRetentionMethodDescription(current, '#shorter-policy-msg .retention-description-left.workstation');
    setRetentionPolicyNameInDialog('right.workstation', selected.name);
    updateRetentionMethodDescription(selected, '#shorter-policy-msg .retention-description-right.workstation', current);
}

function confirmRetentionMethodAction() {
  let current = $.jStorage.get('current-retention-ps');
  const [retentionPolicy, retentionMethod] = getRetentionPolicyAndMethod();
  let selected;
  if (retentionPolicy === UNASSIGNED_RETENTION) {
    selected = {method: retentionMethod, parameters: getRetentionParametersFromMethod(retentionMethod)};
  } else {
    selected = getSelectedRetentionData();
  }
  if (isSecondRetentionSettingLower(current, selected)) {
    fillRetentionPoliciesInDialog(current, selected);
    $('#retention-method-modal').modal('hide');
    $('#close-shorter-policy-msg-btn').off('click').on('click', function() {
      showRetentionSettings();
    });
    $('#set-retention-method-btn').off('click').on('click', function() {
      setRetentionMethod();
    });
    $('#shorter-policy-msg').modal('show');
  } else {
    setRetentionMethod();
  }
}

function getRetentionPolicyAndMethod() {
    let retentionPolicy = $('#retention-policy').val();
    let retentionMethod = $('[name="retention-method"]:checked').val();
    return [retentionPolicy, retentionMethod];
}

function validateRetentionValues() {
  const [retentionPolicy, retentionMethod] = getRetentionPolicyAndMethod();

  if (retentionPolicy === UNASSIGNED_RETENTION) {
    let validateMessage;

    if (isRetentionLimited()) {
      validateMessage = validateRetentionLimitForAxcientVaults(retentionMethod);
    } else {
      validateMessage = validateRetentionForNonAxcientVaults(retentionMethod);
    }

    if (validateMessage !== '') {
      showModalAlertWithTimeout(validateMessage);
      return true;
    }
  }
}

function retentionDialogSaveAction() {
  if (validateRetentionValues()) {
    return;
  }
  if ($('#retention-policy').data('hadRetentionPolicy') && $('#retention-policy').val() === UNASSIGNED_RETENTION) {
    $('#retention-method-modal').modal('hide');
    $('#unassign-policy-msg').modal('show');
  } else {
    confirmRetentionMethodAction();
  }
}

function getRetentionParametersFromMethod(retentionMethod) {
  let parameters;
  if (retentionMethod === 'basic') {
    parameters = {
      allDays: parseInt($('#basic-all').val())
    };
  } else if (retentionMethod === 'custom') {
    parameters = {
      allDays: parseInt($('#custom-all').val()),
      dailyDays: parseInt($('#custom-daily').val()),
      weeklyWeeks: parseInt($('#custom-weekly').val()),
      monthlyMonths: parseInt($('#custom-monthly').val()),
      yearlyYears: parseInt($('#custom-yearly').val())
    };
  } else {
    showModalAlertWithTimeout("Invalid retention method.");
    return;
  }
  return parameters;
}

function setRetentionMethod() {
    const [retentionPolicy, retentionMethod] = getRetentionPolicyAndMethod();
    if ($.jStorage.get("psystemid") != undefined) {
      var psid = $.jStorage.get("psystemid");
    }
    var retentionConfig;
    if (retentionPolicy !== UNASSIGNED_RETENTION) {
      retentionConfig = {
        retentionId: retentionPolicy,
      };
    } else {
      let parameters = getRetentionParametersFromMethod(retentionMethod);
      if (!parameters) {
        return;
      }

      retentionConfig = {
        // null if retention policy is not assigned else retentionId of assigned policy
        retentionId: null,
        method: retentionMethod,
        parameters: parameters,
      };
    }
    setPsValues("retentionMethod", retentionConfig, psid);

    $('#retention-method-modal').modal('hide');
}

function setAlias() {
    let psid = $.jStorage.get("psystemid");
    if (psid != undefined) {
        let alias = $('#alias-input').val();
        setPsValues("alias", alias, psid);
        $.jStorage.set('alias-' + psid, alias);
    }
    $('#alias-modal').modal('hide');
}

function getRetentionTypeDescription(type) {
  const types = {
    [RETENTION_LIMITS_ALL]: "All Days",
    [RETENTION_LIMITS_DAILY]: "Daily Days",
    [RETENTION_LIMITS_WEEKLY]: "Weeks",
    [RETENTION_LIMITS_MONTHLY]: "Months",
    [RETENTION_LIMITS_YEARLY]: "Years",
  }
  return types[type];
}

function validateRetentionLimitForAxcientVaults(retentionMethod) {
  const types = {
    "basic-all": RETENTION_LIMITS_ALL,
    "custom-all": RETENTION_LIMITS_ALL,
    "custom-daily": RETENTION_LIMITS_DAILY,
    "custom-weekly": RETENTION_LIMITS_WEEKLY,
    "custom-monthly": RETENTION_LIMITS_MONTHLY,
    "custom-yearly": RETENTION_LIMITS_YEARLY
  };

  for (let type in types) {
    if (!type.startsWith(retentionMethod)) {
      continue;
    }
    const minValue = getRetentionLimit(types[type], "MIN");
    const maxValue = getRetentionLimit(types[type], "MAX");
    const $control = $('#' + type);
    const value = $control.val().trim();
    const typeDescription = getRetentionTypeDescription(types[type]);

    // invalid number or out of range
    if (!/^-?\d+$/.test(value) || value < minValue) {
      return `Retain ${typeDescription} must be a number greater than or equal to ${minValue}.`;
    }

    if (value > maxValue) {
      return `Retain ${typeDescription} must be a number less than or equal to ${maxValue}.`;
    }
  }

  return '';
}

function checkRetentionSettingsLimits(control) {
    if (isRetentionLimited() || ["basic_all", "custom_all"].includes(control)) { return }

    var control_value;
    switch(control) {
        case 'custom-daily':
          control_value = 9999;
          break;
        case 'custom-weekly':
          control_value = 4999;
          break;
        case 'custom-monthly':
          control_value = 999;
          break;
        case 'custom-yearly':
          control_value = 99;
          break;
    }

    if ((parseInt($('#' + control).val()) > control_value)) {
        $('#' + control).val(-1);
    }
}

function validateInputControl() {
    const number_of_char = 8;
	  var element = document.getElementById("input_ticket_id");
    if (element.value.length < number_of_char) {
        $("#input_ticket_id").addClass("error");
    } else {
        $("#input_ticket_id").removeClass("error")
    }
}

function AlertHrsLimit() {
    if ($.jStorage.get("psystemid") != undefined) {
        var psid = $.jStorage.get("psystemid");
    }

    var alertHours = parseInt($('#alerthrs').val());

    if (isNaN(alertHours) || alertHours < 0 || alertHours > 1000) {
        showModalAlertWithTimeout('Please enter a number between 0 and 1000');
        return;
    }

    setPsValues("missedBackupAlertHours", alertHours, psid);
    $('#missed-backup-alert-modal').modal('hide');
}

function checkSnapshotsForMigration() {
    var psid = $.jStorage.get("psystemid");
    var vm = 0, iscsi = 0, mount = 0, exp = 0;

    $.ajax({
        url: '/api/protected_systems/' + psid + '/snapshots_usage',
        type: 'POST',
        async: false,
        success: function (usage) {
            vm = usage.testkvm + usage.livekvm;
            iscsi = usage.testiscsi + usage.liveiscsi;
            mount = usage.testmount + usage.livemount;
            exp = usage.export + usage.fuse_export + usage.copy_to_usb;
        }
    });

    usage = vm + iscsi + mount + exp;

    if (!usage) {
        return "";
    }

    if (usage > 1) {
        return "There are critical processes running for this Protected System. Starting a migration now may produce significant data loss. Please make sure there is no virtual machine, iSCSI, snapshots or exports running before proceeding.";
    }

    if (vm) {
        return "There is a virtual machine running for this Protected System. Starting a migration now may produce significant data loss. Please make sure you stop all virtual machines before proceeding.";
    }

    if (iscsi) {
        return "There is an ongoing iSCSI for this Protected System. Starting a migration now may produce significant data loss. Please make sure you stop the iSCSI before proceeding.";
    }

    if (mount) {
        return "There is a mounted snapshot for this Protected System. Starting a migration now may produce significant data loss. Please make sure you unmount all snapshots before proceeding.";
    }

    if (exp) {
        return "There is an export started for this Protected System. Starting a migration now may produce significant data loss. Please make sure you stop all exports before proceeding.";
    }
}


function getServerMode(){
    var mode = "";
    $.ajax({
        url: '/api/getServerMode',
        type: 'GET',
        async: false,
        success: function (data) {
            mode = data;
        }
    });
    return mode;
}

function isDataTransferBlocked() {
    return /data_transfer_blocked/i.test(getServerMode())
}

function migrate() {
    if (isDataTransferBlocked()) {
        showModalAlertWithTimeout("Unable to migrate due to running vault conversion");
        return;
    }

    var snapshotsUsedMessage = checkSnapshotsForMigration();

    if (snapshotsUsedMessage) {
        $("#migrateWarning").find('p').text(snapshotsUsedMessage);
        $("#migrateWarning").modal('show');
    } else {
        getMigrate();
    }
}

function getMigrate() {
    $("#migrateWarning").modal('hide');
    $('#migratePopup').modal('show');

    $('#wclstr').toggle(true);
    $('#clsnet').toggle(true);
    $('#outnet').toggle(false);
    $('#oclstr').toggle(false);
    $('#ifaceip').val("");
    $('#mpwd').val("");
    $('#mpwd2').val("");
    getclsnodes("withinnet");
}

function getmUsb(via) {
    $('#mStatus').html("");
    $('#musbMountPoint').empty();
    $('#migrateoclstr').attr("disabled", "disabled");
    var mid = $('#midps').val();
    var psid = "";
    if ($.jStorage.get("psystemid") != undefined) {
        psid = $.jStorage.get("psystemid");
    }
    var urllink = "api/utilities/abc/getMountedDevices";
    $.ajax({
        type: "POST",
        url: urllink,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            $('#migagree').hide();
            $('#migrateoclstr').removeAttr("disabled", "disabled");
            var options = "";
            if (JSON.stringify(data).length <= 2) {
                $('#musbSettings').hide();
                $('#chkusb_ocl').hide();
                $('#mStatus').html("No USB connected");
            } else {
                $('#musbSettings').show();
                $('#chkusb_ocl').show();
                $('#musbMountPoint').empty();
                var obj = eval(data);
                $('#migagree').hide();
                $.each(data, function (index, value) {
                    var mpt = value.mountPoint;
                    var fs = value.freeSpace;
                    var gb = (parseInt(fs) / (1024 * 1024 * 1024));
                    var fspace = gb.toFixed(2) + 'G';
                    if (parseInt(gb) >= 1024) {
                        gb = (parseInt(gb) / 1024);
                        fspace = gb.toFixed(2) + 'T';
                    }
                    options = options + '<option value="' + index + '$#rEp#$' + fspace + '$#rEp#$' + value.fileSystemType + '" >' + mpt + '</option>'
                });
                $('#musbMountPoint').append(options).trigger("create");
                if ($('#musbMountPoint').children().length < 1) {
                    $('#migrateoclstr').attr("disabled", "disabled");
                    $('#mStatus').html("No USB connected");
                } else {
                    $('#migrateoclstr').removeAttr("disabled", "disabled");
                    $('#migrateoclstr').attr("onclick", "migratePs('/api/protected_systems/" + psid + "/migrate','" + $('#midps').val() + "','" + via + "')");
                }
                var index = $('#musbMountPoint').children(':selected').attr('value');
                index = index.split('$#rEp#$');
                $("#mspace").html(index[1]);
                if (index[2] != 'ntfs') {
                    $('#migagree').show();
                    if ($("#iagreemigrate").prop("checked", true)) {
                        $('#migrateoclstr').removeAttr("disabled", "disabled");
                    } else {
                        $('#migrateoclstr').attr("disabled", "disabled");
                    }
                }
                $('#musbMountPoint').on("change", function (e) {
                    $("#mspace").html("");
                    index = $('#musbMountPoint').children(':selected').attr('value');
                    index = index.split('$#rEp#$');
                    $("#mspace").html(index[1]);
                    if (index[2] != 'ntfs') {
                        $('#migagree').show();
                        if ($("#iagreemigrate").prop("checked", true)) {
                            $('#migrateoclstr').removeAttr("disabled", "disabled");
                        } else {
                            $('#migrateoclstr').attr("disabled", "disabled");
                        }
                    } else {
                        $('#migagree').hide();
                        $('#migrateoclstr').removeAttr("disabled", "disabled");
                    }
                });
            }
        },
        error: function (result) {
            $('#musbMountPoint').html("");
            $('#mStatus').html("No USB connected");
            sessionTimeout(result);
        }
    });
}

function getclsnodes(via) {
    $('#migratewclstr').attr("disabled", "disabled");
    $('#mStatus').html("");
    $('#iface').empty();
    var psid = "";
    if ($.jStorage.get("psystemid") != undefined) {
        psid = $.jStorage.get("psystemid");
    }
    if (via == "withinnet") {
        $.ajax({
            url: 'api/cluster_manager',
            async: false,
            success: function (data) {
                $('#iface').empty();
                $.each(data, function (key, val) {
                    if ((val.state == 1 || val.state == 2) && val.clusterMachineId != $('#midps').val()) {
                        $('#iface').append('<option value="' + val.clusterMachineId + '" >' + val.ip + '(' + val.machineName + ')' + '</option>');
                    }
                });
                if (!$('#iface').children().length) {
                    $('#migratewclstr').attr("disabled", "disabled");
                    $('#clsnet').toggle(false);
                    $('#withinclusternet').parent().hide();
                    $("#outsideclusternet").prop('checked', true).trigger("change");
                    if (isInfinityCloudVault()) {
                        $('#outsideclusterusb').parent().hide();
                        $("#outsideclusternet").parent().switchClass('btn-list-top-set', 'btn-list-single-set')
                    }
                } else {
                    $('#outsideclusternet').parent().hide();
                    $('#outsideclusterusb').parent().hide();
                    $("#withinclusternet").prop('checked', true);
                    $('#migratewclstr').removeAttr("disabled", "disabled");
                    $('#clsnet').toggle(true);
                    $('#migratewclstr').attr("onclick", "migratePs('/api/protected_systems/" + psid + "/migrate','" + $('#midps').val() + "','withinnet')");
                }
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
    } else if (via == "outsidenet") {
        if (verifyIP($('#ifaceip').val())) {
            $('#migratewclstr').removeAttr("disabled", "disabled");
            $('#migratewclstr').attr("onclick", "migratePs('/api/protected_systems/" + psid + "/migrate','" + $('#midps').val() + "','outsidenet')");
        } else {
            $('#migratewclstr').attr("disabled", "disabled");
        }
    }
}

function validateEncryptionPassword(fieldname){
  var pwd = $('#'+fieldname).val();
  var pwd2 = $('#'+fieldname+'2').val();

  if (!pwd) {
    modalalert("showalerts", "The encryption password is empty. Please specify a password and try again.");
    setTimeout("$('#showalerts').modal('hide');", 3000);
    return false;
  }

  if (pwd !== pwd2) {
    modalalert("showalerts", "The encryption password doesn't match the confirmation, please try again.");
    setTimeout("$('#showalerts').modal('hide');", 3000);
    return false;
  }

  if (!testPassword(pwd, MIGRATION_PWD_STRENGTH)) {
    modalalert("showalerts", "The encryption password must be at least "+MIGRATION_PWD_STRENGTH+" characters long. Please try again.");
    setTimeout("$('#showalerts').modal('hide');", 3000);
    return false;
  }

  return true;
}

function validateMigrationPassword(){
  return validateEncryptionPassword('mpwd')
}

function validateUSBRecoveryPassword(){
  return validateEncryptionPassword('rusbpwd')
}

function migratePs(uri, mid, udata) {
    modalalert('showalerts', "Loading...");
    var pwd = $('#mpwd').val();
    if($('#mpwdcontainer').is(":visible") && !validateMigrationPassword()){
      return false;
    }
    var psid = $.jStorage.get("psystemid");
    var data = {};
    if (udata == 'outsideusb') {
        var usM = $('#musbMountPoint').val().split('$#rEp#$');
        data.acrossClusterUSB = true;
        data.usbDevice = usM[0];
        data.passwd = pwd;
        data.usb_override = $('#usb_override').is(':checked');
    } else if (udata == 'outsidenet') {
        data.acrossClusterNetwork = true;
        data.remoteIp = $('#ifaceip').val();
    } else if (udata == 'withinnet') {
        data.withInClusterNetwork = true;
        data.machineId = $('#iface').val();
    } else if (udata == 'recoverthroughusb') {
        var rusbpwd = $('#rusbpwd').val()
        if (!validateUSBRecoveryPassword()) {
            return false;
        }
        var usM = $('#recoverVMP').val().split('$#rEp#$');
        data.passwd = rusbpwd;
        data.vaultApplianceUSB = true;
        data.usbDevice = usM[0];
        data.baseSnapshot = $('#recoveryUsbBaseSel').val();
        if (usM[2] != "ntfs" && !($("#iagreerecover").prop("checked"))) {
            $('#vrecoverlink').attr("disabled", "disabled");
            $('#usbabelid').css("background-color", "#d6d6d6");
            modalalert('showalerts', "Please check the I agree checkbox");
            setTimeout("$('#showalerts').modal('hide');", 3000);

            return false;
        }
    }
    $.ajax({
        url: uri,
        type: 'POST',
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            if(data.status == "error"){
                modalalert('showalerts', data.msg);
                $("#migratePs").modal('hide');
                setTimeout("$('#showalerts').modal('hide');", 5000);
            }else{
                modalalert('showalerts', data.msg);
                $("#migratePs").modal('hide');
                setTimeout("$('#Migrate').css('display', 'none');$('#sMigrate').css('display', 'block');$('#showalerts').modal('hide');", 5000);
            }
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
    $("#migratePopup").modal('hide');
    $("#recoveryUsb").modal('hide');
}

function schNow(psid, mid, bkpType) {
    var uri = '/api/protected_systems/' + psid + '/scheduleNow';
    var udata = JSON.stringify({backupType: bkpType});
    $.ajax({
        url: uri,
        type: 'POST',
        data: udata,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', data.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function goLicense(data) {
    if (data == "Not Enough Licenses") {}
}


$("#bootEnable").on("click", function () {
    $("#bVm").prop("checked", true);
    var pass = $('#bootepass').val();
    var pass2 = $('#bootpstatus').html();
    if (pass.length == 0) {
        $("#bVm").prop("checked", false);
        $('#bootlabelid').css("background-color", "#d6d6d6");

    } else if (pass2.length > 0) {
        $("#bVm").prop("checked", false);
        $('#bootlabelid').css("background-color", "#d6d6d6");

    } else if (pass2 == "Invalid CInvalid Credentials ") {
        $("#bVm").prop("checked", false);
        $('#bootlabelid').css("background-color", "#d6d6d6");

    } else {
        $("#bVm").prop("checked", true);
        $('#bootlabelid').css("background-color", "#4596ce");
    }
    elementVisibility($("#useSmartRecovery-bootVm-block"), $("#bVm").is(':checked'));
});

function setBootVM(enc) {
    var psid = "";
    if ($.jStorage.get("psystemid") != undefined) {
        psid = $.jStorage.get("psystemid");
    }
    if ($("#bVm").is(':checked')) {
        $('#bootlabelid').css("background-color", "#4596ce");
    } else {
        $('#bootlabelid').css("background-color", "#d6d6d6");
    }
    if (enc && $("#bVm").prop('checked') == true) {
        $("#bootEnable").modal("show");
        $('#bootepass').val("");
        $('#bootlabelid').css("background-color", "#4596ce");
    } else {
        setPsValues("bootVMCheck", $("#bVm").prop('checked'), psid);
        setBootVMSmartRecoveryIfAvailable(psid);
        setBootVMVirtio(psid);
        setBootVMChecksPolicyIfAvailable(psid);
        $('#bootlabelid').css("background-color", "#d6d6d6");
    }
    $("#close").on("click", function () {
        $("#bVm").prop("checked", false);
        elementVisibility($("#useSmartRecovery-bootVm-block"), false);
        elementVisibility($("#useVirtIO-bootVm-block"), false);
        $('#divsquaredThree').removeClass();
        $('#bootpstatus').html(" ");
        $('#divsquaredThree').removeClass();
    });
}

function enableBvm() {
    $('#bootpstatus').html("");
    var pass = $('#bootepass').val();
    if (pass == "") {
        $('#bootpstatus').html("Please enter the password");
        return false;
    }
    if ($.jStorage.get("psystemid") != undefined) {
        var psid = $.jStorage.get("psystemid");
        var mid = $.jStorage.get("pmachineid");
        var jdata = { password: pass };
        $.ajax({
            type: "POST",
            url: '/api/protected_systems/' + psid + '/validatePassword',
            data: JSON.stringify(jdata),
            contentType: "application/json; charset=utf-8",
            headers: {
                "Replibit-Server": mid
            },
            dataType: "json",
            success: function (data) {
                if (data.status == "ok") {
                    setPsValues("bootVMCheck", $("#bVm").prop('checked'), psid);
                    setBootVMSmartRecoveryIfAvailable(psid);
                    setBootVMVirtio(psid);
                    setBootVMChecksPolicyIfAvailable(psid);
                    $("#bootEnable").modal('hide');
                } else {
                    $('#bootpstatus').html(data.msg);
                }
            },
            error: function (errMsg) {
                $.mobile.loading("show", {
                    theme: "b",
                    text: errMsg.statusText,
                    textVisible: true
                });
                sessionTimeout(errMsg);
            }
        });
    }
}

function setPsValues(type, value, psid) {
    var jdata = {};
    jdata.type = type;
    jdata.value = value;
    var mid = $.jStorage.get("pmachineid");
    $.ajax({
        type: "POST",
        url: '/api/protected_systems/' + psid + '/setValues',
        data: JSON.stringify(jdata),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            viewDetails(psid);
            modalalert('showalerts', data);
            setTimeout('$("#showalerts").modal("hide");', 3000);
        },
        error: function (errMsg) {
            modalalert('showalerts', errMsg.statusText);
            setTimeout('$("#showalerts").modal("hide");', 3000);
            sessionTimeout(errMsg);
        }
    });
}

function stopMigrate() {
    $('#stopMigration').attr("onclick", "stopMigration()");
}

function stopMigration() {
    modalalert('showalerts', "Stopping Migration");
    var psid = $.jStorage.get("psystemid");
    if ($.jStorage.get("machineId") != undefined) {
        var mid = $.jStorage.get("machineId");
    }
    var vuri = '/api/protected_systems/' + psid + '/stopMigrate';
    $.ajax({
        type: "POST",
        url: vuri,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            $('#migrateStopPopup').modal('hide');
            modalalert('showalerts', data.msg);
            setTimeout("$('#showalerts').modal('hide');", 4000);
            viewDetails(psid);
        },
        error: function (errMsg) {
            modalalert('showalerts', errMsg.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(errMsg);
        }
    });
}

function testRecVIP() {
    if ($("#recVIP").val() == "") {
        $('#recStatus').html("Please Enter Valid IP");
        return false;
    }
    modalalert('showalerts', "Please wait while verifying Vault IP");
    var urllink = "api/utilities/abc/testVaultCredentials";
    var data = {};
    data.vaultIP = $('#recVIP').val();
    $.ajax({
        type: "POST",
        url: urllink,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            setTimeout("$('#showalerts').modal('hide');", 2000);
            if (data.status == "ok") {
                $('#recStatus').html("");
                getRecCSL($('#recVIP').val());
            } else {
                $('.recoveryip').hide();
                $('.recoveryip-base-sel').hide();
                $('#recStatus').html("Failed to login to vault");
            }
        },
        error: function (result) {
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $('#recVIP').val("");
            $('#recStatus').html("Not a Vault IP");
            $('.recoveryip').hide();
            $('.recoveryip-base-sel').hide();
            sessionTimeout(result);
        }
    });
}

function isIncrementalRecoveryEnabled() {
    var incrementalEnabled = false;
    getFeatureFlag(FEATURE_FLAG.INCREMENTAL_RECOVERY, (data) => {
      if(data && data.status === "ok") {
        incrementalEnabled = Boolean(data.result);
      }
    });

    return incrementalEnabled;
}

function vaultHasIncrementalRecoveryEnabled(vaultIp) {
    const data = {};
    data.vaultIp = vaultIp;
    data.actionName = "get_feature_flag";
    data.data = { "name": FEATURE_FLAG.INCREMENTAL_RECOVERY };
    var isIncRecoveryEnabled = false;

    $.ajax({
        type: "POST",
        url: "api/utilities/abc/recoverQuery",
        contentType: "application/json; charset=utf-8",
        async: false,
        data: JSON.stringify(data),
        success: function (data) {
          if(data && data.status === "ok") {
            isIncRecoveryEnabled = Boolean(data.result);
          }
        },
        error: function (err) {
            sessionTimeout(err)
        }
    });

    return isIncRecoveryEnabled;
}

function getRecCSL(ip) {
    const isIncRecoveryEnabled = isIncrementalRecoveryEnabled();
    const isIncRecoveryEnabledOnVault = vaultHasIncrementalRecoveryEnabled(ip);

    var urllink = "api/utilities/abc/recoverQuery";
    var data = {};
    data.vaultIp = ip;
    data.actionName = "getCustomerLocations";
    data.data = {};
    $.ajax({
        type: "POST",
        url: urllink,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var options = '<option value="" >Choose Location</option>';
            if (JSON.stringify(data).length <= 2) {
                $('#recStatus').html("No Location available");
            } else {
                $('#recCSLoc').empty();
                $('#recPSList').empty();
                $('#recBaseSel').empty();
                $.each(data, function (index, value) {
                    if (value != "") {
                        options = options + '<option value="' + index + '" >' + index + '</option>';
                    }
                });
                $('#recCSLoc').append(options).trigger("create");
                $("#recCSLoc").on("change", function (e) {
                    if (e.handled !== true) {
                        e.handled = true;
                        $("#recPSList").empty();
                        $('#recBaseSel').empty();
                        if ($("#recCSLoc").val() != "") {
                            getRecPs(ip, $("#recCSLoc").val())
                        }
                    }
                });
                $('.recoveryip').show();

                // hides Finalize Recovery according to feature flag
                if(!isIncRecoveryEnabled || !isIncRecoveryEnabledOnVault) {
                    $('.finalize-recovery').hide();
                }
            }
        },
        error: function (result) {
            $('#recVIP').val("");
            $('#recStatus').html("No locations available");
            $('.recoveryip').hide();
            $('.recoveryip-base-sel').hide();
            sessionTimeout(result);
        }
    });
}

function getRecPs(ip, location) {
    var urllink = "api/utilities/abc/recoverQuery";
    var data = {};
    data.vaultIp = ip;
    data.actionName = "getRecoverPsDetails";
    data.data = {"customerLocation": location };
    $.ajax({
        type: "POST",
        url: urllink,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var options = "";
            $('#recBaseSel').empty();
            if (JSON.stringify(data).length <= 2) {
                $('#recStatus').html("No protected systems available");
            } else {
                $('#recPSList').empty();
                $('#recStatus').html("");
                $.each(data, function (index, value) {
                    var mpt = value.systemName;
                    options = options + '<option value="' + index + '$azp$' + mpt + '" >' + mpt + '</option>';
                });
                $('#recPSList').append(options);
                if ($("#recPSList").val() != "") {
                    var psid = $('#recPSList').val();
                    psid = psid.split('$azp$')[0];
                    getRecSnapshot(ip, psid);
                }
                $('#recPSList').on("change", function (e) {
                    if (e.handled !== true) {
                        e.handled = true; // prevents multiple events firing when reopening modal window
                        $('#recBaseSel').empty();
                        if ($("#recPSList").val() != "") {
                            var psid = $('#recPSList').val();
                            psid = psid.split('$azp$')[0];
                            getRecSnapshot(ip, psid);
                        }
                    }
                });
            }
        },
        error: function (result) {
            $('#recVIP').val("");
            $('#recStatus').html("No locations available");
            sessionTimeout(result);
        }
    });
}

function getRecSnapshot(ip, psId) {
    var urllink = "api/utilities/abc/recoverQuery";
    var data = {};
    data.vaultIp = ip;
    data.actionName = "getRecoverSnapshots";
    data.data = {"psId": psId };
    $.ajax({
        type: "POST",
        url: urllink,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var enableLink = false;
            $('#recBaseSel').empty();
            if (data == null) {
                // no snapshot list was send, first snapshot will be assumed as base
                $('.recoveryip-base-sel').hide();
                enableLink = true;
            } else {
                $('.recoveryip-base-sel').show();
                var options = "";
                if (JSON.stringify(data).length <= 2) {
                    $('#recStatus').html("No snapshots available");
                } else {
                    $('#recStatus').html("");
                    $.each(data, function (index, value) {
                        options = options + '<option value="' + value + '" >' + getSnapshotTimeString(value) + '</option>';
                    });
                    $('#recBaseSel').append(options);
                    enableLink = true;
                }
            }
            if (enableLink) {
                $('#recpslink').removeAttr('disabled');
                $('#recpslink').on("click", function (e) {
                    if (e.handled !== true) {
                        e.handled = true;
                        recoverPSNow('/api/utilities/abc/startNetworkRecovery', $('#recPSList').val(), ip, $('#recBaseSel').val(), $('#recCSLoc').val());
                    }
                });
            }
        },
        error: function (result) {
            $('#recVIP').val("");
            $('#recStatus').html("No locations available");
            sessionTimeout(result);
        }
    });
}

function initSnapshotSelect(selectElement, psId) {
    selectElement.select2({
        placeholder: 'Select a Snapshot',
        ajax: {
            url: 'api/protected_systems/' + psId + '/snapshots',
            type: 'POST',
            delay: 250,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            data: function(params) {
                var body = {};

                if (params.term) {
                    body.filters = getTimeObject(params.term);
                }

                return JSON.stringify(body);
            },
            processResults: function(res) {
                return {
                    results: res.map(function(snapshotId) {
                        return {
                            id: snapshotId,
                            text: getSnapshotTimeString(snapshotId)
                        };
                    })
                };
            }
        }
    }).data('select2').$dropdown.addClass('select2-container-modal');
}

function getLastNetworkRecoveryJob(psid, callbackSuccess) {
  $.ajax({
      type: "POST",
      url: `api/protected_systems/${psid}/get_last_network_recovery_job`,
      contentType: "application/json; charset=utf-8",
      success: function (data) {
        callbackSuccess(data);
      },
      error: function (err) {
          sessionTimeout(err)
      }
  });
}

function showIncrementalRecoveryDialog() {
  const psid = $('#psdUUID').text();

  $('#incRecoveryPSName').empty();
  $('#incRecoveryLocation').empty();
  $('#incRecFinalizeRecovery').prop('checked', false);

  getLastNetworkRecoveryJob(psid, (data) => {
    if (data.status === 'ok') {
      const optionsPSName = `<option value="">${data.result.systemName}</option>`;
      const optionsLocation = `<option value="">${data.result.locationName}</option>`;

      $('#incRecoveryPSName').append(optionsPSName);
      $('#incRecoveryLocation').append(optionsLocation);
    }
    else {
      showModalAlertWithTimeout(data.msg);
      $("#incrementalRecoveryProtectedSystem").modal('hide');
    }
  });

  $('#incRecoverSave').off('click').on('click', () => {
    const finalizeRecovery = $('#incRecFinalizeRecovery').is(':checked');
    recoverIncremental(psid, finalizeRecovery);
  });
}

function recoverIncremental(psid, finalizeRecovery) {
  var data = {};
  data.finalizeRecovery = finalizeRecovery;
  data.psId = psid;
  $.ajax({
        type: "POST",
        url: '/api/utilities/abc/startIncrementalRecovery',
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            showModalAlertWithTimeout(data.msg);
        },
        error: function (result) {
            $('#recVIP').val("");
            $('.hide').hide();
            sessionTimeout(result);
        }
  });
  $("#incrementalRecoveryProtectedSystem").modal('hide');
}

function recoverPSNow(uri, psid, ip, snapid, locationName) {
    psid = $('#recPSList').val();
    psid = psid.split('$azp$');
    var data = {};
    data.vaultIp = ip;
    data.psId = psid[0];
    data.psName = psid[1];
    data.baseSnapshot = snapid;
    data.locationName = locationName;
    data.finalizeRecovery = $('#recFinalizeRecovery').is(':checked') || !$('#recFinalizeRecovery').is(':visible')
    $.ajax({
        type: "POST",
        url: uri,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            showModalAlertWithTimeout(data.msg);
        },
        error: function (result) {
            $('#recVIP').val("");
            $('.hide').hide();
            sessionTimeout(result);
        }
    });
    $("#recoverProtectedSystem").modal('hide');
}

function showBootVmScreenshot(psName, psId) {
    $('#boot-vm-screenshot-img').attr('src', '/bootVMImages/' + psName + '_' + psId + '.jpeg');
    $('#bootVMScreenshot').modal('show');
}

function shouldHideAdvancedAutoVerifyResults(value, operation) {
    return value.uiVisibilityState.showCloudAutoverifySections && !value.bootVMChecksPolicy?.checkDiskFrequency && ['start_vss', 'chkdsk'].includes(operation);
}

function showBootVmDeepCheckDetails(value, details, deepCheckSuccess, type) {
    type = type || "deepCheck";
    var style = deepCheckSuccess ? "font-weight: bold; color: green" : "";
    details = '<h5 style="' + style +'">'  + details + '</h5>';
    $('#boot-vm-deepcheck-details').html(details + "(details are loading...)");
    var uri = '/api/protected_systems/' + value._id + '/get_deepcheck_details';
    $.ajax({
        type: "POST",
        url: uri,
        data: JSON.stringify({"check_type": type}),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            var detailSegments = Object.keys(data).map(function (operation) {
                if (shouldHideAdvancedAutoVerifyResults(value, operation)) return;
                var extraStyle = data[operation].success ? 'color: green;' : '';
                var r = '<h5 style="font-weight: bold;' + extraStyle + '">' + replaceDeepCheckKeysWithReadableForUI(encodeHtmlEntities(operation)) +
                  (data[operation].success ? ' PASSED' : ' FAILED') +
                  (data[operation].snapshot_time ? ' for snapshot ' + snapDT(data[operation].snapshot_time, false) : '') + ': ' +
                  encodeHtmlEntities(data[operation].summary) + '</h5>';
                if (data[operation].details_file_contents) {
                    r += '<pre id="deepcheckdetailsfile-' + operation + '" class="codebox" style="max-height: 320px; overflow: auto;">';
                    r += encodeHtmlEntities(data[operation].details_file_contents) + '</pre><br />'
                }
                return r
            });

            if (!deepCheckSuccess) {
                if (detailSegments.length > 0) {
                    details += '<h5 style="font-weight: bold;">Last AutoVerify results:</h5>'
                }
                detailSegments.unshift(details);
            }

            $('#boot-vm-deepcheck-details').html(detailSegments.join("<br />"));
            // most relevant operation content (the results) is typically at the end, so show that by default
            // browser doesn't setup scrollbars until content is rendered, have to trigger this on timer
            setTimeout(function() {
                Object.keys(data).forEach(function (operation) {
                    var e = $('#deepcheckdetailsfile-' + operation);
                    //if (e){ e.scrollTop(e[0].scrollHeight); }
                    if (e){ e.scrollTop(1E10); }
                });
            }, 300);
        },
        error: function (result) {
            $('#boot-vm-deepcheck-details').html(details + "(failed to load all details)");
        }
    });
    $('#bootVMDeepCheckDetails').modal('show');
}

function getLocalCacheState(psId) {
    var uri = '/api/protected_systems/' + psId + '/get_local_cache_state';
    var local_cache_state = {};
    $.ajax({
        type: "GET",
        url: uri,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: false,
        success: function (data) {
          local_cache_state = data;
        },
        error: function (errMsg) {
            modalalert('showalerts', errMsg.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(errMsg);
        }
    });
    return local_cache_state;
}

function getFeatureFlag(name, callbackSuccess) {
  $.ajax({
      type: "POST",
      url: "api/utilities/abc/get_feature_flag",
      contentType: "application/json; charset=utf-8",
      async: false,
      data: JSON.stringify({"name": name}),
      success: function (data) {
        callbackSuccess(data);
      },
      error: function (err) {
          sessionTimeout(err)
      }
  });
}

function storeRetentionLimits(onSuccessCallback) {
  $.ajax({
      type: "POST",
      url: "api/utilities/abc/getRetentionLimits",
      success: function (limits) {
        let data = limits.data;
        let retentionEnabled = Object.keys(data).length > 0;
        $(".retention-min-max").toggle(retentionEnabled);

        $.jStorage.set(IS_RETENTION_LIMITED, retentionEnabled);

        if (!retentionEnabled) {
          return;
        }

        setRetentionLimit(RETENTION_LIMITS_ALL, "MIN", data.allDaysMin);
        setRetentionLimit(RETENTION_LIMITS_ALL, "MAX", data.allDaysMax);
        setRetentionLimit(RETENTION_LIMITS_DAILY, "MIN", data.DailyMin);
        setRetentionLimit(RETENTION_LIMITS_DAILY, "MAX", data.DailyMax);
        setRetentionLimit(RETENTION_LIMITS_WEEKLY, "MIN", data.WeeklyMin);
        setRetentionLimit(RETENTION_LIMITS_WEEKLY, "MAX", data.WeeklyMax);
        setRetentionLimit(RETENTION_LIMITS_MONTHLY, "MIN", data.MonthlyMin);
        setRetentionLimit(RETENTION_LIMITS_MONTHLY, "MAX", data.MonthlyMax);
        setRetentionLimit(RETENTION_LIMITS_YEARLY, "MIN", data.YearlyMin);
        setRetentionLimit(RETENTION_LIMITS_YEARLY, "MAX", data.YearlyMax);

        onSuccessCallback && onSuccessCallback();
      },
      error: function (err) {
          sessionTimeout(err)
      }
  });
}

function getMinMaxLabel(min, max, type) {
  const plural = max > 1 ? 's' : '';
  return `(${min} - ${max} ${type}${plural})`;
}

function getRetentionLimitsKey(type, minOrMax) {
  return `${IC_VAULT_MIN_MAX_RETENTION}_${type.toUpperCase()}_${minOrMax.toUpperCase()}`;
}

function setRetentionLimit(type, minOrMax, value) {
  return $.jStorage.set(getRetentionLimitsKey(type, minOrMax), value);
}

function getRetentionLimit(type, minOrMax) {
  return $.jStorage.get(getRetentionLimitsKey(type, minOrMax));
}

function getMinMaxRetentionDescription(type, label) {
  const minValue = getRetentionLimit(type, 'MIN');
  const maxValue = getRetentionLimit(type, 'MAX');

  return getMinMaxLabel(minValue, maxValue, label);
}

function isRetentionLimited() {
  return $.jStorage.get(IS_RETENTION_LIMITED);
}

function updateRetentionLimits() {
  $("#min-max-basic-all").text(getMinMaxRetentionDescription(RETENTION_LIMITS_ALL, "Day"));
  $("#min-max-custom-all").text(getMinMaxRetentionDescription(RETENTION_LIMITS_ALL, "Day"));
  $("#min-max-custom-daily").text(getMinMaxRetentionDescription(RETENTION_LIMITS_DAILY, "Day"));
  $("#min-max-custom-weekly").text(getMinMaxRetentionDescription(RETENTION_LIMITS_WEEKLY, "Week"));
  $("#min-max-custom-monthly").text(getMinMaxRetentionDescription(RETENTION_LIMITS_MONTHLY, "Month"));
  $("#min-max-custom-yearly").text(getMinMaxRetentionDescription(RETENTION_LIMITS_YEARLY, "Year"));
}

function getRetentionSettingBySystemType(systemType, retentionSetting) {
  return {
      ...(systemType === 'SERVER' ? retentionSetting.server : retentionSetting.desktop),
      description: retentionSetting.description,
      id: retentionSetting._id,
  }
}

function fillRetentionPolicies(selectedId, systemType) {
  var data = fetchDataForPSTableFrom('retentions/abc/show');
  var $select = $('#retention-policy');
  var hadRetentionPolicy = false;

  $select.find('option:not(:first-child)').remove();
  $.each(data, function(index, item) {
    if (item._id === selectedId) {
      hadRetentionPolicy = true;
    }
    var $option = $('<option>', {
      value: item._id,
      text: item.name,
      selected: item._id === selectedId,
      'data-values': JSON.stringify(getRetentionSettingBySystemType(systemType, item))
    });
    $select.append($option);
  });

  $select.data('hadRetentionPolicy', hadRetentionPolicy);
}

function fillRetentionValuesInForm(retentionSettings) {
  if (retentionSettings.method === 'basic') {
    $('#basic-all').val(retentionSettings.parameters.allDays);
  } else if (retentionSettings.method === 'custom') {
    $('#custom-all').val(retentionSettings.parameters.allDays);
    $('#custom-daily').val(retentionSettings.parameters.dailyDays);
    $('#custom-weekly').val(retentionSettings.parameters.weeklyWeeks);
    $('#custom-monthly').val(retentionSettings.parameters.monthlyMonths);
    $('#custom-yearly').val(retentionSettings.parameters.yearlyYears);
    updateAfterDays(retentionSettings.parameters.allDays);
  }
}

function getSelectedRetentionData() {
    const selectedOption = $('#retention-policy option:selected');
    const data = selectedOption.data('values');
    data.name = selectedOption.text();
    return data;
}

function getRetentionPSSettingKey(psid) {
  return 'retention-' + psid;
}

function updateRetentionPolicySection(currentRetentionSettings, isFixedRetention) {
  if (isFixedRetention == true) {
    $('#ps-retention-policy').html("Storage License");
  }else{
    $('#ps-retention-policy').html(currentRetentionSettings?.name ?? "No policy assigned");
  }
  updateRetentionMethodDescription(currentRetentionSettings, '#ps-retention-description');
}

function refreshRetentionFields(retentionSettings, retentionId, systemType, isFixedRetention) {
    fillRetentionPolicies(retentionId, systemType);
    const currentRetentionSettings = retentionId ? getSelectedRetentionData(): retentionSettings;
    $.jStorage.set('current-retention-ps', currentRetentionSettings);
    updateRetentionPolicySection(currentRetentionSettings, isFixedRetention);
}

function retentionDescriptionFor(type, quantity, afterDays) {
    if (type === 'all') {
        if (quantity === -1) {
            return 'Retain all snapshots forever.';
        }

        return 'Retain all snapshots for ' + quantity + ' day' + (quantity === 1 ? '.' : 's.');
    }

    if (quantity === -1) {
        return 'Retain last snapshot of ' + type + ' forever.';
    } else if (quantity === 0) {
        return 'Do not retain last snapshot of ' + type + '.';
    }

    return 'Last snapshot of ' + type + ' for ' + quantity + ' ' + type + (quantity === 1 ? '.' : 's.');
};

function updateRetentionMethodDescription(retentionSettings, container, retentionSettings2) {
    var description;
    var retentionMethod = retentionSettings.method;
    var parameters = retentionSettings.parameters;
    var params2 = retentionSettings2 ? retentionSettings2.parameters : null;

    function wrapInStrongTagIf(content, condition) {
      return condition ? '<strong>' + content + '</strong>' : content;
    }

    function applyStrongIfDifferent(field, content) {
        return wrapInStrongTagIf(content, retentionSettings2 && parameters[field] < (params2[field] === -1 ? Infinity : params2[field]));
    }

    if (retentionMethod === 'basic') {
        description = '<ul>' +
                          '<li>' + wrapInStrongTagIf('Basic retention', retentionSettings2 && retentionSettings2.method == 'custom') + '</li>' +
                          '<li>' + applyStrongIfDifferent('allDays', retentionDescriptionFor('all', parameters.allDays)) + '</li>' +
                      '</ul>';
    } else if (retentionMethod === 'custom') {
        description = '<ul>' +
                          '<li>' + 'Tiered retention' + '</li>' +
                          '<li>' + applyStrongIfDifferent('allDays', retentionDescriptionFor('all', parameters.allDays)) + '</li>' +
                          '<li>After ' + parameters.allDays + ' days, retain:' +
                              '<ul>' +
                                  '<li>' + applyStrongIfDifferent('dailyDays', retentionDescriptionFor('day', parameters.dailyDays, parameters.allDays)) + '</li>' +
                                  '<li>' + applyStrongIfDifferent('weeklyWeeks', retentionDescriptionFor('week', parameters.weeklyWeeks, parameters.allDays)) + '</li>' +
                                  '<li>' + applyStrongIfDifferent('monthlyMonths', retentionDescriptionFor('month', parameters.monthlyMonths, parameters.allDays)) + '</li>' +
                              '</ul>' +
                          '</li>' +
                          '<li>' + applyStrongIfDifferent('yearlyYears', retentionDescriptionFor('year', parameters.yearlyYears, parameters.allDays)) + '</li>' +
                      '</ul>';
    }

    $(container).html(description);
}

function loadRetentionPolicySettings() {
  updateRetentionPolicy($.jStorage.get('current-retention-ps'));
}

function updateRetentionMethod() {
    const retentionPolicyName = $('#retention-policy').val();
    let retentionMethod = $('[name="retention-method"]:checked').val();
    let retentionPolicy = retentionPolicyName !== UNASSIGNED_RETENTION ? getSelectedRetentionData() : $.jStorage.get('current-retention-ps');

    $('#basic-fields').toggle(retentionMethod !== 'custom');
    $('#custom-fields').toggle(retentionMethod === 'custom');
    fillRetentionValuesInForm(retentionPolicy);
}

function updateRetentionPolicy(currentPolicy) {
    if (currentPolicy) {
        $('#retention-policy').val(currentPolicy?.id ?? UNASSIGNED_RETENTION);
    }

    const retentionPolicyName = $('#retention-policy').val();
    const isUnassigned = retentionPolicyName === UNASSIGNED_RETENTION;
    let selectedPolicy = currentPolicy ?? (!isUnassigned ? getSelectedRetentionData() : null);

    $("#retention-description").html(selectedPolicy?.description ?? getUnassignedPolicyDescription());

    if (selectedPolicy) {
        $("input[name=retention-method][value='" + selectedPolicy.method + "']").prop('checked', true);
        $('#basic-fields').toggle(selectedPolicy.method !== 'custom');
        $('#custom-fields').toggle(selectedPolicy.method === 'custom');

        fillRetentionValuesInForm(selectedPolicy);
    }

    $('#retention-type, #basic-fields input, #custom-fields input').prop('disabled', retentionPolicyName !== UNASSIGNED_RETENTION);
}

function getUnassignedPolicyDescription() {
    return "<i>Unassigned</i> means that this protected system is not linked to an existing retention policy and must be manually managed";
}

function viewD(psid) {
    $.jStorage.set("psystemid", psid);
    window.location.href = "#protectedSystemDetails";
}

function replaceDeepCheckKeysWithReadableForUI(str) {
  var counterparts = {
    start_vss: 'vss check',
  };
  var res = str;
  $.each(counterparts, function(key, readable) {
    res = res.replace(new RegExp(key, 'g'), readable);
  });
  return res;
}

function getAutoverifyIcon(aData) {
  if (aData.osType === 'MACOS') {
    return null;  // Autoverify is not available for MacOS
  }

  if (isInfinityCloudVault() && !aData.d2c || aData.uiVisibilityState.isLinuxOs) {
    return null;  // Autoverify is not available for not D2C PS on IC vaults
  }

  var psIsHealthy = isInfinityCloudVault() && aData.d2c ? aData.cloudAutoVerifyIsHealthy : aData.deepCheckIsHealthy;

  if (psIsHealthy === undefined){
    return "<a><span class='icon-search-big table-icon' title='AutoVerify Disabled'</span></a>";
  }

  if (aData?.bootVMChecksPolicy?.checkDiskFrequency === 0 &&
    /heartbeat PASSED/.test(aData?.cloudAutoVerifySummary)
    ) {
    psIsHealthy = true;
  }

  if (!psIsHealthy) {
    return "<a><span class='icon-search-big table-icon table-icon-failure' title='AutoVerify Failure'</span></a>";
  } else {
    return "<a><span class='icon-search-big table-icon table-icon-success' title='AutoVerify Success'</span></a>";
  }
}

function getLocalCacheIcon(type, hint){
  type = type == "disabled" ? "" : "table-icon-" + type;
  return "<a><span class='icon-local-cache table-icon " + type + "' alt='Local Cache State' title='" + hint + "'</span></a>";
}

function createLocalCacheDescription(state){
  $("#local_cache_icon").html(getLocalCacheIcon(state.icon_type, state.icon_hint));
  $("#local-cache-enabled").html(state.enabled ? "Enabled" : "Disabled");
  $("#local_cache_verification_status").html(state.verification_status);
  $("#local_cache_last_check").html(state.last_check);
  $("#local_cache_last_successful_check").html(state.last_successful_check);
  if (state.path){
    $("#local_cache_path").html(state.path);
    $("#local_cache_path_block").show();
  }else{
    $("#local_cache_path_block").hide();
  }
}


function isPsEncrypted(psId) {
  let isEncrypted = $.jStorage.get('encrypted-' + psId);
  if (isEncrypted === null) {
    let ps = fetchProtectedSystem(psId);
    isEncrypted = ps.encrypted;
    $.jStorage.set('encrypted-' + psId, isEncrypted);
  }

  return isEncrypted
}


function toggleAgentConfigSaveButton() {
  const isEncrypted = isPsEncrypted($.jStorage.get('psystemid'))
  if (isEncrypted && $('#psPasswordAgentSettings').val() === "") {
    $('#agentSettingsSaveBtn').attr("disabled", "disabled");
  } else {
    $('#agentSettingsSaveBtn').removeAttr('disabled');
  }
}

function stripUnallowedCharatersFromAlias() {
  let inputValue = $(this).val();

  // removing special characters
  inputValue = inputValue.replace(/[`~@$%^&*/\[\]{}|;:'",<>()]/g, "");
  // removing non-ascii characters
  inputValue = inputValue.replace(/[^\x00-\x7F]/g, '');

  $(this).val(inputValue);
}

function displayVolumeBlock(value) {
  value.volumeMap = {};
    var cluster = value.cluster;
    var vol = value.volumes.sort();
    $('#volDetails').empty();
    var sam = {};
    var nat = new Array();
    $.each(vol, function (i, vval) {
        if(!vval.mountPointNames.length || !shouldShowVolume(cluster, vval)) {
            return true;  // continue
        }

        let volumesData = prepareVolumesData(vval);

        nat.push(volumesData.mntPoint);

        sam[volumesData.mntPoint] = '<div class="secondary-section-name">' + (volumesData.mntPoint === "[]" ? "System" : volumesData.mntPoint ) + (vval.csvId ? ' (CSV)' : '') + '</div><div class="nested-content"><div><b>GUID: </b>' + volumesData.uuid + '</div><div><b>Total Space: </b>' + Math.abs(volumesData.tspace).toFixed(2) + ' GB</div><div><b>Used Space: </b>' + volumesData.uspace + '</div></div>';

        value.volumeMap[volumesData.uuid] = volumesData.mntPoint;
    });
    nat.sort();

    for (var s = 0; s < nat.length; s++) {
        $('#volDetails').append(sam[nat[s]]);
    }
    sam = null;
    nat = null;

    if (value.excludedVolumes && value.excludedVolumes.length > 0) {
        var exVol = value.excludedVolumes.sort();
        $('#exVolDetails').empty();
        var sam = {};
        var nat = new Array();
        $.each(exVol, function (i, vval) {
            if(!vval.mountPointNames.length) {
              return true;
            }
            let volumesData = prepareVolumesData(vval);
            nat.push(volumesData.mntPoint);
            sam[volumesData.mntPoint] = '<div class="secondary-section-name">' + (volumesData.mntPoint === "[]" ? "System" : volumesData.mntPoint ) + '</div><div class="nested-content"><div><b>GUID: </b>' + volumesData.uuid + '</div><div><b>Total Space: </b>' + Math.abs(volumesData.tspace).toFixed(2) + ' GB</div><div><b>Used Space: </b>' + volumesData.uspace + '</div><div><b>Reason: </b>' + volumeExclusionReasons[vval.reason] + '</div></div>';
        });
        nat.sort();

        for (let s = 0; s < nat.length; s++) {
            $('#exVolDetails').append(sam[nat[s]]);
        }
        sam = null;
        nat = null;
    }
}

function displayFolderBlock(value) {
    $("#folderDetails").empty();
    if (value.syncedFolders) {
        const folders = value.syncedFolders.sort();

        folders.forEach(function(folder) {
            $("#folderDetails").append(`<div class="secondary-section-name">${folder.path}</div>`);
        });
    }
}

function expandStoragePoolAccordion() {
  if (!$("#storagepool").hasClass("panel-collapse in")) {
        storageInitialized();
    }
}

function viewDetails(psid) {
    setTimeout("$('#showalerts').modal('hide');", 3000);
    if ($.fn.dataTable.isDataTable("#psdTable")) {
        $("#psdTable").DataTable().clear().destroy().draw();
    }
    if (inIFrame()) {
        $('#aIP').parent().hide()
    }
    $("#bootVM").modal("hide");
    var mid = "";
    if (psid != undefined) {
        $.jStorage.set("psystemid", psid);
    }
    if ($.jStorage.get("psystemid") != undefined) {
        psid = $.jStorage.get("psystemid");
    }

    var ps_resp = $.ajax({
        url: "api/protected_systems/" + psid,
        async: false
    });

    if (showSessionTimedOutIfUnauthorized(ps_resp.responseText, ps_resp.status)) {
        return false;
    }

    var value = ps_resp.responseJSON;

    $.jStorage.set("pmachineid", value.machineId);
    $.jStorage.set("osType", value.osType);

    // Configuration object mapping element IDs to visibility state keys
    var elementConfig = {
      showAgentVersion: { on: ['#agent-version-row'] },
      isD2CEnabled: { on: ['#scheduleNow', '#missed-backup-alert-block'] },
      showCsvBlock: { on: ['#agent-csv-block'] },
      isRetentionChangeAllowed: { on: ['.retention-edit-button'], off: [] },
      showRunAnalysisTool: { on: ['#show-rat-dialog-btn'] },
      showRunAnalysisToolAdvanced: { on: ['#runAnalysisTool'] },
      showSrExport: { on: ['#sr-export'], off: [] },
      showAgentSettings: { on: ['#agent-settings-btn'], off: [] },
      showUninstallAgent: { on: ['#uninstallAgentWrapper'], off: [] },
      isIncrementalRecoveryInProgress: { on: ['#psDetailsRecover'], off: ['#psDetailsActions', '#psDetailsConfigure'] },
      isMigrationRunning: { on: ['#sMigrate'], off: ['#Migrate'] },
      configFastDeltaOn: { on: ['#configFastDeltaOn-row'] },
      showConfigureOptional: { on: ['#ps-section-configure-optional'] },
      showDiskFilesystemCheckSection: { on: ['#diskFilesystemCheckSection'], off: [] },
      showExVolBlock: { on: ['#exVolBlock'], off: [] },
      showVolumeBlock: { on: ['#volBlock'], off: [] },
      showFolderBlock: { on: ['#folderBlock'], off: [] },
    };

    if (value.osType == OS_TYPE_LINUX) {
        elementConfig.isLinuxOs = { on: ['#agent-local-cache-panel'], off: ['#bootVM-btn', '#boot-vm-screenshot-block', '#boot-vm-screenshot', '#boot-vm-deepcheck', '#boot-vm-deepcheck-block'] }
    } else if (value.osType == OS_TYPE_MACOS) {
        elementConfig.isMacOs = { on: [], off: ['#bootVM-btn', '#boot-vm-screenshot-block', '#boot-vm-screenshot', '#boot-vm-deepcheck', '#boot-vm-deepcheck-block', '#agent-local-cache-panel'] }
    } else if (value.osType == OS_TYPE_WINDOWS) {
        elementConfig.isWindowsOs = { on: ['#bootVM-btn', '#boot-vm-screenshot-block', '#boot-vm-screenshot', '#boot-vm-deepcheck', '#boot-vm-deepcheck-block', '#agent-local-cache-panel'], off: [] }
    }

    function toggleElements(elements, condition) {
      elements.forEach(function(elementId) {
        condition ? $(elementId).show() : $(elementId).hide();
      });
    }

    // Update the visibility of each UI element based on the visibility state
    for (var visibilityKey in elementConfig) {
      if (elementConfig.hasOwnProperty(visibilityKey)) {
        var config = elementConfig[visibilityKey];
        var isTrue = value.uiVisibilityState[visibilityKey];

        toggleElements(config.on || [], isTrue);
        toggleElements(config.off || [], !isTrue);
      }
    }

    $('#autoVerifyContent').toggle(value.uiVisibilityState.autoVerifyContent)

    // Special case for 'uninstallAgentWrapper': uncheck 'uninstallAgent' when it's shown
    if (value.uiVisibilityState.showUninstallAgent) {
      $('#uninstallAgent').prop('checked', false);
    }

    $("#alias-input").off("input").on("input", stripUnallowedCharatersFromAlias);

    $('#agent-advanced-settings_label')
        .toggle(value.uiVisibilityState.showAgentSettingsAdvanced && !value.uiVisibilityState.isMacOs);

    // Special case for 'showAgentSettings': add event handler for 'psPasswordAgentSettings'
    if (value.uiVisibilityState.showAgentSettingsAdvanced) {
      $('#psPasswordAgentSettings').on('keyup paste', toggleAgentConfigSaveButton);
    }

    $('#agent-fast-delta_label').toggle(value.uiVisibilityState.showFastDelta);

    // Special case for 'configFastDeltaOn'
    if (value.uiVisibilityState.configFastDeltaOn !== null) {
      $('#configFastDeltaOn').html(value.uiVisibilityState.configFastDeltaOn ? "On" : "Off");
      $('#fast-delta-state').show();
    } else {
      $('#fast-delta-state').hide();
    }

    $('#psPasswordAgentSettingsWrapper').toggle(value.encrypted);

    $('#agentVersion').html(value.agentVersion);

    if (!value.isEnabled) {
        $('#scheduleNow').attr("disabled", "disabled");
    } else {
        $('#scheduleNow').removeAttr("disabled");
    }

    mid = value.machineId;
    $('#midps').val(mid);
    $('#psdUUID').html(value.uuid);
    $("#schNow").css("display", "block");

    storeRetentionLimits(updateRetentionLimits);
    refreshRetentionFields(value.retentionMethod, value.retentionId, value.systemType, value.fixedRetention);

    if (value.fixedRetention) {
        $("#change-retention-method-button").hide();
    }

    $('#alerthrs').val(value.missedBackupAlertHours);
    $('#missed-backup-alert').html(value.missedBackupAlertHours ? value.missedBackupAlertHours + ' Hours' : 'Never');

    var rSize = parseInt(value.ramCapacity) / 1073741824;
    if (Math.round(rSize) === 0) {
        rSize = parseInt(value.ramCapacity) / 1048576;
        rSize = Math.ceil(rSize) + ' MB';
    } else {
        rSize = Math.ceil(rSize) + ' GB';
    }

    var now = parseInt(value.architecture);
    var architecture = now === 1 ? " x86" : now === 2 ? " x64" : now === 3 ? " arm64" : " ?";

    if (value.storage_used_bytes !== undefined && value.storage_used_bytes) {
      var rsSize = (parseInt(value.storage_used_bytes) / 1048576);
      if (rsSize < 1024) {
        rsSize = (rsSize).toFixed(2) + ' MB';
      } else if (rsSize < 1048576) {
        rsSize = (parseInt(rsSize) / 1024);
        rsSize = (rsSize).toFixed(2) + ' GB';
      } else {
        rsSize = (parseInt(rsSize) / 1048576);
        rsSize = (rsSize).toFixed(2) + ' TB';
      }
      $('#storage-used').html(rsSize);
      $('#div-storage-used').show();
    } else {
    $('#div-storage-used').hide();
  }

    $("#titlename").text("Details: " + value.systemName);
    $('#sNameTitle').html(value.systemName);
    $('#sName').html(value.systemName);
    logo = "";
    $('#oName').html(filterOSName(value.osName));
    $('#sPack').html(value.servicePack);
    $('#gUid').html(value.uuid);
    $('#rCapacity').html(rSize);
    $('#arch').html(architecture);
    $('#alias-field').html(value.alias || "");
    $('#alias-input').val(value.alias || "");
    $.jStorage.set('alias-' + psid, value.alias);
    $.jStorage.set('encrypted-' + psid, value.encrypted);

    //Agent Configuration
    if (value.agentConfig) {
        $(".agent-settings-checkbox").prop("checked", false);
        $(".agent-field").attr('disabled', 'disabled');
        $(".agent-field").val("");

        //General Settings
        if (typeof(value.agentConfig.BACKUP_VOLUMES) != "undefined") {
            $("#agent-backup-volumes-checkbox").prop("checked", true);
            $("#agent-backup-volumes").removeAttr('disabled');
            $("#agent-backup-volumes").val(value.agentConfig.BACKUP_VOLUMES);
        }
        if (typeof(value.agentConfig.USE_COMPRESSION) != "undefined") {
            $("#agent-compression-checkbox").prop("checked", true);
            $("#agent-compression").removeAttr('disabled');
            $("#agent-compression").val(value.agentConfig.USE_COMPRESSION == "true" ? value.agentConfig.COMPRESSION_LEVEL : "");
        }
        if (typeof(value.agentConfig.USE_FASTDELTA) != "undefined") {
            $("#agent-fast-delta-checkbox").prop("checked", true);
            $("#agent-fast-delta").removeAttr('disabled');
            $("#agent-fast-delta").val(value.agentConfig.USE_FASTDELTA);
        }

        //Advanced Settings
        if (typeof(value.agentConfig.NUM_CONNECTIONS) != "undefined") {
            $("#agent-number-of-connections-checkbox").prop("checked", true);
            $("#agent-number-of-connections").removeAttr('disabled');
            $("#agent-number-of-connections").val(value.agentConfig.NUM_CONNECTIONS);
        }
        if (typeof(value.agentConfig.NUM_WORKERS) != "undefined") {
            $("#agent-number-of-workers-checkbox").prop("checked", true);
            $("#agent-number-of-workers").removeAttr('disabled');
            $("#agent-number-of-workers").val(value.agentConfig.NUM_WORKERS);
        }
        if (typeof(value.agentConfig.IGNORE_MOUNT) != "undefined") {
            $("#agent-ignored-mount-points-checkbox").prop("checked", true);
            $("#agent-ignored-mount-points").removeAttr('disabled');
            $("#agent-ignored-mount-points").val(value.agentConfig.IGNORE_MOUNT);
        }
        if (typeof(value.agentConfig.ENABLE_CSV) != "undefined") {
            $("#agent-csv-checkbox").prop("checked", true);
            $("#agent-csv").removeAttr('disabled');
            $("#agent-csv").val(value.agentConfig.ENABLE_CSV);
        }

        //Local Cache Settings
        if (typeof(value.agentConfig.LOCAL_CACHE_PATH) != "undefined") {
            $("#agent-path-checkbox").prop("checked", true);
            $("#agent-path").removeAttr('disabled');
            $("#agent-path").val(value.agentConfig.LOCAL_CACHE_PATH);
        }
        if (typeof(value.agentConfig.LOCAL_CACHE_USER_NAME) != "undefined") {
            $("#agent-username-checkbox").prop("checked", true);
            $("#agent-username").removeAttr('disabled');
            $("#agent-password").removeAttr('disabled');
            $("#agent-username").val(value.agentConfig.LOCAL_CACHE_USER_NAME);
        }
    }
    //.Agent Configuration

    var encImg = value.encrypted ? 'Yes' : 'No';
    $('#encrypt').html(encImg);
    var enabled = value.isEnabled ? 'Yes <span class="icon-checkmark-circular icon-color-green"></span>' : 'No <span class="icon-restricted icon-color-red" title="Client Disabled or Deleted"></span>';
    $('#enabled').html(enabled);

    var bootVmScreenshot;
    if(!value.uiVisibilityState.isLinuxOs) {
      if (value.bootVMCheck) {
        $('#bVm').prop('checked', true);
        $('#bootlabelid').css('background-color', '#4596ce');
        bootVmScreenshot = value.bootVMSnapshot ? '<a style="cursor: pointer;" onclick="showBootVmScreenshot(\'' + value.systemName + '\', \'' + value._id + '\')">' + snapDT(value.bootVMSnapshot, true) + ' <img src="style/images/bvmsnapimg.jpeg" height="32" width="32" title="Boot VM Screenshot" alt="Boot VM Screenshot" /></a>' : 'Not Available';
      } else {
        $('#bVm').prop('checked', false);
        $('#bootlabelid').css('background-color', '#d6d6d6');
        bootVmScreenshot = 'N/A';
      }
      $("#useSmartRecovery-bootVm-block").removeClass('unavailable');
      var useSmartRecoveryAvailable = false;
      if (!isInfinityCloudVault()) {
        useSmartRecoveryAvailable = smartRecoveryUsageCheck($("#useSmartRecovery-bootVm-block"), psid);
      }
      if (!useSmartRecoveryAvailable) {
        $("#useSmartRecovery-bootVm-block").addClass('unavailable');
      } else {
        $('#useSmartRecovery-bootVm').prop('checked', value.bootVMSmartRecovery == null ? true : value.bootVMSmartRecovery);
      }
      var bootVMChecked = $("#bVm").is(':checked')
      elementVisibility($("#useSmartRecovery-bootVm-block"), bootVMChecked);
      elementVisibility($("#useVirtio-bootVm-block"), bootVMChecked);
      $('#useVirtio-bootVm').prop('checked', !!value.bootVMVirtio);
      $('#boot-vm-screenshot').html(bootVmScreenshot);

      var bootVmDeepCheck;
      $('#boot-vm-deepcheck').off("click");
      if (value.deepCheckDetails) {
        value.deepCheckSummary = replaceDeepCheckKeysWithReadableForUI(value.deepCheckSummary);
        var healthSummary = value.deepCheckIsHealthy ? 'HEALTHY  <span class="icon-checkmark-circular icon-color-green"></span><br />' : 'NOT HEALTHY: <span class="icon-alarm icon-color-red"></span><br />';
        var safeDetails = value.deepCheckDetails.map(function (txt) {
          return replaceDeepCheckKeysWithReadableForUI(encodeHtmlEntities(txt));
        });
        bootVmDeepCheck = healthSummary + (value.deepCheckSummary ? ("<ul><li>" + value.deepCheckSummary.replace(/\n/g, "</li><li>") + "</li></ul>") : "Unknown problem");
        bootVmDeepCheck = '<a style="cursor: pointer;">' + bootVmDeepCheck + '</a>';
        $('#boot-vm-deepcheck').html(bootVmDeepCheck);
        $('#boot-vm-deepcheck').on("click", function () {
          showBootVmDeepCheckDetails(value, safeDetails.join("<br />"), value.deepCheck.success)
        });
      } else {
        $('#boot-vm-deepcheck').html("N/A");
      }
    }

    $('#local-cache').off("click");
    $('#div-local-cache').hide();
    var state = getLocalCacheState(value.uuid);
    if (state.visible) {
        createLocalCacheDescription(state);
        $('#div-local-cache').show();
    }

    $("#vseedCheck").prop("checked", value.seedingEnabled);
    if ($('#vseedCheck').is(':checked')) {
        $("#vseedCheck").prop("checked", true);
        $('#vaultreplabel').css("background-color", "#4596ce");
    } else {
        $("#vseedCheck").prop("checked", false);
        $('#vaultreplabel').css("background-color", "#d6d6d6");
    }

    $.ajax({
        type: 'POST',
        url: '/api/protected_systems/' + $.jStorage.get("psystemid") + '/isFirstBackup',
        data: JSON.stringify({}),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": $.jStorage.get("pmachineid")
        },
        dataType: "json",
        success: function (data) {
            if (data.result) {
                $('#incrementalBtnContainer').css('opacity', 0.5)
                $('#incremental').attr('disabled', 'disabled');
                $('#full').click();
            } else {
                $('#incrementalBtnContainer').css('opacity', 1)
                $('#incremental').removeAttr('disabled');
                $('#incremental').click();
            }
        }
    });

    if (window.glob == "vault") {
        //  $('#zfsLastSnapDetails').empty();
        var Snapdata = {};
        Snapdata.userName = value.userName;
        Snapdata.psid = value.uuid;
        $.ajax({
            type: 'POST',
            url: 'api/getLastSnapshot',
            data: JSON.stringify(Snapdata),
            contentType: "application/json; charset=utf-8",
            headers: {
                "Replibit-Server": $.jStorage.get("pmachineid")
            },
            dataType: "json",
            success: function (data) {
                if (data.bayFirstSnap && data.bayLastSnap) {
                    var Fsnap = (data.bayFirstSnap).split('@');
                    Fsnap = Fsnap[1];
                    var firstUnderscore = Fsnap.indexOf('_');
                    var secondUnderscore = Fsnap.indexOf('_', firstUnderscore + 4);
                    var date = Fsnap.substring(0, secondUnderscore);
                    Fsnapdate = date.replace(/_/g, "/");
                    var time = Fsnap.substring(secondUnderscore + 1);
                    var first = time.indexOf('_');
                    var second = time.indexOf('_', first + 2);
                    var split1 = time.substring(0, second);
                    Fsnaptime = split1.replace(/_/g, ":");
                    var H = +Fsnaptime.substr(0, 2);
                    var h = (H % 12) || 12;
                    var ampm = H < 12 ? "AM" : "PM";
                    Fsnaptime = h + Fsnaptime.substr(2, 3) + ampm;

                    var Lsnap = (data.bayLastSnap).split('@');
                    Lsnap = Lsnap[1];
                    var firstUnderscore = Lsnap.indexOf('_');
                    var secondUnderscore = Lsnap.indexOf('_', firstUnderscore + 4);
                    var date = Lsnap.substring(0, secondUnderscore);
                    Lsnapdate = date.replace(/_/g, "/");
                    var time = Lsnap.substring(secondUnderscore + 1);
                    var first = time.indexOf('_');
                    var second = time.indexOf('_', first + 2);
                    var split1 = time.substring(0, second);
                    Lsnaptime = split1.replace(/_/g, ":");
                    var H = +Lsnaptime.substr(0, 2);
                    var h = (H % 12) || 12;
                    var ampm = H < 12 ? "AM" : "PM";
                    Lsnaptime = h + Lsnaptime.substr(2, 3) + ampm;
                }

                $('#latest-snapshot').html(snapDT(data.zfsLastSnap, true));
                var filesWaiting = data.filesWaiting;
                if (data.filesWaiting !== 0) {
                    filesWaiting = data.filesWaiting + ' (from ' + Fsnapdate + ' ' + Fsnaptime + ' to ' + Lsnapdate + ' ' + Lsnaptime + ')';
                }
                $('#files-waiting').html(filesWaiting);
            },
            error: function (result) {
                modalalert('showalerts', 'Failed');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });

        if (value.bootVMChecksPolicy?.enabled && value.d2c) {
            let volumeMountCheck = "Not Yet Run";
            let volumeMountTested = "N/A";
            let volumeMountTestCompletedAt = "N/A";

            let cloudAutoVerify = value.cloudAutoVerify;
            let volume_mount_check = cloudAutoVerify?.volume_mount_check;

            if (volume_mount_check) {
              volumeMountCheck = volume_mount_check.success ? 'PASSED <span class="icon-checkmark-circular icon-color-green"></span>' : 'FAILED <span class="icon-alert-cross-circular icon-color-red"></span>';
              volumeMountTested = volume_mount_check.snapshot_time;
              volumeMountTestCompletedAt = volume_mount_check.completed_at;
            }

            let cloudBootVmScreenshot = "N/A";
            let cloudDeepcheckResults = cloudAutoVerify?.deepcheck_results;
            if (value.cloudVMSnapshot) {
                cloudBootVmScreenshot = value.cloudVMSnapshot ? '<a style="cursor: pointer;" onclick="showBootVmScreenshot(\'' + value.systemName + '\', \'' + value._id + '\')">' + cloudDeepcheckResults.heartbeat.snapshot_time + ' <img src="style/images/bvmsnapimg.jpeg" height="22" width="28" title="Boot VM Screenshot" alt="Boot VM Screenshot" /></a>' : 'Not Available';
            }

            let systemBootCheck = "Not Yet Run";
            let bootSnapshotTested = "N/A";
            let bootTestCompletedAt = "N/A";
            let heartbeatTest = "N/A";

            if(cloudDeepcheckResults) {
              systemBootCheck = cloudDeepcheckResults.heartbeat.success && value.cloudVMSnapshot ? 'PASSED <span class="icon-checkmark-circular icon-color-green"></span>' : 'FAILED <span class="icon-alert-cross-circular icon-color-red"></span>';
              bootSnapshotTested = cloudBootVmScreenshot;
              bootTestCompletedAt = cloudDeepcheckResults?.heartbeat.completed_at ?? "N/A";
              heartbeatTest = cloudDeepcheckResults?.heartbeat.success ? 'PASSED <span class="icon-checkmark-circular icon-color-green"></span>' : 'FAILED <span class="icon-alert-cross-circular icon-color-red"></span>';
            }

            let diskFilesystemCheck = "Not Yet Run";
            let diskSnapshotTested = "N/A";
            let diskTestCompletedAt = "N/A";
            let vssCheck = "N/A";

            if (cloudDeepcheckResults?.chkdsk && cloudDeepcheckResults?.start_vss) {
                diskFilesystemCheck = cloudDeepcheckResults.chkdsk.success && cloudDeepcheckResults.start_vss.success ? 'PASSED <span class="icon-checkmark-circular icon-color-green"></span>' : 'FAILED <span class="icon-alert-cross-circular icon-color-red"></span>';
                diskSnapshotTested = cloudDeepcheckResults.chkdsk.snapshot_time ?? "N/A";
                diskTestCompletedAt = cloudDeepcheckResults.chkdsk.completed_at ?? "N/A";
                vssCheck = cloudDeepcheckResults.start_vss.success ? 'PASSED <span class="icon-checkmark-circular icon-color-green"></span>' : 'FAILED <span class="icon-alert-cross-circular icon-color-red"></span>';
            }

            $('#volumeMountCheck').html(volumeMountCheck);
            $('#volumeMountTested').html(volumeMountTested);
            $('#volumeMountTestCompletedAt').html(volumeMountTestCompletedAt);

            $('#systemBootCheck').html(systemBootCheck);
            $('#bootSnapshotTested').html(bootSnapshotTested);
            $('#bootTestCompletedAt').html(bootTestCompletedAt);
            $('#heartbeatTest').html(heartbeatTest);

            $('#diskFilesystemCheck').html(diskFilesystemCheck);
            $('#diskSnapshotTested').html(diskSnapshotTested);
            $('#diskTestCompletedAt').html(diskTestCompletedAt);
            $('#vssCheck').html(vssCheck);

            $('#systemBootCheckBlock').off("click");
            $('#diskFilesystemCheckBlock').off("click");
            if (value.cloudAutoVerifyDetails) {
                var safeCloudDetails = value.cloudAutoVerifyDetails.map(function (txt) {
                    return replaceDeepCheckKeysWithReadableForUI(encodeHtmlEntities(txt));
                });
                $('#systemBootCheckBlock').on("click", function() {showBootVmDeepCheckDetails(value, safeCloudDetails.join("<br />"), cloudDeepcheckResults.heartbeat.success, "cloudAutoVerify")});
                $('#diskFilesystemCheckBlock').on("click", function() {showBootVmDeepCheckDetails(value, safeCloudDetails.join("<br />"), cloudDeepcheckResults.chkdsk.success && cloudDeepcheckResults.start_vss.success, "cloudAutoVerify")});
            }
        }
    }

    var nw = value.networkInterfaces;
    $('#nwDetails').empty();
    $.each(nw, function (i, nval) {
        var ipadd = JSON.stringify(nval.ipAddress);
        ipadd = ipadd.replace('["', "");
        ipadd = ipadd.replace('"]', "");
        var dhcpEnabled = nval.isDhcp ? 'Yes' : 'No';
        $('#nwDetails').append('<div class="separate-content-block"><div><b>Mac: </b>' + nval.mac + '</div><div><b>DHCP: </b>' + dhcpEnabled + '</div><div><b>IP Address: </b>' + ipadd + '</div></div>');
    });

    if(value.uiVisibilityState.showVolumeBlock) {
      displayVolumeBlock(value);
    } else if (value.uiVisibilityState.showFolderBlock) {
      displayFolderBlock(value);
    }

    // cluster shared volumes management in ps pane
    $('#csvDetails').empty();
    $('#cluster-shared-volumes-section').hide();
    if(value.cluster) {
        function timeConverter(UNIX_timestamp) {
            var a = new Date(UNIX_timestamp * 1000);
            var year = a.getFullYear();
            var month = monthNames[a.getMonth()];
            var date = a.getDate();
            var hour = a.getHours();
            var min = ('0' + a.getMinutes()).slice(-2);
            var sec = ('0' + a.getSeconds()).slice(-2);
            var time = month + ' ' + date + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;
            return time;
        }

        function faultStateToString(faultState) {
            if(faultState == 0) {
                return 'VolumeStateNoFaults';
            }
            var result = ''
            if(faultState & 1) {
                result += 'VolumeStateNoDirectIO';
            }
            if(faultState & 2) {
                result += ' VolumeStateNoAccess';
            }
            if(faultState & 4) {
                result += ' VolumeStateInMaintenance';
            }
            return result;
        }

        var backupStateString = ['VolumeBackupNone', 'VolumeBackupInProgress'];
        var inClusterStatusString = ['Undefined', 'Offline', 'Online', 'Attached'];

        var clusterDisks = [];
        if(value.cluster.disks) {
            clusterDisks = value.cluster.disks.sort();
        }
        $.each(clusterDisks, function (i, clusterDisk) {
            var clusterDiskName = 'name' in clusterDisk ? clusterDisk.name : '';
            var clusterName = 'name' in value.cluster ? value.cluster.name : '';
            var clusterDiskId = 'id' in clusterDisk ? clusterDisk.id : '';
            var clusterDiskStatus = ('status' in clusterDisk &&  clusterDisk.status > 0 && clusterDisk.status < 4) ? clusterDisk.status : 0;
            var sLastOnline = clusterDisk.lastOnline > 0 ? timeConverter(clusterDisk.lastOnline) : 'N/A';
            var sLastAttached = clusterDisk.lastAttached > 0 ? timeConverter(clusterDisk.lastAttached) : 'N/A';


            var diskDetails = '<div class="secondary-section-name">' + clusterDiskName + '</div><div class="nested-content">';

            diskDetails += '<div><b>Cluster: </b>' + clusterName + '</div>';
            diskDetails += '<div><b>Disk ID: </b>' + clusterDiskId + '</div>';
            diskDetails += '<div><b>Status: </b>' + inClusterStatusString[clusterDiskStatus] + '</div>';
            diskDetails += '<div><b>Last Online: </b>' + sLastOnline + '</div>';
            diskDetails += '<div><b>Last Attached: </b>' + sLastAttached + '</div>';

            diskDetails += '</div>';

            var clusterVolumes = clusterDisk.volumes.sort();
            $.each(clusterVolumes, function (i, clusterVolume) {
                if (clusterVolume.enabled) {
                    var clusterVolumeFriendlyName = 'volumeFriendlyName' in clusterVolume ? clusterVolume.volumeFriendlyName : '';
                    var csvDetails = '<div class="secondary-section-name">' + clusterVolumeFriendlyName + '</div><div class="nested-content">';

                    var clusterVolumeId = 'id' in clusterVolume ? clusterVolume.id : '';
                    var clusterVolumeOffset = 'offset' in clusterVolume ? clusterVolume.offset.toString() : '';
                    var clusterVolumePartitionNumber = 'partitionNumber' in clusterVolume ? clusterVolume.partitionNumber.toString() : '';
                    var clusterVolumeFaultState = 'faultState' in clusterVolume ? faultStateToString(clusterVolume.faultState) : 'Undefined';
                    var clusterVolumeBackupState = 'backupState' in clusterVolume ? backupStateString[clusterVolume.backupState] : 'Undefined';
                    var clusterVolumeName = 'volumeName' in clusterVolume ? clusterVolume.volumeName : '';
                    //var clusterVolumeEnabled = 'enabled' in clusterVolume ? 'Yes' : 'No');
                    var clusterVolumeLastBackup = ('lastBackup' in clusterVolume && clusterVolume.lastBackup > 0) ? timeConverter(clusterVolume.lastBackup) : 'N/A';

                    csvDetails += '<div><b>CSV ID: </b>' + clusterVolumeId + '</div>';
                    csvDetails += '<div><b>Offset in Disk: </b>' + clusterVolumeOffset + '</div>';
                    csvDetails += '<div><b>Partition number: </b>' + clusterVolumePartitionNumber + '</div>';
                    csvDetails += '<div><b>Fault state: </b>' + clusterVolumeFaultState + '</div>';
                    csvDetails += '<div><b>Backup state: </b>' + clusterVolumeBackupState + '</div>';
                    csvDetails += '<div><b>Volume name: </b>' + clusterVolumeName + '</div>';
                    csvDetails += '<div><b>Last backup: </b>' + clusterVolumeLastBackup + '</div>';

                    csvDetails += '</div>';
                    diskDetails += csvDetails;

                    $('#cluster-shared-volumes-section').show();
                }
            });

            $('#csvDetails').append(diskDetails);
        });
    }
    // here ends CSV volumes

    var nodeData = $.ajax({
        url: "api/nodes",
        async: false
    }).responseText;
    nodeData = (nodeData == undefined) ? "" : nodeData;
    if (showSessionTimedOutIfUnauthorized(nodeData)) {
        return false;
    }
    var nodes = {};
    nodeData = eval(nodeData);
    $.each(nodeData, function (index, value) {
        nodes[value.clusterMachineId] = value.ip + "#" + value.machineName;
    });
    if (mid != "") {
        var aip = nodes[mid];
        if (aip != undefined) {
            aip = aip.split("#");
            if (aip[0] == '127.0.0.1') {
                aip = location.host;
            } else {
                aip = aip[0];
            }
        } else {
            aip = "IP Not available";
            modalalert('showalerts', "Requested protected system machine not reachable.");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $('#psLink').click();
        }
        $('#aIP').html(aip);
        $("#agent-server-address").html(aip);
    }
    if ($('#aIP').html() == "IP address not available") {
        return false;
    }

    SnapshotsTable.refresh(value);

    getUsedSnapshots(psid, mid, value);
    $('#psdLink').click();

    if (window.glob == "vault") {
        $('.vaultschRep').hide();
        $('#schName').html("");
        if ($.jStorage.get("user") == "customer") {
            $('#ssAgeNumber').html('<div>' + value.snapshotsLivetime + ' Days</div>');
        }
    }

    if (!value.uiVisibilityState.isLinuxOs) {
      if (value.uiVisibilityState.showCloudAutoverifySections) {
        fixUndefinedTiredTestingPolicy(value);
        $('#bVm').prop('checked', value.enabled);
      }
      $('#saveBootVm').attr('onclick', 'setBootVM(' + value.encrypted + ')');
      $('#bVm').on("click", function () {
        if (!value.uiVisibilityState.showCloudAutoverifySections) {
          var bootVMChecked = $("#bVm").is(':checked');
          elementVisibility($("#useSmartRecovery-bootVm-block"), bootVMChecked);
          elementVisibility($("#useVirtio-bootVm-block"), bootVMChecked);
        }
      })
    }
    $('#lipslink').addClass('ui-btn-active');

    window.currentProtectedSystem = value;
}

function fixUndefinedTiredTestingPolicy(value){
  if (Boolean(value.bootVMChecksPolicy)) {
    return;
  }
  value.bootVMChecksPolicy = {};
  value.bootVMChecksPolicy.enabled = false;
  value.bootVMChecksPolicy.screenshotFrequency = 2;
  value.bootVMChecksPolicy.checkDiskFrequency = 0;
}

function getUsedSnapshots(psid, mid, value) {
    var mountname = "";
    var mountaction = "";
    var iscsiname = "";
    var iscsiaction = "";
    var vmname = "";
    var vmaction = "";
    var usage = value.snapshotUsage;
    var isEncryptf = "";
    isEncryptf = value.encrypted;
    var snapData = '<div class="table-responsive"><table border="0" class="display UsedSnapTable "><thead><tr><th style="width:50%">SNAPSHOT NAME</th><th style="width:50%">ACTIONS</th></tr></thead><tbody>';
    $("#snapTable").empty();
    var snapData1;
    var snapdiv = $("#snapTable");
    var mountdate = [];
    var iscsidate = [];
    var vmdate = [];
    var exportdate = [];
    var usageAxCloud = [];
    var snapmountName = [];
    var snapiscsiName = [];
    var snapvmName = [];
    var snapExportName = [];
    var usageAxCloudName = [];
    const AxCloudTypes = ["test_vm_recovery", "live_vm_recovery", "light_vm_recovery", "test_dral_recovery", "live_dral_recovery"];

    $.each(usage, function (k, v) {
        if (v == "testmount" || v == "livemount") {
            mountdate.push(k);
            mountaction = k;
        } else if (v == "testiscsi" || v == "liveiscsi") {
            iscsidate.push(k);
        } else if (v == "testkvm" || v == "livekvm") {
            vmdate.push(k);
        } else if (v == "fuse_export") {
            exportdate.push(k);
        } else if (AxCloudTypes.includes(v)) {
            usageAxCloud.push(k);
        }
    });
    var snapshotname = [];
    var snapshotiscsiname = [];
    var snapshotexportname = [];
    var snapshotvmname = [];
    var snapshoteinusename = [];
    $.ajax({
        type: "POST",
        url: 'api/snapshots/' + psid + "/get_by_ids",
        data: JSON.stringify({"ids": Object.keys(usage)}),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        headers: {
            "Replibit-Server": $.jStorage.get("pmachineid")
        },
        success: function (data) {
            $.each(data, function (key, val) {
                var Sid = val.snapshotId;
                for (var i = 0; i < mountdate.length; i++) {
                    if (mountdate[i] == Sid) {
                        snapmountName.push(val.snapshotTime)
                    }
                }
                for (var i = 0; i < iscsidate.length; i++) {
                    if (iscsidate[i] == Sid) {
                        snapiscsiName.push(val.snapshotTime)
                    }
                }
                for (var i = 0; i < vmdate.length; i++) {
                    if (vmdate[i] == Sid) {
                        snapvmName.push(val.snapshotTime)
                    }
                }
                for (var i = 0; i < exportdate.length; i++) {
                    if (exportdate[i] == Sid) {
                        snapExportName.push(val.snapshotTime)
                    }
                }
                for (var i = 0; i < usageAxCloud.length; i++) {
                    if (usageAxCloud[i] == Sid) {
                        usageAxCloudName.push(val.snapshotTime)
                    }
                }
            });

            var Mname = 0;
            var Iname = 0;
            var Vname = 0;
            var Ename = 0;
            var Uname = 0;
            $.each(usage, function (k, v) {
                if (v == "testmount" || v == "livemount") {
                    mountname = v;
                    mountaction = k;
                    for (var i = 0; i < snapmountName.length; i++) {
                        snapshotname.push(formatDate(snapmountName[i]));
                    }
                    act3 = "dismount";
                    act3fun = "dismount";
                    mntBtnName = "Dismount";
                    title = "Snapshot mounted";
                    snapData = snapData + '<tr><td>' + snapshotname[Mname] + '</td><td><div><a class="btn btn-default" onclick="' + act3fun + '(\'' + mountaction + '\',\'' + act3 + '\',\'' + psid + '\',' + isEncryptf + ',\'' + mid + '\')"><div class="button-content"><span class="button-text">Dismount</span></div></a></div></td></tr>';
                    Mname++;
                } else if (v == "testiscsi" || v == "liveiscsi") {
                    iscsiname = v;
                    iscsiaction = k;
                    for (var i = 0; i < snapiscsiName.length; i++) {
                        snapshotiscsiname.push(formatDate(snapiscsiName[i]));
                    }
                    iscsifun = "iscsiStop";
                    act2 = "destroyIscsiTarget";
                    iscBtnName = "iSCSI Stop";
                    btnvActive = "disabled";
                    snapData = snapData + '<tr><td>' + snapshotiscsiname[Iname] + '</td><td><div><a class="btn btn-default snapshots-table-btn" onclick="' + iscsifun + '(\'' + iscsiaction + '\',\'' + act2 + '\',\'' + psid + '\',' + isEncryptf + ',\'' + mid + '\')"><div class="button-content"><span class="button-text">iSCSI Stop</span></div></a></div></td></tr>'
                    Iname++;
                } else if (v == "fuse_export"){
                    for (var i = 0; i < snapExportName.length; i++) {
                      snapshotexportname.push(formatDate(snapExportName[i]));
                    }
                    snapData = snapData + '<tr><td>' + snapshotexportname[Iname] + '</td><td><button class="btn btn-default snapshots-table-btn js__stop-fuse-export" data-snapshot-name="' + k + '" type="button"><span class="button-content"><span class="button-text">Stop Export</span></span></button></td></tr>'
                    Ename++;
                } else if (v == "testkvm" || v == "livekvm") {
                    vmname = v;
                    vmaction = k;
                    for (var i = 0; i < snapvmName.length; i++) {
                        snapshotvmname.push(formatDate(snapvmName[i]));
                    }
                    act = (vmname == "testkvm") ? "stopVirt" : "stopok";
                    act1 = "stopvm";
                    virtBtnName = "Stop VM";
                    snapData = snapData + '<tr><td>' + snapshotvmname[Vname] + '</td><td><div><a class="btn btn-default snapshots-table-btn" onclick="' + act + '(\'' + vmaction + '\',\'' + act1 + '\',\'' + psid + '\',' + isEncryptf + ',\'' + mid + '\'' + (act == 'stopVirt' ? ',true' : '') +')"><div class="button-content"><span class="button-text">Stop VM</span></div></a><a class="btn btn-default snapshots-table-btn" onclick="getTerminal(\'' + vmaction + '\',\'terminal\',\'' + mid + '\')" ><div class="button-content"><span class="button-text">Terminal</span></div></a></div></td></tr>';
                    Vname++;
                } else if (AxCloudTypes.includes(v)) {
                    for (var i = 0; i < usageAxCloudName.length; i++) {
                      snapshoteinusename.push(formatDate(usageAxCloudName[i]));
                    }
                    snapData = snapData + '<tr><td>' + snapshoteinusename[Uname] + '</td><td></td></tr>'
                    Uname++;
                }
                snapData = snapData;
            });
            snapData = snapData + '</tbody></table></div>';
            snapdiv.html("");
            snapdiv.append(snapData).trigger("create");
            $('.UsedSnapTable').dataTable($.extend({}, defaultDataTablesOptions, {
                dom: '<"top"lpf>rt<"clear">rtip',
                "aaSorting": [],
                "bDestroy": true
            }));
        },
        error: function (errMsg) {}
    });
}

function enableInterface(iface, enabled) {
    var data = {
        "interface": iface,
        "enabled": enabled
    };

    var message = enabled ? "Enabling" : "Disabling";
    message += " network interface " + iface;


    modalalert('showalerts', message);

    var urllink = '/api/utilities/abc/toggleNetworkInterface';
    $.ajax({
        type: "POST",
        url: urllink,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            data = eval(data);
            $.each(data, function (index, value) {
                showModalAlertWithTimeout(data.msg);
                getNetworkInterfaces(iface);
            });
        },
        error: function (result) {
            showModalAlertWithTimeout("Failed to manage network interface");
            sessionTimeout(result);
        }
    });
}

function toggleInterface() {
    var iface = $('#nwInterfaces').val();
    var enabled = $('#interface-enabled').prop("checked");

    $('#interface-enabled').prop("checked", !enabled);

    // Show warning if we are trying to disable the only active network interface
    var show_last_iface_deleting_warning = false;
    if (!enabled) {
        show_last_iface_deleting_warning = true;
        for (var i = 0; i < NetInterface.length; i++) {
            if ((iface != NetInterface[i].interface) && NetInterface[i].enabled) {
                show_last_iface_deleting_warning = false;
                break;
            }
        }
    }

    if (!enabled && show_last_iface_deleting_warning) {
        $('#lastInterfaceDisableWarning').modal("show");
    }
    else if (!enabled) {
        $('#disableInterfaceConfirm').modal("show");
        $('#disableInterfaceBtn').attr('onclick', 'enableInterface(\'' + iface + '\', false)');
    }
    else {
        enableInterface(iface, enabled);
    }
}

function setNwDetails() {
    $('#nwConfig input[type="text"]').val('');
    var data = eval($('#nwInt').val());
    $("#dhcp").show();

    $.each(data, function (index, value) {
        if ($('#nwInterfaces').val() == value.interface) {
            if (!value.enabled) {
                $('#lradioDhcp').attr("disabled", "disabled");
                $('#lradioStatic').attr("disabled", "disabled");
                $('#lradioStatic').removeClass('active');
                $('#lradioDhcp').removeClass('active');
                $('#nwConfig input[type="text"]').attr("disabled", "disabled");
                $('#interface-enabled').prop("checked", false);
            }
            else {
                $('#lradioDhcp').removeAttr("disabled", "disabled");
                $('#lradioStatic').removeAttr("disabled", "disabled");
                $('#interface-enabled').prop("checked", true);
                if (value.isDhcp != undefined) {
                    if (value.isDhcp) {
                        $('#lradioDhcp').addClass('active');
                        $('#lradioStatic').removeClass('active');
                        $('#nwConfig input[type="text"]').attr("disabled", "disabled");
                    }
                    else {
                        $('#lradioStatic').addClass('active');
                        $('#lradioDhcp').removeClass('active');
                        $('#nwConfig input[type="text"]').removeAttr("disabled", "disabled");
                    }
                    $('#dhaddress').val(value.address);
                    $('#dhsubnetmask').val(value.netmask);
                    $('#dhgateway').val(value.gateway);
                    $('#ddns1').val(value.dns);
                }
            }
        }
    });
}

function saveNwDetails() {
    var mid = $("#ntserverid").val();
    var nwData = {};
    if ($('input:radio[name="dhcp"]:checked').val() == undefined) {
        showModalAlertWithTimeout("Please choose the method");
        return false;
    }
    var isdhcp = ($('input:radio[name="dhcp"]:checked').val() == "radioDhcp") ? true : false;
    var urllink = '/api/utilities/abc/setNetworkDetails';
    if (isdhcp) {
        nwData.Netmask = "";
        nwData.isDhcp = isdhcp;
        nwData.DnsServer = $('#ddns1').val();
        nwData.IP = "";
        nwData.interface = $('#nwInterfaces').val();
        nwData.Gateway = "";
    } else {
        if (verifyIP($('#dhaddress').val()) && verifyIP($('#dhsubnetmask').val()) && checkTip($('#dhgateway').val())) {
            var test = "";
        } else {
            showModalAlertWithTimeout("Please enter valid ip address")
            return false;
        }
        nwData.Netmask = $('#dhsubnetmask').val();
        nwData.isDhcp = isdhcp;
        nwData.DnsServer = $('#ddns1').val();
        nwData.IP = $('#dhaddress').val();
        nwData.interface = $('#nwInterfaces').val();
        nwData.Gateway = $('#dhgateway').val();
    }

    modalalert('showalerts', 'Updating network settings...');
    $.ajax({
        type: "POST",
        url: urllink,
        data: JSON.stringify(nwData),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": $.jStorage.get("pmachineid")
        },
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            data = eval(data);
            $.each(data, function (index, value) {
                if (value == "ok") {
                    showModalAlertWithTimeout("Network settings updated")
                    getNetworkInterfaces(nwData.interface);
                }
                if (data.status == "error") {
                    showModalAlertWithTimeout(data.msg)
                }
            });
        },
        error: function (result) {
            showModalAlertWithTimeout("Failed");
            sessionTimeout(result);
        }
    });
}


function fetchVaultSettings() {
    var response= $.ajax({
        url: "api/vault_settings",
        headers: {
            "Replibit-Server": $.jStorage.get("pmachineid")
        },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: false
    });

    if (showSessionTimedOutIfUnauthorized(null, response.status)) {
        return false;
    }

    if (response.status == 200) {
        return JSON.parse(response.responseText);
    }

    return [];
}


function fetchProtectedSystem(psid) {
    var response = $.ajax({
        url: "api/protected_systems/" + psid,
        headers: {
            "Replibit-Server": $.jStorage.get("pmachineid")
        },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: false
    });

    if (showSessionTimedOutIfUnauthorized(null, response.status)) {
        return false;
    }

    if (response.status == 200) {
        return JSON.parse(response.responseText);
    }

    return {};
}


function fetchSnapshotNetworkInterfaces(snapUrl) {
    var response = $.ajax({
        url: 'api/snapshots/' + snapUrl + '/network_interfaces',
        headers: {
            "Replibit-Server": $.jStorage.get("pmachineid")
        },
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: false
    });

    if (response.status == 401) {
        showModalAlertWithTimeout("Session timed out.");

        // Log the user out.
        $.jStorage.flush()
        $(location).attr('href', 'login.html');
        return false;
    }

    if (response.status == 200) {
        return JSON.parse(response.responseText);
    }

    return {};
}


function getSnapshotTimeString(snapshotId) {
    if (!snapshotId) return null;

    var time = snapshotId.split('@')[1].split('_');
    var year = time[0];
    var month = time[1];
    var day = time[2];
    var hour = time[3] % 12;
    var min = time[4];
    var period = time[3] >= 12 ? 'p.m.' : 'a.m'

    if (hour == 0) {
        hour = 12;
    }

    return year + '-' + month + '-' + day + ' ' + hour + ':' + min + ' ' + period;
}

var vaultCounter = 0;
var usedVaults = [];


/**
 * Given a vault setting ID it returns true if there's already a replication
 * config for that vault.
 */
function vaultAlreadyConfigured(vaultSettingId) {
    for (var i = 0; i < usedVaults.length; i++) {
        if (usedVaults[i] === vaultSettingId) {
            return true;
        }
    }

    return false;
}


/**
 * Gets a set of controls with predefined methods.
 * @param parentElem - parent jQuery element containing control elements
 */
function replicationUSBSeedingUIHelper(parentElem) {
    var $parent = parentElem || $('#replication-modal');
    var $checkbox = $parent.find('.usb-seeding-ck');
    var $driveSelect = $parent.find('.usb-seeding-drive-sel');
    var $seedBtn = $parent.find('.usb-seed-btn');

    var _dataSeedingAttrName = 'data-seeding';

    return {
        checkbox: {
            $elem: $checkbox,
            isChecked: function() {
                return $checkbox.is(':checked');
            },
            setChecked: function(value) {
                $checkbox.prop('checked', value);
                return this;
            },
            setDisabled: function(value) {
                $checkbox.prop('disabled', value);
                return this;
            }
        },
        driveSelect: {
            $elem: $driveSelect,
            setDisabled: function(value) {
                $driveSelect.prop('disabled', value);
                return this;
            },
            getUSBDevice: function() {
                return $driveSelect.val();
            }
        },
        seedBtn: {
            $elem: $seedBtn,
            setDisabled: function(value) {
                if (value) {
                    $seedBtn.attr('disabled','disabled');
                } else {
                    $seedBtn.removeAttr('disabled');
                }
                return this;
            },
            isSeeding: function() {
                return $seedBtn[0].hasAttribute(_dataSeedingAttrName);
            },
            setSeeding: function(value) {
                $seedBtn.text(value ? 'Seeding...' : 'Seed');
                if (value) {
                    $seedBtn[0].setAttribute(_dataSeedingAttrName, '');
                } else {
                    $seedBtn[0].removeAttribute(_dataSeedingAttrName);
                }
                return this;
            }
        }
    };
}


function isSeedingFor(psId, vaultSettingId) {
    var res = false;

    $.ajax({
        url: 'api/seeding_jobs',
        async: false
    }).done(function(jobs) {
        var filtered = $.grep(jobs, function(job) {
            return job.protectedSystemId == psId && job.status == "Running" && job.vaultSettingId == vaultSettingId;
        });
        res = Boolean(filtered.length)
    });

    return res;
}


function addVaultRow(vaultSettingId, vaultConfig) {
    var psId = $.jStorage.get('psystemid');
    var vaultRowTemplate = $('#replication-config-template').html().replace(/\{vaultSettingId\}/g, vaultCounter++);
    var vaultConfigContainer = $('#replication-configurations');

    // Create vault row.
    var vaultRow = $(document.createElement('article'));
    vaultRow.addClass('single-config');
    vaultRow.html(vaultRowTemplate);

    if (vaultSettingId) {
        vaultRow.attr('vault-setting-id', vaultSettingId);
    }

    var enabledCheckbox = vaultRow.find('.replication-enabled-ck');
    var vaultSelect = vaultRow.find('#replication-vault-sel');
    var baseSnapshotSelect = vaultRow.find('#replication-base-sel');
    var deleteButton = vaultRow.find('#replication-delete-btn');

    var seedingUIHelper = replicationUSBSeedingUIHelper(vaultRow);

    if (vaultSettingId) {
        usedVaults.push(vaultSettingId);

        // Initialize the "Enabled" checkbox.
        enabledCheckbox.prop('checked', vaultConfig.enabled);

        // Initialize the "Vault" dropdown.
        vaultSelect.attr('disabled', 'disabled');
        $.ajax({
            url: 'api/vault_settings/' + vaultSettingId,
            type: 'GET',
            dataType: 'json',
            success: function (vaultSetting) {
                vaultSelect.select2({
                    data: [{
                        id: vaultSetting._id,
                        text: vaultSetting.Name + ' (' + vaultSetting.vaultIp + ')'
                    }]
                });
            }
        });

        // Initialize the "Initial Snapshot" dropdown.
        baseSnapshotSelect.attr('disabled', 'disabled');
        baseSnapshotSelect.select2({
            data: [{
                id: vaultConfig.baseSnapshot,
                text: getSnapshotTimeString(vaultConfig.baseSnapshot)
            }]
        });

        var isSeedingForVault = isSeedingFor(psId, vaultSettingId);

        // Initialize the "USB Seeding" controls.
        seedingUIHelper.checkbox
            .setDisabled(true)
            .setChecked(vaultConfig.seedingEnabled);
        seedingUIHelper.driveSelect.setDisabled(!vaultConfig.seedingEnabled || isSeedingForVault);
        seedingUIHelper.seedBtn
            .setDisabled(!vaultConfig.seedingEnabled || isSeedingForVault)
            .setSeeding(isSeedingForVault);

        var removeVaultFromList = function () {
            // Remove the vault from the list of used vaults.
            var vaultIndex = usedVaults.indexOf(vaultSettingId);
            if (vaultIndex > -1) {
                usedVaults.splice(vaultIndex, 1);
            }
        };

        var deleteSeedingConfirmModalHandle = function deleteSeedingConfirmModalHandle() {
          var $modal = $('#vault-delete-seeding-confirm-modal');
          var $deleteBtn = $modal.find('.js-vault-yes-delete-seeding-button');

          $deleteBtn.off("click").on("click", function() {
              deleteVaultRow(vaultRow);
              removeVaultFromList();
          });

          $modal.modal('show');
        };

        var deleteVaultHandle = function deleteVaultHandle() {
            var vaultDeleteConfirmModal = $("#vault-delete-confirm-modal");
            var vaultDeleteConfirmButton = vaultDeleteConfirmModal.find('.vault-delete-confirm-button');
            var vaultSafeDeleteConfirmButton = vaultDeleteConfirmModal.find('.vault-safe-delete-confirm-button');
            var hostnameCheckInput = vaultDeleteConfirmModal.find('.ps-hostname-check');

            if (hostnameCheckInput.val().length !== 0) {
                hostnameCheckInput.val(null);
                vaultDeleteConfirmButton.attr('disabled','disabled');
            }

            vaultDeleteConfirmButton.off("click").on("click", function(){
                deleteVaultRow(vaultRow);
                removeVaultFromList();
            });

            vaultSafeDeleteConfirmButton.off("click").on("click", function(){
                deleteVaultRow(vaultRow, true);
                removeVaultFromList();
            });

            hostnameCheckInput.off("keyup").on("keyup", function() {
                // Check that user typed in machine's hostname
                if ($(this).val() == $('#sNameTitle').text()) {
                    vaultDeleteConfirmButton.removeAttr('disabled');
                } else {
                    vaultDeleteConfirmButton.attr('disabled','disabled');
                }
            });

            vaultDeleteConfirmModal.modal('show');
        }

        // Initialize the "Delete" button.
        if (vaultConfig.seedingEnabled && !vaultConfig.vaultLastSnapshot) {
            deleteButton.on('click', deleteSeedingConfirmModalHandle);
        } else {
            deleteButton.on('click', deleteVaultHandle);
        }

        if (vaultConfig.markedForDelete) {
            deleteVaultRow(vaultRow);
        }
    } else {
        // Initialize the "Enabled" checkbox.
        enabledCheckbox.prop('checked', true);

        // Initialize the "Vault" dropdown.
        vaultSelect.select2({
            placeholder: 'Select a Vault Setting',
            ajax: {
                url: 'api/vault_settings',
                type: 'GET',
                delay: 250,
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                processResults: function(res) {
                    var vaults = res.filter(function(vault) {
                        return usedVaults.indexOf(vault._id) === -1;
                    });

                    return {
                        results: vaults.map(function(vaultSetting) {
                            return {
                                id: vaultSetting._id,
                                text: vaultSetting.Name + ' (' + vaultSetting.vaultIp + ')'
                            };
                        })
                    };
                }
            }
        }).data('select2').$dropdown.addClass('select2-container-modal');

        var previousValue = null;

        vaultSelect.on('change', function() {
            var currentValue = vaultSelect.val();
            var index = usedVaults.indexOf(previousValue);

            if (index > -1) {
                usedVaults.splice(index, 1);
            }

            usedVaults.push(currentValue);
        });
        // Initialize the "Initial Snapshot" dropdown.
        initSnapshotSelect(baseSnapshotSelect, psId);

        // Initialize the "USB Seeding" checkbox.
        seedingUIHelper.checkbox.$elem.on('change', function() {
            var seedingEnabled = seedingUIHelper.checkbox.isChecked();
            seedingUIHelper.seedBtn.setDisabled(!seedingEnabled);
            seedingUIHelper.driveSelect.setDisabled(!seedingEnabled);
        });

        // Initialize the "Delete" button.
        deleteButton.on('click', function () {
            deleteVaultRow(vaultRow);

            // Remove the vault from the list of used vaults.
            var vaultSettingId = vaultSelect.val();
            var vaultIndex = usedVaults.indexOf(vaultSettingId);
            if (vaultIndex > -1) {
                usedVaults.splice(vaultIndex, 1);
            }
        });
    }

    // Initialize the USB Seeding Drive selector.
    seedingUIHelper.driveSelect.$elem.select2({
        placeholder: 'Select a drive',
        ajax: {
            url: 'api/utilities/abc/getMountedDevices',
            type: 'POST',
            delay: 250,
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            processResults: function(res) {
                var drives = [];

                for (var device in res) {
                    drives.push({
                        id: device,
                        text: res[device].mountPoint
                    });
                }

                return { results: drives };
            }
        }
    }).data('select2').$dropdown.addClass('select2-container-modal');

    // Initialize the "Seed" button.
    seedingUIHelper.seedBtn.$elem.on('click', function() {
        if (seedingUIHelper.driveSelect.$elem.val() && baseSnapshotSelect.val() && vaultSelect.val()) {
            seedingUIHelper.checkbox.setDisabled(true);
            seedingUIHelper.driveSelect.setDisabled(true);
            seedingUIHelper.seedBtn.setDisabled(true).setSeeding(true);
        } else {
            showModalAlertWithTimeout('Please select Vault, Base Snapshot and USB')
        }
    });

    vaultConfigContainer.append(vaultRow);
}


/**
 * Given a date string return an object with the following format:
 *
 *  {
 *      year: YYYY,
 *      month: MM,
 *      date: DD,
 *      hours: HH,
 *      minutes: mm
 *  }
 *
 * The input string can be a complete date formatted like YYYY-MM-DD HH-mm, or
 * it can be a partial time string containing only the date information, or
 * part of it.
 *
 * Zero padded months, dates, hours and minutes are supported but not required.
 * Time information can be entered in 24hs format or 12hs format. The period
 * identifier (p.m./a.m.) can be uppercase, lowercase, separated by dots or not.
 *
 * @param  {string} str  The date string.
 *
 * @return {object} The date/time data object.
 */
function getTimeObject(str) {
    var timeObj = {};
    var segments = str.split(' ');

    // Date info is available. Format: YYYY-MM-DD.
    if (segments.length > 0) {
        var dateSegments = segments[0].split('-');

        // Year is available.
        if (dateSegments.length > 0 && dateSegments[0].length) {
            timeObj.year = Number(dateSegments[0]);
        }

        // Month is available.
        if (dateSegments.length > 1 && dateSegments[1].length) {
            timeObj.month = Number(dateSegments[1]);
        }

        // Day is available.
        if (dateSegments.length > 2 && dateSegments[2].length) {
            timeObj.day = Number(dateSegments[2]);
        }
    }

    // Time info is available. Format HH:MM.
    if (segments.length > 1) {
        var timeSegments = segments[1].split(':');

        // Hours are available.
        if (timeSegments.length > 0 && timeSegments[0].length) {
            timeObj.hour = Number(timeSegments[0]);
        }

        // Minutes are available.
        if (timeSegments.length > 1 && timeSegments[1].length) {
            timeObj.minute = Number(timeSegments[1]);
        }
    }

    return timeObj;
}


function deleteVaultRow(row, keepVaultData) {
    if (!row.attr('vault-setting-id')) {
        return row.remove();
    }

    var vaultSelect = row.find('#replication-vault-sel')
    var baseSnapshotSelect = row.find('#replication-base-sel')
    var deleteButton = row.find('#replication-delete-btn')

    var seedingUIHelper = replicationUSBSeedingUIHelper(row);

    row.data('keep-vault-data', keepVaultData || false);
    row.addClass('deleted');
    vaultSelect.attr('disabled', 'disabled');
    baseSnapshotSelect.attr('disabled', 'disabled');
    deleteButton.attr('disabled', 'disabled').text("Deleting...");

    seedingUIHelper.checkbox.setDisabled(true);
    seedingUIHelper.driveSelect.setDisabled(true);
    seedingUIHelper.seedBtn.setDisabled(true);
}


function showReplicationModal() {
    // Fetch the PS data.
    var psId = $.jStorage.get('psystemid');
    var ps = fetchProtectedSystem(psId);
    // Empty vaults container and array.
    usedVaults = [];
    $('#replication-configurations').html('');

    var vaultSettingIds = Object.keys(ps.replication);
    if (vaultSettingIds.length > 0) {
      // Add existing vault configs.
      vaultSettingIds.forEach(function (vaultSettingId) {
        addVaultRow(vaultSettingId, ps.replication[vaultSettingId]);
      });
    } else {
      // Add initial vault config.
      addVaultRow();
    }

    $('#replication-modal').modal('show');
}


function saveReplicationSettings() {
    var psId = $.jStorage.get('psystemid');
    var vaultConfigContainer = $('#replication-configurations');
    var replication = {};
    var seedingFor = {};
    var vaults = vaultConfigContainer.find('.single-config');
    var deletingAlert = "";

    for (var i = 0; i < vaults.length; i++) {
        var vault = $(vaults[i]);
        var isEnabled = vault.find('.replication-enabled-ck').is(':checked');
        var vaultSettingId = vault.find('#replication-vault-sel').val();

        var seedingUIHelper = replicationUSBSeedingUIHelper(vault);

        var baseSnapshot = vault.find('#replication-base-sel').val();
        var isSeedingEnabled = seedingUIHelper.checkbox.isChecked();
        var markedForDelete = vault.hasClass('deleted');
        var keepVaultData = vault.data('keep-vault-data') || false;

        // If the row is empty or incomplete, ignore it.
        if (!vaultSettingId || !baseSnapshot) {
            continue;
        }

        var isAlreadySeeding = isSeedingFor(psId, vaultSettingId);

        if (isSeedingEnabled && seedingUIHelper.seedBtn.isSeeding() && !isAlreadySeeding) {
            seedingFor[vaultSettingId] = {
                vaultSettingId: vaultSettingId,
                psId: psId,
                snapshot: baseSnapshot,
                usbDevice: seedingUIHelper.driveSelect.getUSBDevice()
            };
        }

        if (markedForDelete && isAlreadySeeding) {
            markedForDelete = false;
            deletingAlert = "Can't delete. Seed export in progress.";
        }

        replication[vaultSettingId] = {
            enabled: isEnabled,
            baseSnapshot: baseSnapshot,
            seedingEnabled: isSeedingEnabled,
            markedForDelete: markedForDelete,
            keepVaultData: keepVaultData,
        };
    }

    modalalert('showalerts', 'Saving replication settings...');

    var enableUSBSeedingControls = function() {
        vaults.each(function() {
            var seedingUIHelper = replicationUSBSeedingUIHelper($(this));
            if (seedingUIHelper.checkbox.isChecked()) {
                seedingUIHelper.driveSelect.setDisabled(false);
                seedingUIHelper.seedBtn
                    .setDisabled(false)
                    .setSeeding(false);
            }
        });
    };

    $.ajax({
        url: 'api/protected_systems/' + psId + '/setVaultReplication',
        type: 'POST',
        data: JSON.stringify(replication),
        contentType: 'application/json; charset=utf-8',
        headers: {
            'Replibit-Server': $.jStorage.get('pmachineid')
        },
        dataType: 'json',
        success: function (data) {
            if (data.status) {
                // start usb seeding
                $.each(seedingFor, function(_, seedingParams) {
                    exportUSBSeed(
                        seedingParams.psId,
                        seedingParams.snapshot,
                        seedingParams.usbDevice,
                        seedingParams.vaultSettingId
                    );
                });
                $('#replication-modal').modal('hide');
            }
            modalalert('showalerts', deletingAlert || data.msg);
            setTimeout('$("#showalerts").modal("hide");', 3000);
        }
    }).always(function () {
        enableUSBSeedingControls();
    });
}


/**
 * Start the creation of the USB seed.
 */
function exportUSBSeed(psId, snapshot, usbDevice, vaultSettingId) {
    modalalert('showalerts', 'Starting Seeding job. You can watch the progress in the Jobs tab.');
    $.ajax({
        url: 'api/protected_systems/' + psId + '/vaultSeed',
        type: 'POST',
        data: JSON.stringify({
            usbDevice: usbDevice,
            snapshot: snapshot,
            vaultSettingId: vaultSettingId
        }),
        contentType: "application/json; charset=utf-8",
        headers: { "Replibit-Server": $.jStorage.get("pmachineid") },
        dataType: "json",
        success: function(data) {
            if (data.status === "Started") {
                setTimeout("$('#showalerts').modal('hide');", 1500);
            } else {
                modalalert('showalerts', data.status);
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        },
        error: function (result) {
            modalalert('showalerts', result.status);
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function getSnapNotes(id) {
    $('#snpnotes').val($.base64.decode($('#' + id).val()));
    var chars = $('#snpnotes').val().length;
    var nlbreaks = ($('#snpnotes').val().match(/\n/g) || []).length;
    chars = chars + nlbreaks;
    $('#snpnotesCount').html(chars + "/300");

}

function snpNote(id) {
    getSnapNotes('notes_' + id);
    setTimeout('$("#snpnotes").trigger("focus")', 900);
    $('#snapNotes').attr("onclick", "setSnapNotes('api/snapshots/" + id + "')");
}

function setSnapNotes(uri) {
    var snapnotes = $('#snpnotes').val();
    snapnotes = snapnotes.replace(/\"/g, '\'')
    snapnotes = $.base64.encode(snapnotes);
    var sdata = {};
    sdata.notes = snapnotes;
    $.ajax({
        url: uri,
        type: 'PUT',
        data: JSON.stringify(sdata),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": $.jStorage.get("pmachineid")
        },
        dataType: "json",
        success: function (data) {
            viewDetails();
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
    $("#snpNotes").modal('hide');
}

function delSnp(snapid, mid, psid, encrypted) {
    setTimeout('$("#delsnpshot").trigger("focus")', 900);
    $("#delsnpasscont").toggle(encrypted);
    $("#delsnpass").val("");
    encrypted ? $("#delsnpshot").attr("disabled", true) : $("#delsnpshot").removeAttr("disabled");
    $("#delsnpass").off().on("keyup", function(e) {
        e.target.value ? $("#delsnpshot").removeAttr("disabled") : $("#delsnpshot").attr("disabled", true);
    })
    $('#delsnpshot').attr("onclick", "delSnapShot('api/snapshots/" + snapid + "','" + mid + "','" + psid + "')");
}

function delSnapShot(uri, mid, psid) {
    modalalert('showalerts', "Deleting snapshot please wait.");
    var sdata = {
        "forceDelete":true,
        "encpass": $("#delsnpass").val()
    };
    $.ajax({
        url: uri,
        type: 'DELETE',
        data: JSON.stringify(sdata),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', data.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);

            if (data.status === true) {
                setTimeout("viewDetails('" + psid + "');", 5000);
            }
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
    $("#delSnpConfirm").modal('hide');
}

function deletePS(psid, mid, encrypted) {
    var pts = $("#" + psid).val();
    pts = eval('[' + pts + ']');
    $("#delpspasscont").toggle(encrypted);
    $("#delpspass").val("");
    encrypted ? $("#dellink").attr("disabled", true) : $("#dellink").removeAttr("disabled");
    $("#delpspass").off().on("keyup", function(e) {
        e.target.value ? $("#dellink").removeAttr("disabled") : $("#dellink").attr("disabled", true);
    })
    $.each(pts, function (index, value) {
        $('#dellink').attr("onclick", "delProtectedSystem('/api/protected_systems/" + value._id + "/async_delete','" + mid + "'," + encrypted + ")");
    });
}

function delProtectedSystem(uri, mid, encrypted) {
    modalalert('showalerts', "Protected system deleting in progress. This will take some time to delete.");
    $.ajax({
        url: uri,
        type: 'POST',
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        data: JSON.stringify({"encpass": $("#delpspass").val()}),
        success: function (data) {
            data = data.replace(/\"/g, '');
            if (data == "Delete") {
                modalalert('showalerts', "Protected system deleting in progress. This will take some time to delete.");
                setTimeout("$('#showalerts').modal('hide');getProtectedSystems(); availableLicense();", 3000);
            } else {
                modalalert('showalerts', "Error deleting protected system: " + data);
                setTimeout("$('#showalerts').modal('hide');getProtectedSystems();", 3000);
            }
            $("#delProtectedSys").modal('hide');
        },
        error: function (result) {
            var data = result || "";
            data = (result.hasOwnProperty("responseText")) ? result.responseText : "";
            if (!showSessionTimedOutIfUnauthorized(data)) {
                modalalert('showalerts', "Error deleting protected system");
                setTimeout("$('#showalerts').modal('hide');getProtectedSystems();", 3000);
                $("#delProtectedSys").modal('hide');
            }
        }
    });
}

function checkVirtSettings(snapUrl, spaction, psid, check, mid) {
    var kvmlimit = $.ajax({
        type: "POST",
        url: "api/utilities/abc/kvmLimitations",
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        async: false
    }).responseText;
    kvmlimit = (kvmlimit == undefined) ? "" : kvmlimit;
    if (kvmlimit.indexOf("401 Unauthorized") !== -1) {
        modalalert('showalerts', "Session timeout");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        $.jStorage.flush()
        $(location).attr('href', 'login.html');
        return false;
    }

    kvmlimit = JSON.parse(kvmlimit);
    var freeRam = getSize(kvmlimit['freeram']);
    var freeCpu = parseInt(kvmlimit['freecpu']);
    var ram = parseInt($("#ram").val());
    var cpu = parseInt($("#cpu").val());
    if (ram > freeRam) {
        modalalert('showalerts', "RAM cannot exceed " + freeRam);
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    } else if (ram < 0 || ram == 0) {
        modalalert('showalerts', "RAM should not be zero (or) less than zero");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }

    if (cpu > freeCpu) {
        modalalert('showalerts', "CPU cannot exceed " + freeCpu);
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    } else if (cpu < 0 || cpu == 0) {
        modalalert('showalerts', "CPU should not be zero (or) less than zero");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }

    var bootdev = $('#bootdev').val();
    var image = $('#image').val();

    if (bootdev === 'cdrom' && !image) {
      modalalert('showalerts', "Please select a CD-ROM image to boot from");
      setTimeout("$('#showalerts').modal('hide');", 3000);
      return false;
    }

    const newMac = $('#vm_new_mac').val();
    if(newMac && !isMacAddressValid(newMac)) {
        modalalert('showalerts', "Invalid MAC Address: " + newMac);
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }

    $("#virtualizationSettings").modal('hide');

    startVirtualMachine(snapUrl, spaction, psid, check, mid);
}

function startVirtualMachine(snapUrl, spaction, psid, check, mid) {
    modalalert('showalerts', "Starting instance of this system...");

    mode = $('input[name=vm-mode]:radio:checked').val();

    var passdata = {
        ram: parseInt($("#ram").val()),
        cpu: parseInt($("#cpu").val()),
        mode: mode,
        bootkey: $('#bootkey').val(),
        bootdev: $('#bootdev').val(),
        image: $('#image').val(),
        virtio_setup: $('#virtioSetupCheck').prop('checked')
    };

    if (!$('#useSmartRecovery-virt').parent().hasClass("hidden")) {
        passdata.use_smart_recovery = $('#useSmartRecovery-virt').prop('checked');
    }

    if (mode === '1') {
        passdata.ifaces = {};
        let vmIfaces = document.querySelectorAll('[id^="vm_iface_"]');
        vmIfaces.forEach(function(iface) {
            let options = iface.querySelectorAll("option");
            options.forEach(function(option) {
                if (option.selected && option.value != '') {
                    passdata.ifaces[iface.name] = iface.value;
                }
            })
        });
        const newMac = $('#vm_new_mac').val();
        if(newMac) {
            passdata.ifaces[newMac] = $('#vm_new_iface').val();
        }
    }

    if (check) {
        var pass = $('#vmencpass').val();
        if (!pass) {
            modalalert('showalerts', "Please enter the password");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }

        $('#vmencpass').val("");
        passdata.encpass = pass;
    }

    $.ajax({
        type: "POST",
        url: "api/snapshots/" + snapUrl + "/" + spaction,
        data: JSON.stringify(passdata),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (html) {
            if (html.status == true) {
                if (typeof html.msg !== 'undefined') {
                    modalalert('showalerts', html.msg);
                } else {
                    modalalert('showalerts', 'Virtual machine started.');
                }
                setTimeout(function () {
                    getTerminal(snapUrl, 'terminal', mid);
                    viewDetails(psid);
                }, 3000);
            } else {
                modalalert('showalerts', html.msg);
                setTimeout(function () {
                    viewDetails(psid);
                }, 3000);
            }
        },
        error: function (errMsg) {
            modalalert('showalerts', errMsg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(errMsg);
        }
    });
}

function usertable() {
    $('#licensedetail').hide();
    $('#userdetail').show();
    getUsers();
    $('#userbtn').addClass('active');
    $('#licensebtn').removeClass('active');
}

function getPsNameIdMap() {
    var pdata = "";
    pdata = $.ajax({
        url: "api/protected_systems",
        async: false
    }).responseText;
    pdata = (pdata == undefined) ? "" : pdata;
    if (showSessionTimedOutIfUnauthorized(pdata)) {
        return false;
    }
    pdata = eval(pdata);
    var obj = pdata.reduce(function (total, current) {
        total[current._id] = current.systemName;
        return total;
    }, {});
    return obj;
}
/***********scheduler*******************/

(function addScheduletypeChange() {
    for (const pre of ["", "e"]) {
        $('input[type=radio][name="' + pre + 'scheduletype"]').on("change", function() {
            if (this.value === "classic") {
                $("#" + pre + "backuppoliciescls").show();
                $("#" + pre + "backuppoliciesacc").hide();
            } else if (this.value === "policyBased") {
                $("#" + pre + "backuppoliciescls").hide();
                $("#" + pre + "backuppoliciesacc").show();
            }
        })
    }
})();

(function addScheduleDayCheckedChange(){
    for (const pre of ["", "e"]) {
        for (const day of weekDaysShortNames) {
            $("#" + pre + "policyenable" + day).on("change", function(){
                if (!$(this).prop("checked")) {
                    $(this).parent().parent().parent().find("select").prop("disabled", "disabled");
                } else {
                    $(this).parent().parent().parent().find("select").removeAttr("disabled");
                }
            });
        }
    }
})();

(function addThrottlingEnabledChange(){
    for (const pre of ["", "e"]) {
        $("#" + pre + "allowthrottling").on("change", function(){
            if (!$(this).prop("checked")) {
                $("#" + pre + "throttlingsettings").css("display", "none");
            } else {
                $("#" + pre + "throttlingsettings").css("display", "flex");
            }
        });
    }
})();

function getSchedulerBusinessHours(edit) {
    const pre = edit ? "e" : "";
    var businessHours = {}
    for (const day of weekDaysShortNames) {
        var isEnabled = $("#" + pre + "policyenable" + day).prop("checked");
        if (isEnabled) {
            businessHours[day] = {
                "startTime": {
                    "hour": parseInt($("#" + pre + "pshour" + day).val()),
                    "minute": parseInt($("#" + pre + "psmin" + day).val())
                },
                "endTime": {
                    "hour": parseInt($("#" + pre + "pehour" + day).val()),
                    "minute": parseInt($("#" + pre + "pemin" + day).val())
                }
            }
        }
    }
    return businessHours;
}

function getSchedulerThrottling(edit) {
    const pre = edit ? "e" : "";
    var isEnabled = $("#" + pre + "allowthrottling").prop("checked");
    if (edit && !isEnabled) {
        $("#ethrottlingdbh, #ethrottlingnbh, #ethrottlingdnbh, #ethrottlingnnbh").val("0");
    }
    var throttling = {
        "isEnabled": isEnabled,
        "businessHours": {
            "disk": parseInt($("#" + pre + "throttlingdbh").val()),
            "network": parseFloat($("#" + pre + "throttlingnbh").val())
        },
        "nonBusinessHours": {
            "disk": parseInt($("#" + pre + "throttlingdnbh").val()),
            "network": parseFloat($("#" + pre + "throttlingnnbh").val())
        }
    }
    return throttling;
}

function getSchedulerBackup(edit) {
    const pre = edit ? "e" : "";
    var backupBusinessRepeatKey = $("#" + pre + "backupbusinesstype").val();
    var backupNonBusinessRepeatKey = $("#" + pre + "backupnbusinesstype").val();
    var backup = {
        "businessHours": {
            "allowFull": $("#" + pre + "allowbusinesscheck").prop("checked"),
            "repeat": {}
        },
        "nonBusinessHours": {
            "allowFull": $("#" + pre + "allownbusinesscheck").prop("checked"),
            "repeat": {}
        }
    }
    backup["businessHours"]["repeat"][backupBusinessRepeatKey] = parseInt($("#" + pre + "backupbusinesstime").val());
    backup["nonBusinessHours"]["repeat"][backupNonBusinessRepeatKey] = parseInt($("#" + pre + "backupnbusinesstime").val());
    return backup;
}

function cleanSchedulerData(edit) {
    const pre = edit ? "e" : "";
    for (const day of weekDaysShortNames) {
        $("#" + pre + "policyenable" + day).prop("checked", false).trigger("change");
        $("#" + pre + "pshour" + day).val(0);
        $("#" + pre + "psmin" + day).val(0);
        $("#" + pre + "pehour" + day).val(0);
        $("#" + pre + "pemin" + day).val(0);
    }
    if (!edit) {
        $("#allowbusinesscheck").prop("checked", false);
        $("#allownbusinesscheck").prop("checked", true);
        $("#backupbusinesstype,#backupnbusinesstype").val("hour");
        setupSelector('#backupbusinesstime', 0, 24, 1, 1, 'Never');
        setupSelector('#backupnbusinesstime', 0, 24, 1, 0, 'Never');
        checkBackupOffsetPolicy('Add');
        $("#allowthrottling").prop("checked", false).trigger("change");
        $("#throttlingdbh,#throttlingdnbh,#throttlingnbh,#throttlingnnbh").val("0");
    }
}

function checkPolicyInterval(type_of_hours, type_of_task) {
  var pre = type_of_task == 'Edit' ? 'e': '';
  var type = type_of_hours == 'Business' ? 'backupbusiness': 'backupnbusiness';
  var control_item = pre + type;
  var control_item_value = $('#' + control_item + 'type').val();

  setupControl(control_item, control_item_value, 0);
  checkBackupOffsetPolicy(type_of_task);
}

function setupControl(name, type, time) {
  $('#'+name+'type').val(type);
  if (type == 'hour') {
    setupSelector('#'+name+'time', 0, 24, 1, time, 'Never');
    return
  }

  setupSelector('#' + name + 'time', 0, 30, 15, time, 'Never');
}

function checkScheduleThrottling(edit) {
    const pre = edit ? "e" : "";
    var diskBusiness = $("#" + pre + "throttlingdbh").val();
    var diskNonBusiness = $("#" + pre + "throttlingdnbh").val();
    var networkBusiness = $("#" + pre + "throttlingnbh").val();
    var networkNonBusiness = $("#" + pre + "throttlingnnbh").val();

    if (!isPositiveInteger(diskBusiness) || !isPositiveInteger(diskNonBusiness)) {
        showModalAlertWithTimeout("Disk throttling values must be positive integers or 0");
        return false;
    }

    if (!isPositiveFloat(networkBusiness, 1) || !isPositiveFloat(networkNonBusiness, 1)) {
        showModalAlertWithTimeout("Network throttling values must be positive numbers with 1 digit after the decimal point");
        return false;
    }

    return true;
}

function getScheduler() {
    schedulesTable();
    $('#scTable').dataTable($.extend({}, defaultDataTablesOptions, {
        "bDestroy": true,
        "bStateSave": true,
        "bProcessing": true,
        "bServerSide": true,
        dom: '<"top"lpf>rt<"clear">rtip',
        "aaSorting": [],
        "sAjaxSource": "api/schedules",
        "aoColumns": [
            {
                "mDataProp": "name",
                "sWidth": "20%"
            },
            {
                "mDataProp": "updated",
                "sWidth": "20%"
            },
            {
                "mDataProp": "updated",
                "sWidth": "45%"
            },
            {
                "mDataProp": "updated",
                "sWidth": "15%"
            }
        ],
        "aoColumnDefs": [{
            "bSortable": false,
            "aTargets": [1, 2, 3]
            }, {
            "sClass": "dtWrapTd",
            "aTargets": [2]
            }, {
            "sClass": "dtNoWrap",
            "aTargets": [0, 3]
        }],
        "fnRowCallback": function (nRow, aData, iDisplayIndex) {
            var isEna = "";
            var scDelLink = aData.name == "default" ? "" : '<a onclick="deleteScheduler(\'' + aData._id + '\'); "><span class="icon-delete table-icon active" title="Delete"></span></a>';
            var sid = '<input id="' + aData._id + '" type="hidden" value=\'' + JSON.stringify(aData) + '\' />';
            var action = sid + '<a class="btn btn-default" href="#editScheduler" id="editsch" onclick="editScheduler(\'' + aData._id + '\');" data-toggle="tab"><div class="button-content"><span class="button-text">Edit</span></div></a>' + scDelLink;
            var iconClass = (aData.isEnabled) ? "table-icon-success" : "";
            var iconTitle = (aData.isEnabled) ? "Enabled" : "Disabled"
            if (aData.isDefault == true) {
                isEna = "<a><span class='icon-checkmark-circular table-icon " + iconClass + "' title='" + iconTitle + "'</span></a>" + "<span class='table-icon-text defaultcheck' style='font-weight:bold'>" + aData.name + "</span>";
            } else {
                isEna = "<a><span class='icon-checkmark-circular table-icon " + iconClass + "' title='" + iconTitle + "'</span></a>" + "<span class='table-icon-text'>" + aData.name + "</span>";
            }

            var type = aData.type || "classic";
            if (type == "classic") {
                typeText = "Classic - " + (aData.incrementalbackup.startTime.hour == "-" ? "Manual" : "Interval");
            } else {
                typeText = "Advanced";
            }

            $('td:eq(0)', nRow).html(isEna);
            $('td:eq(1)', nRow).html(typeText);
            $('td:eq(2)', nRow).html(aData.description || "");
            $('td:eq(3)', nRow).html(action);
            return nRow;
        }
    }));
}

function getRetention() {
    $('#reTable').dataTable($.extend({}, defaultDataTablesOptions, {
        "bDestroy": true,
        "bStateSave": true,
        "bProcessing": true,
        "bServerSide": true,
        dom: '<"top"lpf>rt<"clear">rtip',
        "aaSorting": [],
        "sAjaxSource": "api/retentions",
        "aoColumns": [
            {
                "mDataProp": "name",
                "sWidth": "20%"
            },
            {
                "mDataProp": "updated",
                "sWidth": "20%"
            },
            {
                "mDataProp": "updated",
                "sWidth": "45%"
            },
            {
                "mDataProp": "updated",
                "sWidth": "15%"
            }
        ],
        "aoColumnDefs": [{
            "bSortable": false,
            "aTargets": [1, 2, 3]
            }, {
            "sClass": "dtWrapTd",
            "aTargets": [2]
            }, {
            "sClass": "dtNoWrap",
            "aTargets": [0, 3]
        }],
        "fnRowCallback": function (nRow, aData, iDisplayIndex) {
            let deletionDisabled = ["Recommended", "Space Saving"].indexOf(aData.name) !== -1;
            let deletionLink = deletionDisabled ? "" : '<a onclick="deleteRetentionModal(\'' + aData._id + '\'); "><span class="icon-delete table-icon active" title="Delete"></span></a>';
            let action = '<a type="button" class="btn btn-default" href="#editRetention" onclick="editRetention(\'' + aData._id + '\')"><div class="button-content"><span class="button-text">Edit</span></div></a>' + deletionLink;
            let name = "";
            if (aData.isDefault == true) {
                name = "<span class='table-icon-text defaultcheck'>" + aData.name + "</span>";
            } else {
                name = "<span class='table-icon-text'>" + aData.name + "</span>";
            }

            let typeText = aData.desktop.method === aData.server.method ? aData.desktop.method : "mixed";
            typeText = typeText === "custom" ? "Tiered" : typeText;
            $('td:eq(0)', nRow).html(name);
            $('td:eq(1)', nRow).html(typeText.charAt(0).toUpperCase() + typeText.slice(1));
            $('td:eq(2)', nRow).html(aData.description || "");
            $('td:eq(3)', nRow).html(action);

            return nRow;
        }
    }));
}

function editRetention(uid) {
    initRetentionView(uid);
}

function deleteRetentionModal(uid) {
    $("#deleteRetentionModal").modal("show");
    $("#deleteRetention").attr("onclick", "deleteRetention('" + uid + "')");
}

function deleteRetention(uid) {
    $("#deleteRetentionModal").modal("hide");
    var uri = "/api/retentions/" + uid;
    $.ajax({
        url: uri,
        type: 'DELETE',
        success: function (data) {
            if (data.status === "error") {
                showModalAlertWithTimeout(data.msg);
            } else {
                showModalAlertWithTimeout("The retention policy has been deleted.")
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    getRetention();
}

$("#backid").on("click", function () {
    redirect('#protectedSystem');
});

$("#cancelsche").on("click", function () {
    redirect('#scheduler');
});

$("#canceleditsche").on("click", function () {
    redirect('#scheduler');
});

$('#editsch').on("click", function () {
    if ($('#escName').val() == undefined || $('#escName').val() == "") {
        $('.scheid').click();
        return false;
    }
});

function mschValidate(sch){
    var time = sch.split(",");
    if(time.length == 0) return false;
    for(var i=0; i< time.length; i++){
        var t = time[i].split(':');
        var tmpvalid = /^\d\d:\d\d$/.test(time[i]) &&
         t[0] >= 0 && t[0] < 24 &&
         t[1] >= 0 && t[1] < 60;
         if(!tmpvalid){
             return false;
         }
    }
    return true;
}
function showSch(id){
    $(".manualsch").css("display", "none");
    $(".intervalsch").css("display", "none");
    if($("#"+id).val() == 0){
        $(".intervalsch").css("display", "block");
        $(".manualsch").css("display", "none");
    }else{
        $(".manualsch").css("display", "block");
        $(".intervalsch").css("display", "none");
    }
}

function checkScheduleField(name, value) {
    if (hasQuotationMarks(value)) {
        showModalAlertWithTimeout(name + " should not contain quotation marks")
        return false;
    }
    return true;
}

function validateBackupPolicies(data) {
    let businessHours = data["businessHours"]
    let backup = data["backup"]

    if (!backup["businessHours"]["allowFull"] && !backup["nonBusinessHours"]["allowFull"]) {
        showModalAlertWithTimeout("No Full Backup Timeframe selected, Please specify at least one timeframe when Full Backups are allowed.")
        return false;
    }

    let errorMessage = "Invalid Schedule, no time exists where Full backups are allowed";
    // All time non business
    if ($.isEmptyObject(businessHours) && backup["nonBusinessHours"]["allowFull"] == false) {
        showModalAlertWithTimeout(errorMessage)
        return false;
    }

    var backupBusinessRepeatValue = Object.values(backup["businessHours"]["repeat"])[0]
    var backupNonBusinessRepeatValue = Object.values(backup["nonBusinessHours"]["repeat"])[0]

    if (backupBusinessRepeatValue == 0 && backupNonBusinessRepeatValue == 0) {
      showModalAlertWithTimeout("Invalid schedule: No backup window specified.  You must select a backup Interval value for at least one timeframe")
      return false;
    }

    // All time business
    let alwaysBusiness = false;

    if (!$.isEmptyObject(businessHours) && Object.keys(businessHours).length == 7) {
        alwaysBusiness = true
    }

    if (alwaysBusiness) {
        for (let dayIndex in businessHours) {
            const day = businessHours[dayIndex];
            if (day["startTime"]["hour"] !== day["endTime"]["hour"] ||
                day["startTime"]["minute"] !== day["endTime"]["minute"]) {
                alwaysBusiness = false;
                break;
            }
        }
    }

    if (alwaysBusiness && backup["businessHours"]["allowFull"] == false) {
        showModalAlertWithTimeout(errorMessage);
        return false;
    }

    return true;
}

function addScheduler() {
    var intval = $('#scInterval').val();
    if (!checkScheduleThrottling(false)){
        return false;
    }
    if ($.trim($('#scName').val()) != "") {
        if ($.trim($('#scName').val()).length > 25) {
            modalalert('showalerts', "Schedule name max char allowed is 25");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }
        if (!checkScheduleField('Name', $('#scName').val())) {
            return false;
        }
        if (!checkScheduleField('Description', $('#scdsName').val())) {
            return false;
        }
        var incrementalCron = "";
        var manualCron = "";
        var repH = ($('#hour02').val() == 0) ? '23' : parseInt($('#hour02').val()) - 1;
        var initialCron = '{ "endTime": { "minute": ' + $("#min02").val() + ', "hour": ' + $("#hour02").val() + ' }, "days": [ "*" ], "startTime": { "minute": ' + $("#min01").val() + ', "hour": ' + $("#hour01").val() + ' } }';
        var intHrs = ($('#min23').val() == "hrs") ? $('#scInterval').val() : "00";
        var intMins = ($('#min23').val() == "mins") ? $('#scInterval').val() : "00";
        var mH = ($('#min23').val() == "mins") ? "minute" : "hour";

        if($("#addInc").val() == 1){
            if ($.trim($('#mSch').val()) == "" || !mschValidate($.trim($('#mSch').val()))) {
                modalalert('showalerts', "Please enter valid manual schedule.");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                return false;
            }
            incrementalCron = '{ "repeat": { "-": "-" },"days": "-","startTime": { "hour": "-" },"endTime": { "hour": "-" } }';
            manualCron = '"'+$("#mSch").val()+'"';
        }else{
            incrementalCron = '{ "repeat": { "' + mH + '": "*/' + $("#scInterval").val() + '" },"days": [ "*" ],"startTime": { "hour": ' + $("#hour11").val() + ' },"endTime": { "hour": ' + $("#hour12").val() + ' } }';
            manualCron = '""';
        }

        var data = prepare_schedule_data('Add', initialCron, incrementalCron, manualCron);
        if (!data){
          return false;
        }

        $.ajax({
            type: "POST",
            url: "/api/schedules",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                modalalert('showalerts', "Schedule created successfully");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                setTimeout("redirect('#scheduler');", 400);
                $('#scName').val("");
                $('#hour01').val("0");
                $('#hour02').val("0");
                $('#hour11').val("0");
                $('#hour12').val("0");
                $('#min01').val("0");
                $('#min02').val("0");
                $('#schcheck').prop('checked', true);
                setupSelector('#scInterval', 1, 23, 1, 0);
                $('#min23 option[value=hrs]').attr('selected', 'selected');

                $("#scdsName").val("");
                cleanSchedulerData(false);

                $('input[name=scheduletype][value="classic"]').click();
            },
            error: function (errMsg) {
                if (errMsg.status == 409) {
                    modalalert('showalerts', "Schedule already exists");
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                }
            }
        });
    } else {
        modalalert('showalerts', "Please enter valid Name.");
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
}

function collect_schedule_data(pre, backupType, name_checkbox_isDefault, initialCron, incrementalCron, manualCron){
    var data = {
      "name": $.trim($('#' + pre + 'scName').val()),
      "isEnabled": $('#'+ pre +'schcheck').prop('checked'),
      "isDefault": $(name_checkbox_isDefault).prop('checked'),
      "description": $.trim($('#' + pre + 'scdsName').val()),
      "type": backupType
    }

    if (backupType != "classic"){
      data["businessHours"] = getSchedulerBusinessHours(pre);
      data["throttling"] = getSchedulerThrottling(pre);
      data["backup"] = getSchedulerBackup(pre);
      data["offsetBackup"] = parseInt($('#' +pre + 'OffsetBackupPolicy').val());
      if (!validateBackupPolicies(data)) {
        return false;
      }
      return data;
    }

    data["initialbackup"] = JSON.parse(initialCron);
    data["incrementalbackup"] = JSON.parse(incrementalCron);
    data["manualIncBackup"] = JSON.parse(manualCron);
    data["offsetBackup"] = manualCron == '""' ? parseInt($('#' + pre + 'OffsetBackupClassic').val()) : 0;
    return data;
}

function prepare_schedule_data(data_type, initialCron, incrementalCron, manualCron) {
    var pre = "";
    var name_checkbox_isDefault = '#createdefault';
    if (data_type == 'Edit'){
      pre = "e";
      name_checkbox_isDefault = '#editdefault';
    }
    var backupType = $("input[name=" + pre + "scheduletype]:checked").val();
    return collect_schedule_data(pre, backupType, name_checkbox_isDefault, initialCron, incrementalCron, manualCron);
}

function saveScheduler(uri) {
    $("#disableSchedule").modal("hide");
    var intval = $('#escInterval').val();
    if (!checkScheduleThrottling(true)){
        return false;
    }
    if ($.trim($('#escName').val()) != "") {
        if ($.trim($('#escName').val()).length > 25) {
            modalalert('showalerts', "Schedule name max char allowed is 25");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }
        if (!checkScheduleField('Name', $('#escName').val())) {
            return false;
        }
        if (!checkScheduleField('Description', $('#escdsName').val())) {
            return false;
        }
        var incrementalCron = "";
        var manualCron= "";
        var repH = ($('#ehour02').val() == 0) ? 23 : parseInt($('#ehour02').val()) - 1;
        var initialCron = '{ "endTime": { "minute": ' + $("#emin02").val() + ', "hour": ' + $("#ehour02").val() + ' }, "days": [ "*" ], "startTime": { "minute": ' + $("#emin01").val() + ', "hour": ' + $("#ehour01").val() + ' } }';
        var intHrs = ($('#emin23').val() == "hrs") ? intval : "00";
        var intMins = ($('#emin23').val() == "mins") ? intval : "00";
        var mH = ($('#emin23').val() == "mins") ? "minute" : "hour";
        if($("#editInc").val() == 1){
            if ($.trim($('#emSch').val()) == "" || !mschValidate($.trim($('#emSch').val()))) {
                modalalert('showalerts', "Please enter valid manual schedule.");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                return false;
            }
            incrementalCron = '{ "repeat": { "-": "-" },"days": "-","startTime": { "hour": "-" },"endTime": { "hour": "-" } }';
            manualCron = '"'+$("#emSch").val()+'"';
        }else{
            incrementalCron = '{ "repeat": { "' + mH + '": "*/' + $("#escInterval").val() + '" },"days": [ "*" ],"startTime": { "hour": ' + $("#ehour11").val() + ' },"endTime": { "hour": ' + $("#ehour12").val() + ' } }';
            manualCron = '""';
        }

        var data = prepare_schedule_data('Edit', initialCron, incrementalCron, manualCron);
        if (!data){
          return false;
        }

        $.ajax({
            type: "PUT",
            url: uri,
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                modalalert('showalerts', "Schedule updated successfully");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('.scheid').click();
            },
            error: function (errMsg) {
                if (errMsg.status == 409) {
                    modalalert('showalerts', "Schedule already exists");
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                }
            }
        });
    } else {
        modalalert('showalerts', "Name/Interval should not be empty");
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
    $('#escName').val("");
}

function getInitialCron(startHour, startMinute, endHour, endMinute) {
    var crons = [];
    var endCron = '{"minute": " ' + endMinute + ' ","hour":" ' + endHour + ' ","day": "*","month": "*","day_of_week": "*","hidden_start_hour":"' + startHour + '","hidden_start_minute":"' + startMinute + '"}';
    if (endHour > startHour || (endHour == startHour) && (endMinute > startMinute)) {
        getCronStrings(15, startHour, startMinute, endHour, endMinute, crons);
    } else {
        getCronStrings(15, startHour, startMinute, 23, 59, crons);
        getCronStrings(15, 0, 0, endHour, endMinute, crons);
    }
    crons.push(endCron);
    return crons;
}

function getIncrementalCron(intervalhour, intervalmins) {
    var index = 0;
    var crons = new Array();
    if (intervalhour != "00") {
        crons[index] = '{"minute": "0","hour": "*/' + intervalhour + '","day": "*","month": "*","day_of_week": "*"}';
    } else if (intervalmins != "00") {
        crons[index] = '{"minute": "*/' + intervalmins + '","hour": "*","day": "*","month": "*","day_of_week": "*"}';
    }
    return crons;
}

function deleteScheduler(uid) {
    $("#deleteSchedule").modal("show");
    $("#delSche").attr("onclick", "DelSchedule('" + uid + "')");
}

function disableScheduler(url) {
    if ($('#eschcheck').prop('checked')) {
        saveScheduler(url);
    } else {
        $("#disableSchedule").modal("show");
        $("#disableSche").attr("onclick", "saveScheduler('" + url + "')");
    }
}

function DelSchedule(uid) {
    $("#deleteSchedule").modal("hide");
    var uri = "/api/schedules/" + uid;
    $.ajax({
        url: uri,
        type: 'DELETE',
        success: function (data) {
            modalalert('showalerts', "Schedule deleted successfully.");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            getScheduler();
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    getScheduler();
    $('.scheid').click();
}

function setupSelector(element, start_range, end_range, step, selected_item, pseudonym="") {
  $(element).html("");
  var title = (pseudonym == "") ? start_range : pseudonym;
  $(element).append('<option value="' + start_range + '">' + title + '</option>');
  for (let i = start_range+step; i <= end_range; i+=step) {
    $(element).append('<option value="' + i + '">' + i + '</option>');
  }
  $(element + ' option[value=' + selected_item + ']').attr('selected', 'selected');
}

function get_interval(type_selector, time_selector){
  let interval =  ($(type_selector).val() == 'hour' || $(time_selector).val() == 0) ? 60 : $(time_selector).val();
  return interval || 60;
}

function getEndBackupRange(type_selector_business, type_selector_non_business, time_selector_business, time_selector_non_business) {
  var interval_business = get_interval(type_selector_business, time_selector_business);
  var interval_non_business = get_interval(type_selector_non_business, time_selector_non_business);
  if (interval_business == 60 && interval_non_business == 60) {
    return 59;
  }
  return ((interval_business < interval_non_business) ? interval_business : interval_non_business) - 1;
}

function editScheduler(uid) {
    $('#emSch').val("");
    $(".titlename").text("Edit Schedule")
    window.location.href = "#editScheduler";
    setTimeout('$("#escName").trigger("focus")', 900);
    var location = "";
    var data = eval('[' + $('#' + uid + '').val() + ']');
    $.each(data, function (k, item) {
        $('#escName').val(item.name);
        if (item.name == "default") {
            $('#escName').attr("disabled", "disabled");
        } else {
            $('#escName').removeAttr("disabled", "disabled");
        }

        var type = item.type || "classic";
        var isClassic = type == "classic";
        $('input[name=escheduletype][value=' + ( isClassic ? '"classic"': '"policyBased"') + ']').click();

        var endBackupOffsetRange;

        if ("initialbackup" in item) {
            var initialBackup = item.initialbackup;
            var startTime = "";
            var endTime = "";
            var startHr = initialBackup.startTime.hour;
            var startMn = initialBackup.startTime.minute;
            var endHr = initialBackup.endTime.hour;
            var endMn = initialBackup.endTime.minute;
            clearCachedSelection('ehour01', startHr);
            clearCachedSelection('emin01', startMn);
            clearCachedSelection('ehour02', endHr);
            clearCachedSelection('emin02', endMn);

            if(item.incrementalbackup.startTime.hour == "-"){
                $('#editInc').val("1");
                showSch('editInc');
                $('#emSch').val(item.manualIncBackup);
            }else{
                $('#editInc').val("0");
                showSch('editInc');
                var incrementalBackup = item.incrementalbackup;
                var intra = "";
                var intramins = "";
                var intrahr = "";
                startHr = incrementalBackup.startTime.hour;
                endHr = incrementalBackup.endTime.hour;
                clearCachedSelection('ehour11', startHr);
                clearCachedSelection('ehour12', endHr);
                intrahr = incrementalBackup.repeat.hour;
                intramins = incrementalBackup.repeat.minute;
                intra = (intrahr != undefined) ? intrahr : intramins;
                intra = intra.split("\/")
                intra = intra[1];
                if (intrahr != undefined) {
                    setupSelector('#escInterval', 1, 24, 1, intra);
                    $('#emin23 option[value=hrs]').attr('selected', 'selected');
                    endBackupOffsetRange = 59;
                } else {
                    setupSelector('#escInterval', 15, 30, 15, intra);
                    $('#emin23 option[value=mins]').attr('selected', 'selected');

                    endBackupOffsetRange = intra - 1;
                }

                setupSelector('#eOffsetBackupClassic', 0, endBackupOffsetRange, 1, item.offsetBackup);
                setupSelector('#eOffsetBackupPolicy', 0, endBackupOffsetRange, 1, item.offsetBackup);
            }

            setupControl('ebackupbusiness', "hour", 0);
            setupControl('ebackupnbusiness', "hour", 0);
        } else {
            $('#editInc').val("0");
            showSch('editInc');
            $('#escInterval').html('');
            setupSelector('#escInterval', 1, 24, 1, 0);
            $('#emin23 option[value=hrs]').attr('selected', 'selected');
            setupSelector('#eOffsetBackupClassic', 0, 59, 1, item.offsetBackup);
            $('#ehour01').val("0");
            $('#ehour02').val("0");
            $('#ehour11').val("0");
            $('#ehour12').val("0");
            $('#emin01').val("0");
            $('#emin02').val("0");
        }

        if (item.isEnabled) {
            $('#eschcheck').prop('checked', true);

        } else {
            $('#eschcheck').prop('checked', false);
        }
        if (item.isDefault) {
            $('#editdefault').prop('checked', true);
            $("#editdefault").attr("disabled", "disabled");
            $('.squaretwo label').css("cursor", "default");
        } else {
            $('#editdefault').prop('checked', false);
            $("#editdefault").removeAttr("disabled", "disabled");
            $('.squaretwo label').css("cursor", "pointer");
        }
        $("#escdsName").val(item["description"] || "");

        cleanSchedulerData(true);
        if ("businessHours" in item) {
            for (const day in item["businessHours"]) {
                var dayData = item["businessHours"][day];
                $("#epolicyenable" + day).prop("checked", true).trigger("change");
                $("#epshour" + day).val(dayData["startTime"]["hour"]);
                $("#epsmin" + day).val(dayData["startTime"]["minute"]);
                $("#epehour" + day).val(dayData["endTime"]["hour"]);
                $("#epemin" + day).val(dayData["endTime"]["minute"]);
            }
        }

        if ("backup" in item) {
            $("#eallowbusinesscheck").prop("checked", item["backup"]["businessHours"]["allowFull"]);
            var repeatTypeBusiness = Object.keys(item["backup"]["businessHours"]["repeat"])[0];
            setupControl('ebackupbusiness', repeatTypeBusiness, item["backup"]["businessHours"]["repeat"][repeatTypeBusiness])

            $("#eallownbusinesscheck").prop("checked", item["backup"]["nonBusinessHours"]["allowFull"]);
            var repeatTypeNonBusiness = Object.keys(item["backup"]["nonBusinessHours"]["repeat"])[0];
            setupControl('ebackupnbusiness', repeatTypeNonBusiness, item["backup"]["nonBusinessHours"]["repeat"][repeatTypeNonBusiness])

            endBackupOffsetRange = getEndBackupRange("#ebackupbusinesstype", "#ebackupnbusinesstype", "#ebackupbusinesstime", "#ebackupnbusinesstime");
            setupSelector('#eOffsetBackupPolicy', 0, endBackupOffsetRange, 1, item.offsetBackup);
        } else {
            $("#eallowbusinesscheck,#eallownbusinesscheck").prop("checked", false);
            $("#ebackupbusinesstype,#ebackupnbusinesstype").val("hour");
            $("#ebackupnbusinesstime").val("0");
            $("#ebackupbusinesstime").val("1");
            checkBackupOffsetPolicy('Edit');
        }
        if ("throttling" in item) {
            $("#ethrottlingdbh").val(item["throttling"]["businessHours"]["disk"]);
            $("#ethrottlingdnbh").val(item["throttling"]["nonBusinessHours"]["disk"]);
            $("#ethrottlingnbh").val(item["throttling"]["businessHours"]["network"]);
            $("#ethrottlingnnbh").val(item["throttling"]["nonBusinessHours"]["network"]);
            $("#eallowthrottling").prop("checked", item["throttling"]["isEnabled"]).trigger("change");
        } else {
            $("#eallowthrottling").prop("checked", false).trigger("change");
            $("#ethrottlingdbh,#ethrottlingdnbh,#ethrottlingnbh,#ethrottlingnnbh").val("0");
        }
    });
    $('#editSc').attr("onclick", "disableScheduler('/api/schedules/" + uid + "')");
}

function checkBackupOffsetClassic(type) {

    var pre = (type == 'Add') ? "" : "e";
    var type_selector = '#'+ pre + 'min23';
    var offset_selector = '#' +pre + 'OffsetBackupClassic';
    var end_range = $('#'+ pre + 'scInterval').val() - 1;

    if ($(type_selector).val() == "hrs"){
      return;
    }

    var offset = $(offset_selector).val();
    if (offset > end_range){
        offset = generateBackupOffset(0, end_range);
    }
    setupSelector(offset_selector, 0, end_range, 1, offset);
}

function checkBackupOffsetPolicy(type) {
    var type_selector_business;
    var type_selector_non_business;
    var offset_selector;
    var time_selector_business;
    var time_selector_non_business;

    if (type == "Add") {
        type_selector_business = '#backupbusinesstype';
        type_selector_non_business = '#backupnbusinesstype';
        offset_selector = '#OffsetBackupPolicy';
        time_selector_business = '#backupbusinesstime';
        time_selector_non_business = '#backupnbusinesstime';
    }else {
        type_selector_business = '#ebackupbusinesstype';
        type_selector_non_business = '#ebackupnbusinesstype';
        offset_selector = '#eOffsetBackupPolicy';
        time_selector_business = '#ebackupbusinesstime';
        time_selector_non_business = '#ebackupnbusinesstime';
    }

    var end_range = getEndBackupRange(type_selector_business, type_selector_non_business, time_selector_business, time_selector_non_business)
    var offset = $(offset_selector).val();

    if (offset > end_range) {
      offset = generateBackupOffset(0, end_range);
    }

    setupSelector(offset_selector, 0, end_range, 1, offset);
}

function checkMins(type) {
    var pre = (type == 'Add') ? "" : "e";
    var type_selector = '#'+ pre + 'min23';
    var time_selector = '#' + pre + 'scInterval';
    var offset_selector = '#' + pre + 'OffsetBackupClassic';

    var offset = $(offset_selector).val();
    var end_range = 59;

    if ($(type_selector).val() == "hrs") {
        setupSelector(time_selector, 1, 24, 1, 1);
    }else {
        setupSelector(time_selector, 15, 30, 15, 15);
        end_range = 14;
        if (offset > end_range){
          offset = generateBackupOffset(0, end_range);
        }
    }
    setupSelector(offset_selector, 0, end_range, 1, offset);
}

function checkIntval(intval) {
    var intv = parseInt(intval);
    if (intv > 23 || intv < 1) {
        modalalert('showalerts', "Interval should be 1 to 23 as hours ");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    } else {
        return true;
    }
}

function scnamevalidate() {
    if ($('#scName').val() == "default" || $('#scName').val() == "") {
        modalalert('showalerts', "Name should not be 'default' or empty");
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
}

function escnamevalidate() {
    if ($('#escName').val() != "default" && $('#escName').val() != "") {
        //  $("#editSc").removeAttr("disabled","disabled");
    } else {
        modalalert('showalerts', "Name should not be 'default' or empty");
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
}

function schedulesTable() {
    $("#backup-policies-container").show();
    $("#retention-policies-container").hide();
    $("#scheduler a").removeClass("active");
    $("#backup-policies-tab").addClass("active");
    if ($.fn.dataTable.isDataTable("#scTable")) {
        $("#scTable").DataTable().columns.adjust();
    }
}

function retentionsTable() {
    $("#backup-policies-container").hide();
    $("#retention-policies-container").show();
    $("#scheduler a").removeClass("active");
    $("#retention-policies-tab").addClass("active");
    if ($.fn.dataTable.isDataTable("#reTable")) {
        $("#reTable").DataTable().columns.adjust();
    }
}

/************Jobs****************/
function btable() {
    document.getElementById('Hideheader').style.display = 'none';
    $("#jobs_user_select_container").show();
    getJobs('backup_jobs');
    $('#Refresh').attr('onclick', 'getJobs("backup_jobs")');
    $('#jobs').find('.js-jobs-category-tab').removeClass('active');
    $('#backupbtn').addClass('active');
}

function vtable() {
    document.getElementById('Hideheader').style.display = isAppliance() ? '' : 'none';
    $("#jobs_user_select_container").show();
    getJobs('vault_jobs');
    $('#Refresh').attr('onclick', 'getJobs("vault_jobs")');
    $('#jobs').find('.js-jobs-category-tab').removeClass('active');
    $('#vaultbtn').addClass('active');
}

function seedingTable() {
    document.getElementById('Hideheader').style.display = 'none';
    $("#jobs_user_select_container").hide();
    getJobs('seeding_jobs');
    $('#Refresh').attr('onclick', 'getJobs("seeding_jobs")');
    $('#jobs').find('.js-jobs-category-tab').removeClass('active');
    $('#seedingbtn').addClass('active');
}

function ctable() {
    document.getElementById('Hideheader').style.display = '';
    $("#jobs_user_select_container").hide();
    getJobs('conversion_jobs');
    $('#Refresh').attr('onclick', 'getJobs("conversion_jobs")');
    $('#jobs').find('.js-jobs-category-tab').removeClass('active');
    $('#convbtn').addClass('active');
}

function stable() {
    document.getElementById('Hideheader').style.display = 'none';
    $("#jobs_user_select_container").hide();
    getJobs('system_jobs');
    $('#Refresh').attr('onclick', 'getJobs("system_jobs")');
    $('#jobs').find('.js-jobs-category-tab').removeClass('active');
    $('#sysbtn').addClass('active');
}

function remoteJobsTable() {
    document.getElementById('Hideheader').style.display = '';
    $("#jobs_user_select_container").hide();
    getJobs('remote_management_jobs');
    $('#Refresh').attr('onclick', 'getJobs("remote_management_jobs")');
    $('#jobs').find('.js-jobs-category-tab').removeClass('active');
    $('#agentbtn').addClass('active');
}

function isAdmin() {
    return $.jStorage.get("user") == "admin";
}

function isAppliance() {
    return window.glob === 'appliance'
}

function isVault() {
    return window.glob === 'vault'
}

function getSpinner(title) {
    return '<div class="sk-circle" title="' + title + '"><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div><div class="sk-circle-dot"></div></div>';
}

function get_sorted_users(users){
    users.sort(function(a, b){
        let prev = a.userName.toLowerCase(), next = b.userName.toLowerCase();
        return prev===next?0:prev>next?1:-1;
    });
    return users
}

function initUserFilter(userFilterSelector, includeAllClients=true) {
    let containerName = userFilterSelector + '_container';
    if (isVault() && $.jStorage.get("user") == "admin") {
        $.ajax({
            type: "GET",
            url: "/api/users",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (users) {
                let sorted_users = get_sorted_users(users);
                $(userFilterSelector).empty();
                if (includeAllClients) {
                    $(userFilterSelector).append(new Option("All Clients", "0"));
                }
                for (let i = 0; i < sorted_users.length; i++) {
                    if (sorted_users[i].userName !== "admin") {
                        $(userFilterSelector).append(new Option(sorted_users[i].userName, sorted_users[i]._id));
                    }
                }
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
        $(containerName).show();
    } else {
        $(containerName).hide();
    }
}

function getJobs(jobType) {
    var collection = jobType || 'backup_jobs';

    var typ = jobType === 'conversion_jobs' ? 'format' : 'type';
    var typtitle = jobType === 'conversion_jobs' ? 'Format' : 'Type';
    var excludeLastColumn = jobType === 'conversion_jobs' ? false : true;
    var auxColumnProperty = 'percentageComplete';
    var auxColumnTitle = 'Completed Volumes';
    let auxColumnOrderable = false;

    if (jobType === 'remote_management_jobs') {
        typ = "typeName";
        auxColumnProperty = 'status';
        auxColumnTitle = 'Result';
    }

    if (isAppliance() && jobType === 'vault_jobs') {
        auxColumnProperty = 'vault';
        auxColumnTitle = 'Vault';
        auxColumnOrderable = true;
    }

  const columns = [
            {mDataProp: "protectedSystemName", defaultContent: "", width:"13%", className: "dtWrapTd"},
            {mDataProp: "protectedSystemAlias", defaultContent: "", width:"13%", className: "dtWrapTd", "orderable": false},
            {mDataProp: "type", defaultContent: "", width:"10%", title: typtitle, data: typ},
            {mDataProp: "startedAt", defaultContent: "", width:"11%", type: "date"},
            {mDataProp: "endedAt", defaultContent: "", width:"11%", type: "date"},
            {mDataProp: "status", defaultContent: "", width:"9%"},
            {mDataProp: auxColumnProperty, orderable: auxColumnOrderable, defaultContent: "", width:"11%", title: auxColumnTitle, data: auxColumnProperty},
        ]

    if (isVault()) {
      columns.splice(5, 0,  {mDataProp: "userName", "orderable": false, defaultContent: "", width:"15%", className: "dtWrapTd"});
    }

    var oTable = $('.bTable').dataTable($.extend({}, defaultDataTablesOptions, {
        bDestroy: true,
        bStateSave: true,
        bProcessing: true,
        bServerSide: true,
        "autoWidth": false,
        aaSorting: [],
        sAjaxSource: 'api/' + collection,
        fnServerParams: function(aoData) {
            appendUserIdFromClientFilterToDataArray("#jobs_user_select", aoData)
            appendLoginToDataArray(aoData)
        },
        dom: 'B<"clear"><"top"lpf>rt<"clear">rtip',
        buttons: addButtons('Jobs', excludeLastColumn),
        columns: columns,
        "fnRowCallback": function (nRow, aData, iDisplayIndex) {
            var jsontext = JSON.stringify(aData);
            var obj = JSON.parse(jsontext);
            aData.information = escapeHtml(aData.information);

            var pauseBtn = '';
            if (aData.type == "Incremental Backup" || aData.type == "Full Backup") {
                var btitle = aData.information || "Pause";
                pauseBtn = '<span class="jobs-percentage">' + obj.percentageComplete + '%</span>' + '<a class="btn btn-default" onclick="pauseJob(\'' + aData.protectedSystemId + '\'); " href="#pauseJobMsg" data-toggle="modal" title="' + btitle + '"><div class="button-content"><span class="button-text">Pause</span></div></a>';
            } else if (obj.percentageComplete != undefined) {
                var percentage = obj.percentageComplete;
                if ((jobType == "system_jobs" && isVault() && aData.type === "Network Recovery") || (jobType == "vault_jobs" && isVault() && aData.type != "Seed Import" && aData.type != "URL Seed Import") || aData.type.startsWith("Replicating snapshot")) {
                    pauseBtn = '<span class="jobs-percentage">' + percentage + '</span>';
                } else {
                    pauseBtn = '<span class="jobs-percentage">' + percentage + '</span>' + '<a class="btn btn-default" onclick="killJob(\'' + jobType + '\',\'' + aData._id + '\',\'' + aData.machineId + '\'); " data-toggle="modal" href="#killJobMsg" title="Stop"><div class="button-content"><span class="button-text">Stop</span></div></a>';
                }
            }

            var statusImg = '';
            var statusInformation = aData.information || aData.status;
            if (aData.status == "Running") {
                var running_title = "Running";
                if (aData.information != "undefined" && aData.information) {
                    running_title += ". " + aData.information;
                }
                statusImg = '<div data-role="fieldcontain" style="display: flex; align-items: center">' + getSpinner(running_title) + pauseBtn + '</div>';
            } else if (aData.status == "Completed") {
                statusImg = '<span class="icon-checkmark-circular table-icon table-icon-success" title="Completed"></span>';
            } else if (aData.status == "Waiting" && jobType == "vault_jobs") {
                statusImg = '<div data-role="fieldcontain">' + getSpinner('Waiting to be ingested') + '</div>';
            } else if (aData.status == "ManuallyPaused") {
                var resume_title = "Resume";
                if (aData.information != "undefined" && aData.information) {
                  resume_title += ". " + aData.information;
                }
                statusImg = '<span class="jobs-percentage">' + obj.percentageComplete + ' %</span>' + '<a onclick="resumeBackup(\'/api/protected_systems/' + aData.protectedSystemId + '/resume_backup\');" href="#jobs" class="btn btn-default" title="' + resume_title + '"><div class="button-content"><span class="button-text">Resume</span></div></a>';
            } else if (aData.status == "Missed") {
                statusImg = '<span class="icon-alarm-circular table-icon table-icon-warning" title="' + statusInformation + '"></span>';
            } else if (aData.status == "Paused") {
                if (jobType == "vault_jobs") {
                    statusImg = '<span class="icon-pause table-icon table-icon-failure" title="' + statusInformation + '"></span> <span class="jobs-percentage">' + percentage + '</span>';
                } else if (jobType == "backup_jobs") {
                    statusImg = '<span class="icon-pause table-icon table-icon-failure" title="' + statusInformation + '"></span> <span class="jobs-percentage">' + obj.percentageComplete + '%</span>';
                } else {
                    statusImg = '<span class="icon-pause table-icon table-icon-failure" title="' + statusInformation + '"></span>';
                }
            } else if (aData.status == "Failed" && aData.typeName == "Delete Agent"){
                statusImg = '<span class="icon-alarm table-icon table-icon-failure" title="' + aData.status + '"></span>';
            } else {
                statusImg = '<span class="icon-alarm table-icon table-icon-failure" title="' + statusInformation + '"></span>';
            }
            $('td:eq(0)', nRow).html(aData.protectedSystemName);
            $('td:eq(1)', nRow).html(aData.protectedSystemAlias);
            var endTime = (aData.endedAt == "") ? '-' : aData.endedAtFormatted;
            var startTime = aData.startedAtFormatted;
            $('td:eq(3)', nRow).html(startTime);
            aData.startedAt = startTime;
            $('td:eq(4)', nRow).html(endTime);
            aData.endedAt = endTime;
            if (isVault()) {
              $('td:eq(5)', nRow).html(aData.userName);
              $('td:eq(6)', nRow).html(statusImg);
              var hidden_column = $('td:eq(7)', nRow)
            }
            else {
              $('td:eq(5)', nRow).html(statusImg);
              var hidden_column = $('td:eq(6)', nRow)
            }

            if ((jobType == "vault_jobs" && isAppliance()) || jobType == "remote_management_jobs") {
                hidden_column.removeClass('Hidecol');

                if (jobType == "remote_management_jobs") {
                  var resultHtml = "";
                  if (aData.downloadUrl) {
                    resultHtml +=
                      '<a href="' + aData.downloadUrl + '" class="btn btn-default">' +
                      '<div class="button-content"><span class="button-text">Export</span></div>' +
                      '</a>'
                  }
                  resultHtml +=
                    '<a onclick="deleteAgentJob(\'' + aData._id + '\');" data-toggle="modal" href="#deleteJobMsg" title="Delete Job" class="btn btn-default">' +
                      '<div class="button-content"><span class="button-text">Delete</span></div>' +
                    '</a>';
                  hidden_column.html(resultHtml);
                }

            } else if (jobType == "conversion_jobs") {
                var completedVolumes = undefined;
                if (aData.completedVolumes) {
                    aData.percentageComplete = aData.completedVolumes;
                    completedVolumes = '<a title="Completed Volumes">' + aData.completedVolumes + '</a>'
                } else {
                    completedVolumes = '<div>-</div>'
                }
                hidden_column.html(completedVolumes).removeClass('Hidecol');
            } else {
                hidden_column.html(' ').addClass('Hidecol');
            }
            return nRow;
        }
    }));
}

function pauseJob(aid) {
    $('#pauseRJob').attr("onclick", "pauseBackup('/api/protected_systems/" + aid + "/pause_backup')");
}

function killJob(type, aid, mid) {
    $('#killRJob').attr("onclick", "killJobNow('" + type + "', '" + aid + "', '" + mid + "')");
}

function killJobNow(type, aid, mid) {
    modalalert('showalerts', "Please wait while job stopping");
    $.ajax({
        url: "/api/" + type + "/" + aid + "/killJob",
        type: 'POST',
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            if (data.status === "ok") {
                modalalert('showalerts', data.msg);
                setTimeout("$('#showalerts').modal('hide'); getJobs('" + type + "');", 3000);
            } else {
                modalalert('showalerts', data.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    $("#killJobMsg").modal('hide');
    setTimeout("getJobs('" + type + "');", 3000);

}

function pauseBackup(uri) {
    $.ajax({
        url: uri,
        type: 'POST',
        success: function (data) {
            if (data === "Error") {
                modalalert('showalerts', "Paused backup Error");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            } else {
                modalalert('showalerts', "Paused backup successfully.");
                setTimeout("$('#showalerts').modal('hide');getJobs('backup_jobs');", 3000);
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    $("#pauseJobMsg").modal('hide');
    setTimeout("getJobs('backup_jobs');", 3000);
}

function resumeBackup(uri) {
    $.ajax({
        url: uri,
        type: 'POST',
        success: function (data) {
            if (data === "Resumed") {
                modalalert('showalerts', "Resuming backup in progress. Please wait for 30 seconds...");
                setTimeout("$('#showalerts').modal('hide');getJobs('backup_jobs');", 3000);
            } else {
                modalalert('showalerts', data);
                setTimeout("$('#showalerts').modal('hide');getJobs('backup_jobs');", 3000);

            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    getJobs('backup_jobs');
}

function deleteAgentJob(id) {
    $('#deleteJobBtn').off().on("click", function() {
      doDeleteAgentJob(id);
    });
}

function doDeleteAgentJob(job_id) {
  $.ajax({
    url: "/api/remote_management_jobs/" + job_id + "/delete_job",
    type: 'POST',
    contentType: "application/json; charset=utf-8",
    dataType: "json",
    success: function (data) {
      showModalAlertWithTimeout(data.msg);
      if (data.status === "ok") {
        getJobs('remote_management_jobs');
      }
    },
    error: function (result) {
      sessionTimeout(result);
    }
  });
  $("#deleteJobMsg").modal('hide');
}

function validate() {
    var uname = document.getElementById("adduname").value;
    if (uname == "admin" || uname == "root") {
        $('#savePass').attr("disabled", "disabled");
        $('#Alertuser').show()
    } else if (uname != "admin" || uname != "root") {
        $('#savePass').removeAttr("disabled", "disabled");
        $('#Alertuser').hide()
    }
}

function savePass() {
    var currentPassword = $('#currentPassword').val();

    if (currentPassword === '') {
        modalalert('showalerts', "Current password cannot be empty");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return;
    }

    var newPassword = $('#newPassword').val();
    var newPassword2 = $('#confirmPassword').val();

    if (newPassword === '') {
        modalalert('showalerts', "New password cannot be empty");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return;
    }

    if (newPassword !== newPassword2) {
        modalalert('showalerts', "Passwords don't match");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return;
    }

    if (!testPassword(newPassword, USER_PASSWORD_MIN_LENGTH, USER_PASSWORD_MAX_LENGTH, true, true, true)) {
        modalalert('showalerts', "New password doesn't meet the minimum requirements");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return;
    }

    var urllink = '/api/users/' + $("#userpassid").val() + '/changePassword';
    var data = {
      currentPassword: currentPassword,
      newPassword: newPassword
    };
    $.ajax({
        type: "POST",
        url: urllink,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.success) {
                $('#currentPassword').val('');
                $('#newPassword').val('');
                $('#confirmPassword').val('');
            }

            modalalert('showalerts', data.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            $("#altMsg").html("<h3>Password not updated</h3>");
            $("#altMsgPopup").modal("show");
            sessionTimeout(result);
        }
    });
}
/***********Alert********************/

function getAlerts() {
    var oTable;
    modalalert('showalerts', "Loading...");
    var oTable = $('#alertTable').dataTable($.extend({}, defaultDataTablesOptions, {
        "bDestroy": true,
        "bAutoWidth": false,
        "bStateSave": false,
        "bProcessing": true,
        "bServerSide": true,
        "_iFirstPage": false,
        "aaSorting": [[4, 'desc']],
        dom: 'B<"clear"><"top"lpf>rt<"clear">rtip',
        buttons: addButtons('Alerts', true),
        "bAutoWidth": false,
        "sAjaxSource": "api/alerts",
        "aoColumns": [
            {
                "mDataProp": "protectedSystemName",
                "sDefaultContent": "",
                "sWidth": "20%"
            },
            {
                "mDataProp": "hostName",
                "sDefaultContent": "",
                "sWidth": "15%"
            },
            {
                "mDataProp": "type",
                "sWidth": "15%"
            },
            {
                "mDataProp": "title",
                "sWidth": "15%"
            },
            {
                "mDataProp": "creationTime",
                "sWidth": "10%"
            },
            {
                "mDataProp": "resolutionTime",
                "sWidth": "10%"
            },
            {
                "mDataProp": "occurrence",
                "sWidth": "5%"
            },
            {
                "mDataProp": "state",
                "sWidth": "auto"
            }
        ],
        "aoColumnDefs": [
            {
                "aTargets": [0, 1],
                "sClass": "dtWrapTd"
            },
            {
                "aTargets": [7],
                "sClass": "dtNoWrap"
            }
        ],
        "fnServerParams": function (aoData) {
            aoData.push({
                "name": "state",
                "value": "active"
            })
            aoData.push({
                "name": "state",
                "value": "auto"
            })
            appendLoginToDataArray(aoData)
        },
        "fnRowCallback": function (nRow, aData, iDisplayIndex) {
            var hostname = aData.hostName ? aData.hostName.replace('/', ' ') : '';
            var ticketId = aData.serviceticketid ? 'Ticket ID: ' + aData.serviceticketid : '';

            var stateName;
            var stateIcon;
            switch (aData.state) {
            case 'auto':
                stateName = 'Active';
                stateIcon = 'icon-alarm-circular table-icon-warning';
                break;
            case 'active':
                stateName = 'Active';
                stateIcon = 'icon-alarm table-icon-failure';
                break;
            case 'resolved':
                stateName = 'Cleared';
                stateIcon = 'icon-checkmark-circular table-icon-success';
                break;
            case 'Auto Cleared':
                stateName = 'Auto Cleared';
                stateIcon = 'icon-checkmark-circular table-icon-success';
                break;
            case 'CW Cleared':
                stateName = 'CW Cleared';
                stateIcon = 'icon-checkmark-circular table-icon-success';
                break;
            case 'Manually Cleared':
            default:
                stateName = 'Closed';
                stateIcon = 'icon-checkmark-circular table-icon-success';
                break;
            }

            $('td:eq(1)', nRow).html(hostname);
            aData.protectedSystemId = hostname;

            $('td:eq(4)', nRow).html(aData.creationTimeFormatted ? insert(aData.creationTimeFormatted, 13, '</br>') : '—');
            $('td:eq(5)', nRow).html(aData.resolutionTimeFormatted ? insert(aData.resolutionTimeFormatted, 13, '</br>') : '—');

            var occur = (typeof aData.occurrence !== 'undefined') ? aData.occurrence : '—';
            $('td:eq(6)', nRow).html(occur);

            var title = stateName;
            if (ticketId) {
                title += ' (' + ticketId + ')';
            }

            var closeLink = '';
            if (!aData.resolutionTime) {
                closeLink = aData.state !== 'auto' ? '<a onclick="closeAlert(\'' + aData._id + '\');" class="btn btn-default"><div class="button-content"><span class="button-text">Close</span></div></a>' : '';
            }

            $('td:eq(7)', nRow).html('<span class="table-icon ' + stateIcon + '" title="' + title + '"></span>' + closeLink);

            return nRow;
        }
    }));
    setTimeout("$('#showalerts').modal('hide');", 3000);
    $('#alertRefresh').attr("onclick", "getAlerts()");
}

function closeAlert(aid) {
    $('#clearAlert').attr("onclick", "clearAlert('/api/alerts/" + aid + "/closeAlert')");
}

function closeAlert(aid) {
    var uri = "/api/alerts/" + aid + "/closeAlert";
    $.ajax({
        url: uri,
        type: 'POST',
        success: function (data) {
            getAlerts();
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    setTimeout("getAlerts();", 300);
    $('#alLink').click();
}

/**********file browser*******************/

function setNodes() {
    var nodeData = $.ajax({
        url: "api/nodes",
        async: false,
        error: function (result) {
            sessionTimeout(result);
        }
    }).responseText;
    var nodes = {};
    nodeData = eval(nodeData);
    $.each(nodeData, function (index, value) {
        nodes[value.clusterMachineId] = value.ip + "#" + value.machineName;
    });
    return nodes;
}

function getMountedVolumes() {
    var mid = $("#fbserverid").val();
    var is_vault_admin = $.jStorage.get("user") == "admin" && window.glob == "vault";
    var mountedVolTable = '<div class="table-responsive"><table border="0" class="display mountedVolTable"><thead><tr><th>Protected System Name</th>' + (is_vault_admin ? '<th>User Name</th>' : '') + '<th>Snapshot Time</th><th>Actions</th></tr></thead><tbody>';
    var mountedVol = $("#mountedLst");
    mountedVol.empty();
    $.ajax({
        type: "POST",
        url: 'api/utilities/abc/listMountedVolumes',
        headers: {
            "Replibit-Server": mid
        },
        success: function (data) {
            $.each(data, function (j, value) {
                var snapshotName = value.snapshotName;
                var psId = snapshotName.split('@')[0];
                var date = snapshotName.split('@')[1];
                date = date.split('_');
                var snapDate = monthNames[date[1] - 1] + ' ' + date[2] + ' ' + formatTime(date[3], date[4], date[5]);
                var dismount = '<a id="mountButton' + j + '" class="btn btn-default" onclick="dismount(\'' + value.snapshotName + '\', \'dismount\', \'' + psId + '\', ' + value.isEncrypted + ', \'' + mid + '\')"><div class="button-content"><snap class="button-text">Dismount</snap></div></a>';
                mountedVolTable += '<tr><td class="dtWrapTd" width="35%">' + value.systemName + (is_vault_admin ? ('</td><td width="25%">' + value.userName) : '') + '</td><td width="25%">' + snapDate + '</td><td width="15%">' + dismount + '</td></tr>';
            });
            mountedVolTable += '</tbody></table></div>';
            mountedVol.html("");
            mountedVol.append(mountedVolTable).trigger("create");
            $('.mountedVolTable').dataTable($.extend({}, defaultDataTablesOptions, {
                dom: '<"top"lpf>rt<"clear">rtip',
                "aaSorting": [[is_vault_admin ? 2 : 1, "desc"]],
                "bDestroy": true,
                "aoColumnDefs": [{
                    "bSortable": false,
                    "aTargets": [is_vault_admin ? 3 : 2]
                }]
            }));
        },
        error: function (result) {
            modalalert('showalerts', "Error loading mounted volumes list");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function getFileBrowser() {
    var testip = "";
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#fbserverid").val();
    var select = $('#fbserverid');
    select.empty();
    $.each(nodes, function (key, val) {
        var name = val.split('#');
        var urlip = "";
        if (name[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = name[0];
        }
        var id = (mid != "" || mid == $.jStorage.get("machineId")) ? mid : $.jStorage.get("machineId");
        var sel = (key == id) ? " selected " : "";
        $("#fbserverid").append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
    });
    mid = $("#fbserverid").val();
    var urlData = 'fileBrowser/';
    $("#frameBrowser").attr("src", urlData);
    if (mid != "") {
        var url = nodes[mid];
        url = url.split("#");
        var urlip = "";
        if (url[0] == '127.0.0.1') {
            urlip = location.host;
            testip = urlip;
        } else {
            urlip = url[0];
            testip = urlip;
        }
        url = "https://" + urlip + "/fileBrowser/?sourceip=" + location.host;
        var iflist = $.ajax({
            type: "POST",
            url: "/api/utilities/abc/getNetworkDetails",
            contentType: "application/json; charset=utf-8",
            headers: {
                "Replibit-Server": mid
            },
            dataType: "json",
            async: false
        }).responseText;
        iflist = (iflist == undefined) ? "" : iflist;
        if (showSessionTimedOutIfUnauthorized(iflist)) {
            return false;
        }
        ifData = JSON.parse(iflist);
        $.each(ifData, function (j, value) {
            //if(value.interface == "eth0" && value.address != ""){
            //  url ="https://"+value.address+"/fileBrowser/?sourceip="+value.address;
            //}
            if (value.address == testip) {
                url = "https://" + value.address + "/fileBrowser/?sourceip=" + location.host;
            }
        });
        $("#frameBrowser").attr("src", url);
    }

}

function setFileBrowser() {
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#fbserverid").val();
    if (mid != "") {
        var url = nodes[mid];
        url = url.split("#");
        var urlip = "";
        if (url[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = url[0];
        }
        url = "https://" + urlip + "/fileBrowser/?sourceip=" + location.host;
        var iflist = $.ajax({
            type: "POST",
            url: "/api/utilities/abc/getNetworkDetails",
            contentType: "application/json; charset=utf-8",
            headers: {
                "Replibit-Server": mid
            },
            dataType: "json",
            async: false
        }).responseText;
        iflist = (iflist == undefined) ? "" : iflist;
        if (showSessionTimedOutIfUnauthorized(iflist)) {
            return false;
        }
        ifData = JSON.parse(iflist);
        $.each(ifData, function (j, value) {
            if (value.interface == "eth0" && value.address != "") {
                url = "https://" + value.address + "/fileBrowser/?sourceip=" + location.host;
            }
        });
        $("#frameBrowser").attr("src", url);
    }
}

/****************** NFS ******************/
function getNfs () {
    getNfsStatus(function (err, isEnabled) {
        if (err) {
            modalalert('showalerts', "Error getting NFS status");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
            return;
        }

        $("#enable-nfs-check").prop("checked", isEnabled);
        if (isEnabled) {
            getNfsAllowedIps();
        } else {
            $("#allowed-ips-table").hide()
        }
    });
}

function getFtp() {
    getFtpStatus(function (err, isEnabled) {
        if (err) {
            showModalAlertWithTimeout("Error getting FTPS status.");
            sessionTimeout(result);
            return;
        }

        $("#enable-ftps-check").prop("checked", isEnabled);
        if (isEnabled) {
            $("#ftps-table").show();
            getFtpsUsers();
        } else {
            $("#ftps-table").hide()
        }
    });
}


function updateNfsStatus () {
    var isEnabled = $("#enable-nfs-check").prop("checked");
    var action = isEnabled ? "enableNfsExports" : "disableNfsExports";
    modalalert("showalerts", "Please wait while updating NFS status.");
    $.ajax({
        type: "POST",
        url: "api/utilities/abc/" + action,
        success: function (data) {
            if (isEnabled) {
                getNfsAllowedIps();
            } else {
                $("#allowed-ips-table").hide()
            }
            $('#showalerts').modal('hide');
        },
        error: function (result) {
            modalalert('showalerts', "Error updating NFS status");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function updateFtpsStatus () {
    var isEnabled = $("#enable-ftps-check").prop("checked");
    var action = isEnabled ? "enableFTPAccess" : "disableFTPAccess";
    var modalMessage = isEnabled ? "Enabling FTPS service" : "Disabling FTPS service";
    modalalert('showalerts', modalMessage);
    $.ajax({
        type: "POST",
        url: "api/utilities/abc/" + action,
        success: function (data) {
            if (isEnabled) {
                $("#ftps-table").show();
                getFtpsUsers();
            } else {
                $("#ftps-table").hide()
            }
            $('#showalerts').modal('hide');
        },
        error: function (result) {
            showModalAlertWithTimeout("Error updating FTPS status.");
            sessionTimeout(result);
        }
    });
}

function getNfsStatus (callback) {
    $.ajax({
        type: "POST",
        url: "api/utilities/abc/isNfsEnabled",
        success: function (isEnabled) {
            callback(null, isEnabled);
        },
        error: function (err) {
            callback(err);
        }
    });
}

function getFtpStatus(callback) {
    $.ajax({
        type: "POST",
        url: "api/utilities/abc/isFTPAccessEnabled",
        success: function (isEnabled) {
            callback(null, isEnabled);
        },
        error: function (err) {
            callback(err);
        }
    });
}

function getNfsAllowedIps() {
    let privateAdmin = isPrivateVaultAdmin();
    $('#nfsList').empty();
    if (isPrivateVault()) {
        $("#allowed-ips-table").show();
    }
    if (privateAdmin) {
        var nfsAllowedIpsData = '<div class="table-responsive"><table border="0" class="display nfsTable" width="100%"><thead><tr><th>Client</th><th>IP Address</th><th></th></tr></thead><tbody>';
    } else {
        var nfsAllowedIpsData = '<div class="table-responsive"><table border="0" class="display nfsTable" width="100%"><thead><tr><th>IP Address</th><th></th></tr></thead><tbody>';
    }
    $.ajax({
        type: "POST",
        url: "api/utilities/abc/listNfsAllowedIps",
        success: function (data) {
            if (privateAdmin) {
                $.each(data, function (user) {
                    $.each(data[user], function (i, ipAddress) {
                        var delLink = '<a onclick="removeNfsAllowedIp(\'' + ipAddress + '\'' + ',\'' + user + '\'' + ');" href="#networkSharing"><span class="icon-delete table-icon active" title="Delete"></span></a>';
                        nfsAllowedIpsData += '<tr>' + '<td class="dtWrapTd">' + user + '</td>' + '<td class="dtWrapTd">' + ipAddress + '</td><td>' + delLink + '</td></tr>';
                    });
                });
            } else {
                if (!isPrivateVault() && data.length === 0) {
                    $("#enable-nfs-check").prop("checked", false);
                    $('#addNfsAllowedIpModal').modal('show');
                    return;
                }
                $("#allowed-ips-table").show();
                $.each(data, function (i, ipAddress) {
                    var delLink = '<a onclick="removeNfsAllowedIp(\'' + ipAddress + '\');" href="#networkSharing"><span class="icon-delete table-icon active" title="Delete"></span></a>';
                    nfsAllowedIpsData += '<tr><td class="dtWrapTd">' + ipAddress + '</td><td>' + delLink + '</td></tr>';
                });
            }
            nfsAllowedIpsData += '</tbody></table></div>';
            $('#nfsList').html(nfsAllowedIpsData).trigger('create');
            $('.nfsTable').dataTable($.extend({}, defaultDataTablesOptions, {
                dom: '<"top"lpf>rt<"clear">rtip',
                "aaSorting": [[0, "asc"]],
                "bDestroy": true,
                "bAutoWidth": false,
                "aoColumns":
                    privateAdmin ? [
                        { "sWidth": "50%" },
                        { "sWidth": "45%" },
                        { "sWidth": "5%" }
                    ] : [
                        { "sWidth": "95%" },
                        { "sWidth": "5%" }
                    ],
                "aoColumnDefs": [{
                    "bSortable": false,
                    "aTargets": privateAdmin ? [1, 2] : [1]
                }]
            }));
        },
        error: function (result) {
            modalalert("showalerts", "Error loading NFS allowed IPs");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function getFtpsUsers() {
    $('#ftpsList').empty();
    var ftpsUsersData = '<div class="table-responsive"><table border="0" class="display ftpsTable" width="100%"><thead><tr><th style="width: 100%;">Users</th><th style="width: 100%;">FTPS URL</th><th>Password</th></tr></thead><tbody>';
    $.ajax({
        type: "POST",
        url: "api/utilities/abc/getFTPUsers",
        success: function (data) {
            if ($.isEmptyObject(data)) {
                return;
            }
            $.each(data, function (i, userData) {
                var password = '<input className="form-input" type="password" name="HiddenFtpUserPas" style="margin-right: 10px" disabled="disabled" readonly value="************">'
                var showPassword = '<a id="showPassword" onclick="showFtpPassword(this)" data-username="' + userData["username"] + '" class="btn btn-default"><div class="button-content"><span class="button-text">Show password</span></div></a>'
                ftpsUsersData += '<tr><td class="dtWrapTd">' + userData["ftp_username"] + '</td>' + '<td>' + userData["server"] +  '</td>' + '<td><div style="width: 400px">' + password + showPassword +'</div></td></tr>';
            });

            ftpsUsersData += '</tbody></table></div>';
            $('#ftpsList').html(ftpsUsersData).trigger('create');
            $('.ftpsTable').dataTable($.extend({}, defaultDataTablesOptions, {
                dom: '<"top"lpf>rt<"clear">rtip',
                "aaSorting": [[0, "asc"]],
                "bDestroy": true,
                "bAutoWidth": false,
                "aoColumns": [
                    {
                        "sWidth": "auto"
                    },
                    {
                        "sWidth": "auto"
                    },
                    {
                        "sWidth": "400px"
                    }
                ],
                "aoColumnDefs": [{
                    "bSortable": false,
                    "aTargets": [1,2]
                }]
            }));
        },
        error: function (result) {
            showModalAlertWithTimeout("Error loading FTP Users.");
            sessionTimeout(result);
        }
    });
}

function showFtpPassword(elem) {
    let $passwordField = $(elem).prev();
    let $buttonText = $(elem).find(".button-text");
    if ($passwordField.prop("type") === "password") {
        modalalert('showalerts', "Retrieving Password");
        let username = $(elem).data("username");
        $.ajax({
            type: "POST",
            url: "api/utilities/abc/getFTPUserData",
            data: JSON.stringify({username: username}),
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                $buttonText.text("Hide password");
                $passwordField.val(result["password"]);
                $passwordField.prop('type', 'text');
                $passwordField.removeAttr('disabled');
                $('#showalerts').modal('hide');
            },
            error: function (result) {
                showModalAlertWithTimeout("Error loading FTP User.");
                sessionTimeout(result);
            }
        });
    } else {
        $buttonText.text("Show password");
        $passwordField.prop('type', 'password');
        $passwordField.attr('disabled', 'disabled');
    }
}

function enableAgentField(elem) {
    let $agentField = $(elem).parent().parent().find(".agent-field");
    if ($(elem).prop("checked")) {
        $agentField.removeAttr('disabled');
    } else {
        $agentField.attr('disabled', 'disabled');
    }
}

function enableAgentUserField() {
    if ($('#agent-username-checkbox').prop("checked")) {
        $('#agent-username').removeAttr('disabled');
        $('#agent-password').removeAttr('disabled');
    } else {
        $('#agent-username').attr('disabled', 'disabled');
        $('#agent-password').attr('disabled', 'disabled');
    }
}

function removeExtraWhiteSpaceFromPath(inputPathsString) {
    let pathsArray = inputPathsString.split(",");
    let outputStringPath = "";
    for (let i=0; i<pathsArray.length; i++) {
        if (pathsArray[i].match(/^\s*$/) == null) {
            outputStringPath += pathsArray[i].trim() + ",";
        }
    }
    return outputStringPath.slice(0, -1);
}

const AGENT_UNINSTALL_JOB_TYPE = 5;

function showAgentSettingsModal() {
  $('#psPasswordAgentSettings').val('');
  toggleAgentConfigSaveButton();
  $('#agentSettingsModal').modal('show');
}

function agentSettingsSaveAction() {
  if ($('#uninstallAgent').prop("checked")) {
    $('#agentSettingsModal').modal('hide');
    $('#uninstallAgentPopup').modal('show');
  } else {
    saveAgentSettings();
  }
}

function uninstallAgent() {
  if ($.jStorage.get("psystemid") != undefined) {
    createRemoteManagementJob($.jStorage.get("psystemid"), AGENT_UNINSTALL_JOB_TYPE, {password: $('#psPasswordAgentSettings').val()});
    $('#agent-settings-btn').hide();
    $('#agentSettingsModal').modal('hide');
  }
}

function saveAgentSettings() {
    if ($.jStorage.get("psystemid") != undefined) {
        let psid = $.jStorage.get("psystemid");
        let data = {};

        //General Settings
        if (!$("#agent-backup-volumes").prop("disabled")) {
            //Use different regex for older agent version
            let ValidBackupVolumesRegex = "";
            data["backup_volumes"] = removeExtraWhiteSpaceFromPath($("#agent-backup-volumes").val().trim());
            if (versionCompare($('#agentVersion').html(), "3.0.0") >= 0) {
                ValidBackupVolumesRegex = new RegExp("^(([^,&@^*]+,)*[^,&@^*]+)?$");
            } else {
                ValidBackupVolumesRegex = new RegExp("^(([a-zA-Z],)*[a-zA-Z])?$");
            }
            if (!ValidBackupVolumesRegex.exec(data["backup_volumes"])) {
                $('#agentSettingsModal').modal('hide');
                modalalert("showalerts", "Error in the Backup volumes field.");
                setTimeout("$('#showalerts').modal('hide');$('#agentSettingsModal').modal('show');", 3000);
                return;
            }
        }
        if (!$("#agent-compression").prop("disabled")) {
            data["use_compression"] = $("#agent-compression").val() ? "true" : "false";
            if (data["use_compression"] == "true") {
                data["compression_level"] = $("#agent-compression").val();
            }
        }
        if (!$("#agent-fast-delta").prop("disabled")) {
            data["use_fastdelta"] = $("#agent-fast-delta").val();
        }

        //Advanced Settings
        if (!$("#agent-number-of-connections").prop("disabled")) {
            data["num_connections"] = $("#agent-number-of-connections").val();
        }
        if (!$("#agent-number-of-workers").prop("disabled")) {
            data["num_workers"] = $("#agent-number-of-workers").val();
        }
        if (!$("#agent-ignored-mount-points").prop("disabled")) {
            data["ignore_mount"] = $("#agent-ignored-mount-points").val();
        }
        if (!$("#agent-csv").prop("disabled")) {
            data["enable_csv"] = $("#agent-csv").val();
        }

        //Local Cache Settings
        if (!$("#agent-path").prop("disabled")) {
            data["local_cache_path"] = $("#agent-path").val();
        }
        if (!$("#agent-username").prop("disabled")) {
            data["local_cache_user_name"] = $("#agent-username").val();
            if ($("#agent-password").val()) {
                data["local_cache_password"] = $("#agent-password").val();
            }
        }
        if (isPsEncrypted(psid)) {
          data["password"] = $("#psPasswordAgentSettings").val();
        }

        let jobType = 4;
        createRemoteManagementJob(psid, jobType, data);
        $('#agentSettingsModal').modal('hide');
    }
}

function createRemoteManagementJob(psId, jobType, params) {
    $.ajax({
        url: '/api/remote_management_jobs',
        type: 'POST',
        data: JSON.stringify({
            protectedSystemId: psId,
            type: jobType,
            params: params
        }),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (rs) {
            showModalAlertWithTimeout(rs.msg);
        },
        error: function (rs) {
            showModalAlertWithTimeout("Error");
            sessionTimeout(rs);
        }
    });
}

function addNfsAllowedIp () {
    var ipAddress = $.trim($('#nfsIpAddress').val());
    if (!isHostName(ipAddress) && !isIpAddress(ipAddress)) {
        modalalert('showalerts', "Please insert valid Hostname or IP Address");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    data = { ipAddress: ipAddress };
    if (isPrivateVaultAdmin()) {
        let client = $("#nfs_user_select option:selected").text();
        if (!client) {
            return showModalAlertWithTimeout("Please select a client");
        }
        data.client = client;
    }
    $.ajax({
        type: "POST",
        url: "/api/utilities/abc/addNfsAllowedIp",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            getNfs();
            $('#addNfsAllowedIpModal').modal('hide');
            $('#nfsIpAddress').val("");
            modalalert("showalerts", data.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            modalalert("showalerts", "Error adding IP address");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function removeNfsAllowedIp (ipAddress, userName) {
    var data = { ipAddress: ipAddress };
    if (isPrivateVaultAdmin()) {
        data.userName = userName;
    }
    $.ajax({
        type: "POST",
        url: "api/utilities/abc/removeNfsAllowedIp",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            getNfs();
            modalalert("showalerts", data.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            modalalert("showalerts", "Error removing IP address");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

/******************iSCSI******************/
function getIscsi() {
    $("#tilte").text("iSCSI")
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#isserverid").val();
    var select = $('#isserverid');
    select.empty();
    $.each(nodes, function (key, val) {
        var name = val.split('#');
        var urlip = "";
        if (name[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = name[0];
        }
        var id = (mid != "" || mid == $.jStorage.get("machineId")) ? mid : $.jStorage.get("machineId");
        var sel = (key == id) ? " selected " : "";
        $("#isserverid").append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
    });
    mid = $("#isserverid").val();
    var iscsiSPData = '<div class="table-responsive"><table border="0" class="display iscsiIqnTable "><thead><tr><th>PROTECTED SYSTEM NAME</th><th>SNAPSHOT TIME</th><th>IQNs</th><th>ACTIONS</th></tr></thead><tbody>';
    $("#iscsiLst").empty();
    var iscspt = $("#iscsiLst");
    $.ajax({
        type: "POST",
        url: 'api/utilities/abc/listIscsiTargets',
        headers: {
            "Replibit-Server": mid
        },
        success: function (data) {
            $.each(data, function (j, value) {
                var snapD = value.snapshotName;
                snapD = snapD.split('@');
                var psId = snapD[0];
                snapD = snapD[1];
                snapD = snapD.split('_');
                var usDate = monthNames[(snapD[1] - 1)] + ' ' + snapD[2] + ' ' + snapD[0] + ' ' + snapD[3] + ':' + snapD[4] + ':' + snapD[5];
                usDate = (formatTime(snapD[3], snapD[4], snapD[5]));
                usDate = monthNames[(snapD[1] - 1)] + ' ' + snapD[2] + ' ' + usDate;
                var umount = '<a id="iscsiButton' + j + '" onclick="iscsiDismount(\'' + value.snapshotName + '\',\'destroyIscsiTarget\')" href="#iscsi" class="btn btn-default"><div class="button-content"><span class="button-text">Stop</span></div></a>';
                var iqnTable = "";
                iqnTable += '<div>';
                if (value.portal) {
                  iqnTable += '<div>' + '<span class="text-weight-bold">' + 'Portal:&nbsp;</span>' + value.portal + '</div>';
                }
                if (value.chap) {
                  iqnTable += '<div>' + '<span class="text-weight-bold">' + 'CHAP User:&nbsp;</span>' + value.chap.user + '</div>';
                  iqnTable += '<div>' + '<span class="text-weight-bold">' + 'Password:&nbsp;</span>' + value.chap.password + '</div>';
                }
                Object.keys(value.mountIqns).sort().forEach(function(key) {
                    iqnTable += '<div style="display: flex; word-break: break-all">' + '<span class="text-weight-bold">' + key + ':&nbsp;</span>' + value.mountIqns[key] + '</div>';
                });
                iqnTable += "</div>";
                iscsiSPData = iscsiSPData + '<tr><td class="dtWrapTd" width="15%">' + value.systemName + '</td><td width="15%">' + usDate + '</td><td width="55%">' + iqnTable + '</td><td width="15%">' + umount + '</td></tr>';
            });
            iscsiSPData = iscsiSPData + '</tbody></table></div>';
            iscspt.html("");
            iscspt.append(iscsiSPData).trigger("create");
            $('.iscsiIqnTable').dataTable($.extend({}, defaultDataTablesOptions, {
                dom: '<"top"lpf>rt<"clear">rtip',
                "aaSorting": [[1, "desc"]],
                "bDestroy": true,
                "aoColumnDefs": [{
                    "bSortable": false,
                    "aTargets": [3]
                }]
            }));
            if (window.glob == "vault" && $.jStorage.get("user") == "admin") {
                $('#iscsiIqnTable a').attr("disabled", "disabled");
                $('#iscsiIqnTable a').attr("onclick", "");
                $('#iscsiIqnTable a').attr("href", "#");
                $('#iscsiIqnTable a').attr("disabled", "disabled");
            }
        },
        error: function (result) {
            modalalert('showalerts', "Error loading iscsi target list.");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });

}

function configureIscsi(snapUrl, spaction, psid, check, mid) {
    if (check) {
        $('#iscsiencpass').val('');
        $("#enc-pass-iscsi").show();
    } else {
        $("#enc-pass-iscsi").hide();
    }

    $('#useSmartRecovery-iscsi').prop('checked', true);
    smartRecoveryUsageCheck($('#useSmartRecovery-iscsi').parent(), psid, snapUrl);

    $('#iscsi-mode-0').prop('checked', true);
    $('#iscsi-mode-1').prop('checked', false);

    $('#start-iscsi').attr("onclick", 'startIscsi(\'' + snapUrl + '\',\'' + spaction + '\',\'' + psid + '\',' + check + ',\'' + mid + '\')');

    $('#iscsiSettings').modal("show");
}

function startIscsi(snapUrl, spaction, psid, check, mid) {
    $('#iscsiSettings').modal('hide');

    var passdata = {
        mode: $('input[name=iscsi-mode]:radio:checked').val()
    };

    if (!$('#useSmartRecovery-iscsi').parent().hasClass("hidden")) {
        passdata.use_smart_recovery = $('#useSmartRecovery-iscsi').prop('checked');
    }

    if (check) {
        var pass = $('#iscsiencpass').val();
        if (!pass) {
            modalalert('showalerts', "Please enter the password");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }

        passdata.encpass = pass;
        $('#iscsiencpass').val('');
    }

    modalalert('showalerts', "Starting iSCSI target");
    $.ajax({
        type: "POST",
        url: 'api/snapshots/' + snapUrl + '/' + spaction,
        data: JSON.stringify(passdata),
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            if (data.status == true) {
                modalalert('showalerts', data.msg);
                setTimeout(function () {
                    viewDetails(psid);
                }, 3000);
                $("#iscsiButton").attr("onclick", 'iscsiStop(\'' + snapUrl + '\',\'destroyIscsiTarget\',' + check + ')');
                $("#iscsiButton").text("iSCSI Stop");
            } else {
                modalalert('showalerts', data.msg);
                setTimeout(function () {
                    viewDetails(psid);
                }, 3000);
                $("#iscsiButton").attr("onclick", 'configureIscsi(\'' + snapUrl + '\',\'createIscsiTarget\',' + check + ')');
                $("#iscsiButton").text("iSCSI Start");
            }
        },
        error: function (result) {
            $('#showalerts').modal('hide');
            $("#altMsg").html("<h3>Error starting  iSCSI target</h3>");
            $("#altMsgPopup").modal("show");
            $("#iscsiButton").attr("onclick", 'configureIscsi(\'' + snapUrl + '\',\'createIscsiTarget,\',' + check + ')');
            $("#iscsiButton").html("iSCSI Start");
            sessionTimeout(result);
        }
    });
}

function iscsiStop(snapUrl, spaction, psid, check, mid) {
    modalalert('showalerts', "Stopping iSCSI target");
    $.ajax({
        type: "POST",
        url: 'api/snapshots/' + snapUrl + '/' + spaction,
        headers: {
            "Replibit-Server": mid
        },
        success: function (data) {
            if (data.status == true) {
                modalalert('showalerts', "iSCSI target stopped successfully");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $("#iscsiButton").attr("onclick", 'iscsiStart(\'' + snapUrl + '\',\'createIscsiTarget\')');
                $("#iscsiButton").text("iSCSI Start");
                viewDetails(psid);
            } else {
                modalalert('showalerts', "Stopping iSCSI target failed");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $("#iscsiButton").attr("onclick", 'iscsiStop(\'' + snapUrl + '\',\'destroyIscsiTarget\')');
                $("#iscsiButton").text("iSCSI Stop");
                viewDetails(psid);
            }
        },
        error: function (result) {
            $('#showalerts').modal('hide');
            $("#altMsg").html("<h3>Error stoping  iSCSI target</h3>");
            $("#altMsgPopup").modal("show");
            $("#iscsiButton").attr("onclick", 'iscsiStop(\'' + snapUrl + '\',\'destroyIscsiTarget\')');
            $("#iscsiButton").text("iSCSI Stop");
            viewDetails(psid);
            sessionTimeout(result);
        }
    });
}

function getTerminal(snapUrl, spaction, mid) {
    var urllink = 'api/snapshots/' + snapUrl + '/' + spaction;
    $.ajax({
        type: "POST",
        url: urllink,
        headers: {
            "Replibit-Server": mid
        },
        success: function (url) {
            if (url.status == true) {
                var popUp = window.open(url.msg, '_blank', 'width=1024, height=798, toolbar=no, location=no, menubar=no');
                if (popUp == null || typeof(popUp) === 'undefined') {
                    modalalert('showalerts', "Please allow the popup window to see the VNC console.");
                    setTimeout("$('#showalerts').modal('hide');", 5000);
                }
            } else {
                modalalert('showalerts', url.msg);
                setTimeout("$('#showalerts').modal('hide');", 5000);
            }
        }
    });
}
$("#image").on("keydown", function (event) {
    if (event.keyCode == 13) {
        $("#startV").click();
    }
});

function getCdImages() {
    var response = $.ajax({
        type: "GET",
        url: "api/getCdImages",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: false
    }).responseText;

    response = (typeof response === 'undefined') ? "" : response;
    return JSON.parse(response).images;
}

function getPhysicalInterfaces() {
    var interfaces = undefined;

    var response = $.ajax({
        type: "POST",
        url: "api/utilities/abc/getPhysicalInterfaces",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: false,
        success: function (result) {
            interfaces = result
        }
    });

    return interfaces || [];
}

function configureVirtualization(snapUrl, spaction, psid, check, mid) {
    var kvmlimit = $.ajax({
        type: "POST",
        url: "api/utilities/abc/kvmLimitations",
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        async: false
    }).responseText;
    kvmlimit = (kvmlimit == undefined) ? "" : kvmlimit;
    if (showSessionTimedOutIfUnauthorized(kvmlimit)) {
        return false;
    }

    $('#useSmartRecovery-virt').prop('checked', true);
    smartRecoveryUsageCheck($('#useSmartRecovery-virt').parent(), psid, snapUrl);

    var snap_network_interfaces = fetchSnapshotNetworkInterfaces(snapUrl);

    if (!snap_network_interfaces.status) {
        modalalert('showalerts', snap_network_interfaces.msg);
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return;
    }

    $('#ram').val(2);
    $('#cpu').val(2);
    $('#bootkey').val('');
    $('#bootdev').val('hd');
    $('#image').html('<option value="" selected>None</option>"');
    $('#vm_ifaces').html('');
    $('#virtioSetupCheck').prop('checked', true);
    $('#vm_new_mac_config').hide();
    $('#vm_add_new_interface').text('Add new interface');
    $('#vm_new_iface').html('');
    $('#vm_new_mac').val('');

    kvmlimit = JSON.parse(kvmlimit);
    var fram = getSize(kvmlimit['freeram']);
    if (check) {
        $('#vmencpass').val("");
        $("#encPassVM").show();
    } else {
        $("#encPassVM").hide();
    }

    setTimeout('$("#ram").trigger("focus")', 900);
    $('#fram').html('Free: ' + fram);

    $('#vm-mode-0').prop('checked', true);
    $('#vm-mode-1').prop('checked', false);
    $('#vm_network_config').hide();
    $('input[type=radio][name=vm-mode]').off('change').on("change", function (){
        $('#vm_network_config').toggle();
    });

    var images = getCdImages();
    images.forEach(function (image) {
        $('#image').append('<option value="' + image.name +'">' + image.name + '</option>');
    });

    var vm_iface = '<div>MAC {MAC}</div><div class="select-container"><select name="{MAC}" id="vm_iface_{index}"></select></div>';
    snap_network_interfaces.network_interfaces.forEach(function(interface, index){
        var content = vm_iface.replace(/{MAC}/g, interface.mac).replace(/{index}/, index);
        $("#vm_ifaces").append(content);
    });

    var psysicalInterfaces = getPhysicalInterfaces();
    psysicalInterfaces.forEach(function (physicalInterface) {
        noneInterface = '<option value="">None</option>';
        actualInterface = '<option value="' + physicalInterface +'">' + physicalInterface + '</option>';
        $('[id^="vm_iface_"]').append(actualInterface);
        $('[id^="vm_iface_"]').append(noneInterface);
    });

    $('#startV').attr('onclick', 'checkVirtSettings(\'' + snapUrl + '\',\'' + spaction + '\',\'' + psid + '\',' + check + ',\'' + mid + '\')');

    $('#virtualizationSettings').modal("show");
}

function toggleNewInterface() {
    const textButtonEnabled = "Add new interface";
    const textButtonDisabled = "Remove new interface";
    const isButtonEnabled = $('#vm_add_new_interface').text() == textButtonEnabled;

    $('#vm_add_new_interface').text(isButtonEnabled ? textButtonDisabled : textButtonEnabled);
    $('#vm_new_mac_config').toggle();

    if(isButtonEnabled) {
        $('#vm_new_mac').val(generateRandomMac())
        const options = $('[id^="vm_iface_"]:first > option[value!=]').clone();
        $('#vm_new_iface').html(options);
    }
}

function isMacMulticast(mac) {
    const multicast_byte = parseInt(mac.charAt(1), 16);
    return (0x1 & multicast_byte) === 1;
}


function isFirstByteMacReserved(mac) {
    const reserved_value = "fe";

    return mac.toLowerCase().substr(0,2) == reserved_value;
}

function isMacAddressValid(mac) {
    const valid_mac_regex = /^([0-9a-f]{2}:){5}([0-9a-f]{2})$/;

    // the least bit of the first byte cannot be 1, otherwise the VM will not start as it would be multicast mac address
    return valid_mac_regex.test(mac.toLowerCase()) && !isMacMulticast(mac) && !isFirstByteMacReserved(mac);
}

function generateRandomMac() {
    var pre_generated_mac = "XY:XX:XX:XX:XX:XX".replace(/X/g, function() {
        return "0123456789abcdef".charAt(Math.floor(Math.random() * 16))
      });

      var second_hexa = "02468ac";   // avoid multicast bit

      if(pre_generated_mac.substr(0, 1) !== "f")   // avoid reserved value for libvirt on the first byte - 0xFE
        second_hexa += "e";

      return pre_generated_mac.replace(/Y/g, function() {
        return second_hexa.charAt(Math.floor(Math.random() * second_hexa.length))
      });
}

function stopok(snapUrl, spaction, psid, check, mid) {
    $("#shutdown-mode-0").prop("checked", true);
    $("#shutdown-mode-1").prop("checked", false);
    $("#buttonok").attr("onclick", 'stopVirt(\'' + snapUrl + '\',\'' + spaction + '\',\'' + psid + '\',' + check + ',\'' + mid + '\')');
    $('#stop').modal("show");
}

function stopVirt(snapUrl, spaction, psid, check, mid, forceStop) {
    modalalert('showalerts', "Stopping instance of this system, this may take some time...");
    if (forceStop === undefined) {
        forceStop = $('input[name=shutdown-mode]:radio:checked').val() === "1";
    }
    var urlData = {
        forceStop: forceStop
    };
    $.ajax({
        type: "POST",
        data: JSON.stringify(urlData),
        url: 'api/snapshots/' + snapUrl + '/' + spaction,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            if (data.status == true) {
              modalalert('showalerts', "Virtual machine stopped.");
            } else {
                modalalert('showalerts', data.msg);
            }
            setTimeout("viewDetails('" + psid + "');", 3000);
        },
        error: function (result) {
            $('#showalerts').modal('hide');
            $("#altMsg").html("<h3>Error stopping instance of this system</h3>");
            $("#altMsgPopup").modal("show");
            $("#virtualButton").attr("onclick", 'configureVirtualization(\'' + snapUrl + '\',\'started\')', "data-toggle", "modal");
            viewDetails(psid);
            sessionTimeout(result);
        }
    });
    $('#stop').modal("hide");
}

function iscsiDismount(snapUrl, spaction) {
    modalalert('showalerts', "Stopping iSCSI target");
    $.ajax({
        type: "POST",
        url: 'api/snapshots/' + snapUrl + '/' + spaction,
        success: function (data) {
            if (data.status == true) {
                modalalert('showalerts', "iSCSI target stopped successfully");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                getIscsi();
                $('#icLink').click();
            } else {
                modalalert('showalerts', "Stopping iSCSI target failed", 3000);
                setTimeout("$('#showalerts').modal('hide');", 3000);
                getIscsi();
                $('#icLink').click();
            }
        },
        error: function (result) {
            $('#showalerts').modal('hide');
            $("#altMsg").html("<h3>Error stoping  iSCSI target</h3>");
            $("#altMsgPopup").modal("show");
            sessionTimeout(result);
        }
    });
}

function dismount(snapUrl, spaction, id, check, mid) {
    modalalert('showalerts', "Dismounting...");
    var urllink = 'api/snapshots/' + snapUrl + '/' + spaction;
    $.ajax({
        type: "POST",
        url: urllink,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            if (data.status == true) {
                modalalert('showalerts', "Successfully dismounted");
                setTimeout("viewDetails('" + id + "');", 3000);
            } else {
                modalalert('showalerts', "An error ocurred while dismounting");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
            getMountedVolumes();
            getFileBrowser();
        },
        error: function (result) {
            modalalert('showalerts', "An error ocurred while dismounting");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function mountSnapshot(snapUrl, spaction, _id, check, mid) {
    if (check) {
        $('#newencpass').val("");
        $("#encPassMountVM").show();
        $("#encryptPass").modal("show");
        setTimeout('$("#newencpass").trigger("focus")', 900);
        $("#submitEncPass").attr("onclick", 'mountSnap(\'' + snapUrl + '\',\'' + spaction + '\',\'' + _id + '\',' + check + ',\'' + mid + '\')');
    } else {
        mountSnap(snapUrl, spaction, _id, check, mid);
    }

}

/**
* Update fields for password encrypted migrations
*/
function updatePasswordMigrateField(){
    if ($("#migrateList").val().indexOf("'password':'True'") !== -1) {
      $('#ipwddiv').toggle(true);
    }else{
      $('#ipwddiv').toggle(false);
      $('#ipwd').val('');
    }
}

$("#migrateList").on("change", function (event) {
    if (event.keyCode == 13) {
        $("#imPSlink").click()
    }
    updatePasswordMigrateField();
});
$("#recPSList").on("change", function (event) {
    if (event.keyCode == 13) {
        $("#recpslink").click();
    }
});
$("#recVIP").on("keyup", function (event) {
    if (event.keyCode == 13) {
        $("#TestVIp").click();
    }
});
$("#newencpass").on("keyup", function (event) {
    if (event.keyCode == 13) {
        $("#submitEncPass").click();
    }
});
$("#xencpass").on("keyup", function (event) {
    if (event.keyCode == 13) {
        $("#startExport").click();
    }
});
$("#vmencpass").on("keyup", function (event) {
    if (event.keyCode == 13) {
        $("#startV").click();
    }
});

function mountSnap(snapUrl, spaction, _id, check, mid) {
    var pass = $('#newencpass').val();
    $('#newencpass').val('');
    var passdata = {};
    if (check) {
        if (pass === '') {
            modalalert('showalerts', 'Please enter the encryption password');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }

        passdata.encpass = pass;
    }

    modalalert('showalerts', 'Mounting...');
    $.ajax({
        type: 'POST',
        url: 'api/snapshots/' + snapUrl + '/' + spaction,
        data: JSON.stringify(passdata),
        contentType: 'application/json; charset=utf-8',
        headers: {
            'Replibit-Server': mid,
        },
        dataType: 'json',
        success: function (data) {
            if (data.status) {
                modalalert('showalerts', data.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('.fileBrow').click();
            } else {
                modalalert('showalerts', data.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        },
        error: function (result) {
            modalalert('showalerts', 'Mount failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });

    $('#encryptPass').modal('hide');
}

function configureExport(snapUrl, spaction, _id, check, mid) {
    $("#SRExportCheck").prop("checked", true).trigger("change");
    // Encryption password
    if (check) {
        $('#xencpass').val('');
        $("#encPassExport").show();
        setTimeout('$("#xencpass").trigger("focus")', 900);
    } else {
        $('#encPassExport').hide();
    }

    // Volume list
    $.ajax({
        type: 'POST',
        url: 'api/snapshots/' + snapUrl + '/volume_list',
        contentType: 'application/json; charset=utf-8',
        headers: {
            'Replibit-Server': mid,
        },
        dataType: 'json',
        success: function (data) {
            if (data.status == true) {
                $('#export-volume-list, #export-volume-list-sr').html('');
                var volumes = data.volumes;
                for (var i=0; i< volumes.length; i++) {
                    $('#export-volume-list').append(
                        '<span><label class="checkbox w-fit">' +
                            '<span class="text">' + volumes[i][1] + '</span>' +
                            '<input name="export-volume" checked="checked" class="checkbox-input" type="checkbox" value="' + volumes[i][0] + '">' +
                            '<div class="checkbox-indicator"></div>' +
                        '</label></span>'
                    );
                }
                for (let disk in data.disks) {
                    let volumes = [];
                    let volumesGUIDs = [];
                    for (let volume in data.volumes) {
                        if (data.disks[disk]['volumes'].indexOf(data.volumes[volume][0]) !== -1) {
                            volumes.push(data.volumes[volume][1]);
                            volumesGUIDs.push(data.volumes[volume][0]);
                        }
                    }
                    let volumesString = volumes.join(', ');
                    $('#export-volume-list-sr').append(
                        '<span><label class="checkbox w-fit">' +
                            '<span class="text">Disk' + disk + ' (' + volumesString + ')' + '</span>' +
                            '<input name="export-volume-sr" checked="checked" class="checkbox-input" type="checkbox" value="' + data.disks[disk]['name'] + '">' +
                            '<div class="checkbox-indicator"></div>' +
                        '</label></span>'
                    );
                }
                // Format
                $('#radio-mini-1').prop('checked', true);
                $('#radio-mini-2').prop('checked', false);
                $('#radio-mini-3').prop('checked', false);
                $('#radio-mini-4').prop('checked', false);
                $('#radio-mini-5').prop('checked', false);
                $('#radio-mini-6').prop('checked', false);
                $('#usbSettings').hide();
                $('#usbCheck').prop('checked', false);

                $('#exportSettings').modal('show');
                setTimeout('$("#startExport").trigger("focus")', 900);

                $('#startExport').attr('onclick', 'checkExportSettings(\'' + snapUrl + '\',\'convert\',\'' + _id + '\',' + check + ',\'' + mid + '\')', 'data-toogle', 'modal');
            } else {
                modalalert('showalerts', data.msg);
                setTimeout(function () {
                    viewDetails(psid);
                }, 3000);
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function getSize(size) {
    var fs = size;
    var gb = (parseInt(fs) / (1024 * 1024 * 1024));
    var fspace = gb.toFixed(1);
    return fspace;
}

function checkUsb(target) {
    $('#expagree').show();
    $('#seedagree').show();
    var mid = $('#midps').val();
    var urllink = "api/utilities/abc/getMountedDevices";
    var options = "";
    var targetSelect = (target == "export") ? "usbMountPoint" : "seedMountPoint";
    var targetShow = (target == "export") ? "usbSettings" : "seedSettings";
    $.ajax({
        type: "POST",
        url: urllink,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            if (target == "export") {
                $('#expagree').hide();
                $('#startExport').removeAttr("disabled", "disabled");
            } else {
                $('#seedagree').hide();
                $('#seedlink').removeAttr("disabled", "disabled");
            }
            if (JSON.stringify(data).length <= 2) {
                $('#' + targetSelect).html("");
                $('#' + targetShow).toggle(false);
                if (target == "export") {
                    $('#usbCheck').prop('checked', false);
                } else {
                    $('#seedProtectedSystem').modal("hide");
                    $('#seedCheck').prop('checked', false);
                }
                $('#seedProtectedSystem').addClass("hide");
                modalalert('showalerts', "No USB device connected.");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            } else {
                $('#' + targetSelect).html("");
                $('#' + targetShow).toggle(true);
                var obj = eval(data);
                $.each(data, function (index, value) {
                    var mpt = value.mountPoint;
                    var fs = value.freeSpace;
                    var gb = (parseInt(fs) / (1024 * 1024 * 1024));
                    var fspace = gb.toFixed(2) + 'G';
                    if (parseInt(gb) >= 1024) {
                        gb = (parseInt(gb) / 1024);
                        fspace = gb.toFixed(2) + 'T';
                    }
                    options = options + '<option value="' + index + '$#rEp#$' + fspace + '$#rEp#$' + value.fileSystemType + '" >' + mpt + '</option>'
                });
                $('#' + targetSelect).append(options).trigger("create");
                var index = $('#' + targetSelect).children(':selected').attr('value');
                index = index.split('$#rEp#$');
                $("#space").html(index[1]);
                if (index[2] != 'ntfs') {
                    if (target == "export") {
                        $('#expagree').show();
                        $('#startExport').attr("disabled", "disabled");
                    } else {
                        $('#seedagree').show();
                        $('#seedlink').attr("disabled", "disabled");
                    }
                }
                $('#' + targetSelect).on("change", function (e) {
                    $("#space").html("");
                    index = $('#' + targetSelect).children(':selected').attr('value');
                    index = index.split('$#rEp#$');
                    $("#space").html(index[1]);
                    if (index[2] != 'ntfs') {
                        if (target == "export") {
                            $('#expagree').show();
                            $('#startExport').attr("disabled", "disabled");
                        } else {
                            $('#seedagree').show();
                            $('#seedlink').attr("disabled", "disabled");
                        }
                    }
                });
            }
        },
        error: function (result) {
            $('#' + targetSelect).html("");
            $('#' + targetShow).toggle(true);
            $('#usbCheck').prop('checked', false);

            //.button("refresh");
            $('#seedCheck').prop('checked', false);
            //.button("refresh");
            modalalert('showalerts', "No USB device connected.");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function checkExportSettings(snapUrl, spaction, _id, check, mid) {
  let useSR = $('#SRExportCheck').prop('checked');
  let volumes = [];

  let volumesSelector = useSR ? 'input[name="export-volume-sr"]:checked' : 'input[name="export-volume"]:checked';
  $(volumesSelector).each(function () {
    volumes.push($(this).prop('value'));
  });
  // The backend expects the GUIDs to use underscores
  volumes = volumes.map(function(volume){return volume.replace(/\-/g, '_')})
  if (volumes.length === 0) {
    modalalert('showalerts', 'Please select at least one ' + (useSR ? 'disk' : 'volume'));
    setTimeout("$('#showalerts').modal('hide');", 3000);
    return false;
  }

  var format = $('input[name=radio-export]:radio:checked').val();

  var pass = $('#xencpass').val();
  $('#xencpass').val('');
  if (check) {
    encpass = pass;
    if (pass === '') {
      modalalert('showalerts', 'Please enter the password');
      setTimeout("$('#showalerts').modal('hide');", 3000);
      return false;
    }
  } else {
    encpass = '';
  }

  var usM = ($('#usbCheck').prop('checked')) ? $('#usbMountPoint').val().split('$#rEp#$') : '';
  if ($('#usbCheck').prop('checked')) {
    usbDevice = usM[0];
  } else {
    usbDevice = '';
  }

  if ($('#usbCheck').prop('checked') && usM[2] !== 'ntfs' && !($('#iagreeexport').prop('checked'))) {
      $('#startExport').attr('disabled', 'disabled');
      modalalert('showalerts', 'Please check the I agree checkbox');
      setTimeout("$('#showalerts').modal('hide');", 3000);
      return false;
  }

  var passdata = { format: format };
  if (usbDevice !== '') {
    passdata.usbDevice = usbDevice;
  }

  // Check if the selected volumes are already exported in the selected format
  $.ajax({
    type: "POST",
    url: 'api/snapshots/' + snapUrl + '/get_converted_volumes',
    data: JSON.stringify(passdata),
    contentType: 'application/json; charset=utf-8',
    headers: { 'Replibit-Server': mid },
    dataType: 'json',
    success: function (convertedVolumes) {
      if (convertedVolumes.length === 0) {
        startExport(snapUrl, spaction, _id, mid, volumes, format, encpass, usbDevice);
      } else {
        var conflictingVolumes = [];
        volumes.forEach(function (volume) {
          for (var i = 0; i < convertedVolumes.length; i++) {
            if (convertedVolumes[i].indexOf(volume) > -1) {
              conflictingVolumes.push(volume);
              break;
            }
          }
        });

        if (conflictingVolumes.length === 0) {
          startExport(snapUrl, spaction, _id, mid, volumes, format, encpass, usbDevice);
        } else {
          // Ask user for confirmation before overwritting volumes

          $('#export-conflicting-volumes').html('');
          conflictingVolumes.forEach(function (volume) {
            var driveLetter = window.currentProtectedSystem.volumeMap[volume.replace(/_/g, '-')];
            $('#export-conflicting-volumes').append('<li>' + driveLetter + '</li>');
          });

          var cmd = 'startExport(\'' + snapUrl + '\',\'' + spaction + '\',\'' + _id + '\',\'' + mid + '\',[\'' + volumes.join('\',\'') + '\'],\'' + format + '\',\'' + encpass + '\',\'' + usbDevice + '\')';
          $('#export-confirm-overwrite').attr('onclick', cmd);

          $('#export-overwrite-modal').modal('show');
        }
      }
    }
  });
}

function startExport(snapUrl, spaction, _id, mid, volumes, format, encpass, usbDevice) {
    var passdata = {
      volumes: volumes,
      format: format,
      smartRecovery: $('#SRExportCheck').prop('checked')
    };

    if (encpass !== '') {
      passdata.encpass = encpass;
    }

    if (usbDevice !== '') {
      passdata.usbDevice = usbDevice;
    }

    // Start the export process
    $('#exportSettings').modal('hide');
    $('#export-overwrite-modal').modal('hide');
    modalalert('showalerts', "Starting export, please wait...");
    var urllink = 'api/snapshots/' + snapUrl + '/' + spaction;
    $.ajax({
        type: "POST",
        url: urllink,
        data: JSON.stringify(passdata),
        contentType: "application/json; charset=utf-8",
        headers: { "Replibit-Server": mid },
        dataType: "json",
        success: function (data) {
            viewDetails(_id);
            modalalert('showalerts', data.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            modalalert('showalerts', 'An error has occurred while starting the conversion process, please try again');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function redirect(target, callback) {
    var t = "";
    t = (target != undefined) ? target : "";
    $.ajax({
        url: 'index.html',
        success: function (data) {
            $('.disablingDiv').hide();
            window.location.replace("index.html" + t);
            callback && callback();
        },
        error: function (errMsg) {
            setTimeout("redirect();", 5000);
        }
    });
}
/************Storage *******************/
$(".manageid").on("click", function () {
    getAddStorage();
    storageInitialized();
    connectedIqn();
});

function getAddStorage() {
    if (isInfinityCloudVault()) {
      window.location.replace("index.html");
      return
    }

    var urlData = 'api/storage/abc/pool_extended_status';
    var listStorage = $("#storageData");
    listStorage.html("");
    $.ajax({
        type: "POST",
        url: 'api/storage/abc/pool_extended_status',
        success: function (data) {
            listStorage.html("");
            if (data.is_zpool_configured && data.is_zpool_online) {
                if (data.zpool_status !== '') {
                    listStorage.append('<pre>' + data.zpool_status + '</pre>');
                } else {
                    listStorage.append('<pre>The storage pool is ' + data.zpool_state + '.</pre>');
                }
                $(".nav-pills li").removeClass("disabled");
                $(".nav-pills li a").attr("data-toggle", "tab");
                $(".nav-pills li a").each(function () {
                    if ($(this).attr("href_1") != "undefined") {
                        $(this).attr("href", $(this).attr("href_1"));
                        $(this).attr("onclick", $(this).attr("onclick_1"));
                    }
                });
            } else {
                storageFocusReason = "Please ensure a storage pool is configured first."
                if (!data.is_zpool_configured){
                    listStorage.append('<pre>A storage pool has not yet been configured. Please create one using Add Storage.</pre>');
                } else {
                    supportMsg = "Try to Scan Disks and Mount Pool. Otherwise, contact technical support, or use the <a href='/ssh'>SSH console</a> to check the logs, fix the storage pool, and refresh the page to continue."
                    storageFocusReason = "The storage pool is " + data.zpool_state + ". " + supportMsg
                    poolStatusMsg = ""
                    if (data.zpool_status !== '') {
                        poolStatusMsg = "\n" + String(data.zpool_status).trim()
                    }
                    listStorage.append('<pre>The storage pool is ' + data.zpool_state + ":" + poolStatusMsg + "\n\n" + supportMsg + '</pre>');
                }
                $(".nav-pills li").addClass("disabled");
                $("#getmanagestore").removeClass("disabled");
                $(".nav-pills li a").removeAttr("data-toggle");
                $(".nav-pills li a").each(function () {
                    if ($(this).attr("href") != "#addStorage") {
                        $(this).attr("href_1", $(this).attr("href"));
                    }
                    $(this).attr("onclick_1", $(this).attr("onclick"));
                });
                $(".nav-pills li a").attr("href", "#addStorage");
                $(".nav-pills li a").removeAttr("onclick");

                $('.nav-pills  li a').on("click", function (e) {
                    if ($(this).parent().hasClass("disabled"))
                        if ($(this).hasClass("storepool")) {
                            $(this).parent().removeClass("active");
                            $(".manageid").parent().addClass("active");
                            modalalert('showalerts', storageFocusReason);
                            setTimeout("$('#showalerts').modal('hide');", 3000);
                            return false;
                        }
                    return false;
                });
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function checkTarget() {
    var target1 = $('input[name=add-radio]:radio:checked').val();
    if (target1 == 1) {
        window.location.replace("index.html#addIscsi");
    } else if (target1 == 0) {
        modalalert('showalerts', "yet to implement");
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
}

function getIqn() {
    $('#discoveryIqn').hide();
    var iqnDetails = "";
    var stgIP = {};
    stgIP.ip = $("#sip").val();
    stgIP.port = $('#iport').val();
    modalalert('showalerts', "Scanning iqn...");
    $.ajax({
        type: "POST",
        url: "api/storage/abc/discoverTargets",
        data: JSON.stringify(stgIP),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            iqnDetails = data;
            if (iqnDetails != undefined && iqnDetails != "\"\"" && iqnDetails != "") {
                $('#iqnList').html('');
                for (var q = 0; q < iqnDetails.length; q++) {
                    $('#iqnList').append('<option value="' + iqnDetails[q] + '">' + iqnDetails[q] + '</option>');
                }
                $('#discoveryIqn').show();
                setTimeout("$('#showalerts').modal('hide');", 3000);
            } else {
                modalalert('showalerts', "No iqn's found / Invalid ip");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('#iqnList').html('');
            }
        },
        error: function (result) {
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });

}

function connectIqn() {
    modalalert('showalerts', "Connecting to storage");
    var iqnDetails = "";
    var sAuth = ($("#chapCheck").prop("checked")) ? "True" : "False";
    var loginIqn = '{"targetName":"' + $("#iqnList").val() + '","portal":"' + $("#sip").val() + ':' + $("#iport").val() + '","setAuth":"' + sAuth + '","userName":"' + $("#chapUsername").val() + '","password":"' + $("#targetSecret").val() + '"}';
    $.ajax({
        type: "POST",
        url: "api/storage/abc/targetLogin",
        data: loginIqn,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (iqnDetails) {
          iqnDetails = (iqnDetails == undefined) ? "" : iqnDetails;

          if (showSessionTimedOutIfUnauthorized(iqnDetails)) {
              return false;
          }

          $('#discoveryIqn').hide();
          iqnDetails = iqnDetails.replace(/\"/g, '');

          if (iqnDetails === "Connected") {
              $("#sip").val("");
              modalalert('showalerts', "Connected Successfully");
              setTimeout("$('#showalerts').modal('hide');", 3000);
              connectedIqn();
          } else if (iqnDetails === "Failed") {
              modalalert('showalerts', "Authentication failed");
              setTimeout("$('#showalerts').modal('hide');", 3000);
          } else if (iqnDetails === "Exists") {
              modalalert('showalerts', "Already logged into the target iqn");
              setTimeout("$('#showalerts').modal('hide');", 3000);
          } else if (iqnDetails === "Login Failed") {
              modalalert('showalerts', "Invalid username/password");
              setTimeout("$('#showalerts').modal('hide');", 3000);
          } else if (iqnDetails === "Reload") {
              modalalert('showalerts', "A multi-path disk was added. Reloading Storage pool...");
              reloadZpool();
          } else {
              modalalert('showalerts', "Error connecting to storage");
              setTimeout("$('#showalerts').modal('hide');", 3000);
          }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function reloadZpool() {
  $.ajax({
        type: "POST",
        url: "api/storage/abc/reloadZpool",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (message) {
          modalalert('showalerts', message);
          setTimeout("$('#showalerts').modal('hide');", 3000);
          getAddStorage();
          connectedIqn();
          // reload disks once to avoid delay by multipath service
          $("#storagePoolLink").one("click", expandStoragePoolAccordion);
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function connectedIqn() {
    $("#sip").val("");
    var connectedIqnList = "";
    var clist = $('#connectedList');
    clist.html("");
    connectedIqnList = $.ajax({
        type: "POST",
        url: 'api/storage/abc/listLoggedInTargets',
        async: false
    }).responseText;
    connectedIqnList = (connectedIqnList == undefined) ? "" : connectedIqnList;
    if (showSessionTimedOutIfUnauthorized(connectedIqnList)) {
        return false;
    }

    var iqnstr = '<div class="table-responsive"><table cellpadding="0" cellspacing="0" border="0" class="display cIqnTable" width="100%"><thead><tr><th>Iqn Name</th><th>Protocol</th><th>IP</th><th>Port</th><th></th></tr></thead><tbody>';
    connectedIqnList = connectedIqnList.replace(/\"/g, '');

    if (connectedIqnList != "") {
        connectedIqnList = connectedIqnList.split("\\n");
        for (var c = 0; c < connectedIqnList.length; c++) {
            var cIqns = connectedIqnList[c].split(" ");
            var iqnip = cIqns[2].split(":");
            var iqnport = iqnip[1].split(",");
            var disconnect = '<a onclick="disconnectIqn(\'' + cIqns[3] + '\',\'' + iqnip[0] + ':' + iqnport[0] + '\'); " data-toggle="modal" href="#disconnectTarget" class="ui-link" ><img src="style/images/delete.png" alt="Disconnect" title="Disconnect"/></a>';
            iqnstr = iqnstr + '<tr><td>' + cIqns[3] + '</td><td>' + cIqns[0].slice(0, -1) + '</td><td>' + iqnip[0] + '</td><td>' + iqnport[0] + '</td><td>' + disconnect + '</td></tr>';
        }
    }

    iqnstr = iqnstr + '</tbody></table></div>';
    clist.html("");
    clist.append(iqnstr);
    $('.cIqnTable').dataTable($.extend({}, defaultDataTablesOptions, {
        dom: '<"top"lpf>rt<"clear">rtip<"clear">',
        "aaSorting": [[0, "desc"]],
        "bStateSave": true,
        "aoColumnDefs": [
            {
                "bSortable": false,
                "aTargets": [1,2,3,4]
            }
        ]
    }));

    storageInitialized();
}

function disconnectIqn(tName, portal) {
    $('#disconnect').attr("onclick", "targetLogout('" + tName + "','" + portal + "')");
}

function targetLogout(tName, portal) {
    var tData = {};
    tData.targetName = tName;
    tData.portal = portal;
    $.ajax({
        type: "POST",
        data: JSON.stringify(tData),
        url: 'api/storage/abc/targetLogout',
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data == "Disconnected") {
                $("#disconnectTarget").modal('hide');
                modalalert('showalerts', "Successfully disconnected.");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                connectedIqn();
            } else {
                modalalert('showalerts', "Disconnection failed.");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }

        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}
var raid0Alert = true;
function setRaid0now(){
    raid0Alert = false;
    $('.disablingDiv').hide();
    storageAction('create');
}
function storageAction(action) {
    var urllink;
    var loading;

    $('.disablingDiv').show();
    var raidLevel = '';
    var compressionLevel = 'zstd-3';
    var size = 0;
    var flag = 'R';
    var devs = [];
    var strg = $("input[type=checkbox]");
    var disks = 0;
    strg.each(function () {
        var name = $(this).attr("name");
        if (name == "strg[]" && $(this)[0].checked) {
            flag = "G";
            devs.push($(this)[0].value);
            disks++;
        }
    });
    if (flag == "R") {
        modalalert('showalerts', "Please select any one of the disks");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        $('.disablingDiv').hide()
        return;
    }

    if (action === 'add') {
        urllink = '/api/storage/abc/addDisks';
        loading = 'Adding to storage pool';

        var raidConfig = $.ajax({
            type: "POST",
            url: "/api/storage/abc/getRaidLevel",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false
        }).responseText;

        raidConfig = (raidConfig == undefined) ? "" : raidConfig;

        if (showSessionTimedOutIfUnauthorized(raidConfig)) {
            return false;
        }

        raidConfig = JSON.parse(raidConfig);

        size = parseInt(raidConfig.disksetsize);
        raidLevel = raidConfig.raidlevel;

        var selectedRaidLevel = $('input[type="radio"][name="raidlevel"]:checked').val();

        if (selectedRaidLevel !== raidLevel) {
            modalalert('showalerts', "Please select same raid level (" + raidLevel + ") as when the storage pool was created");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $('.disablingDiv').hide();
            return;
        }

        if (disks !== size) {
            modalalert('showalerts', "Please select " + size + " disks (must match raid configured when pool was created)");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $('.disablingDiv').hide();
            return;
        }

        var complevel = $.ajax({
            type: "POST",
            url: "/api/storage/abc/getCompressionLevel",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false
        }).responseText;

        complevel = (complevel == undefined) ? "" : complevel;

        if (showSessionTimedOutIfUnauthorized(complevel)) {
            return false;
        }

        complevel = JSON.parse(complevel);

        compressionLevel = complevel.compressionlevel;

        var selectedCompressionLevel = $('input[type="radio"][name="compressionlevel"]:checked').val();

        if (selectedCompressionLevel !== compressionLevel) {
            modalalert('showalerts', "Please select the same compression level (" + compressionLevel + ") as when creating the storage pool");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $('.disablingDiv').hide();
            return;
        }

        $("#storageAction").removeAttr('disabled');
    } else if (action === 'create') {
        urllink = '/api/storage/abc/createFileSystem';
        loading = 'Creating storage pool';

        if ($('#raid1').prop('checked')) {
            if (disks < 2) {
                modalalert('showalerts', "Please select at least 2 disks");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('.disablingDiv').hide();
                return;
            }
        }
        if ($('#raid5').prop('checked')) {
            if (disks < 3) {
                modalalert('showalerts', "Please select at least 3 disks");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('.disablingDiv').hide();
                return;
            }
        }
        if ($('#raid6').prop('checked')) {
            if (disks < 4) {
                modalalert('showalerts', "Please select at least 4 disks");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('.disablingDiv').hide();
                return;
            }
        }
        if ($('#raid0').prop('checked')) {
            if(raid0Alert){
                $("#raid0check").modal("show");
                return;
            }
        }

        raidLevel = $('input[type="radio"][name="raidlevel"]:checked').val();
        compressionLevel = $('input[type="radio"][name="compressionlevel"]:checked').val();
    }

    var ddata = {};
    ddata.disks = devs;
    ddata.raidlevel = raidLevel;
    ddata.compressionlevel = compressionLevel;
    modalalert('showalerts', loading);
    $.ajax({
        type: "POST",
        data: JSON.stringify(ddata),
        url: urllink,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', data.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $('.hdisks').prop('checked', false);
            getAddStorage();
            storageInitialized();
            connectedIqn();
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
            $('.disablingDiv').hide();
        }
    });
}

function storageLoadFileSystem() {
    urllink = '/api/storage/abc/loadFileSystem';
    loading = 'Scanning all disks attached to the system to online them. Then will attempt to mount the storage pool...';
    modalalert('showalerts', loading);
    $.ajax({
        type: "POST",
        url: urllink,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', data.msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $('.hdisks').prop('checked', false);
            getAddStorage();
            storageInitialized();
            connectedIqn();
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
            $('.disablingDiv').hide();
        }
    });
}

function storageInitialized() {
    if (isInfinityCloudVault()) {
      window.location.replace("index.html");
      return
    }

    $.ajax({
        type: "POST",
        url: '/api/storage/abc/pool_extended_status',
        success: function (data) {
            if (!data.is_zpool_configured || data.zpool_state === 'Available') {
                $('#storageLoadFileSystemButton').hide();
            } else {
                $('#storageLoadFileSystemButton').show();
            }
            if (data.is_zpool_configured) {
                $('#destroyPoolButton').removeAttr('disabled');
            } else {
                $('#destroyPoolButton').attr('disabled', 'disabled');
            }
            if (data.is_zpool_online) {
                $('#expandPoolButton').removeAttr('disabled');
            } else {
                $('#expandPoolButton').attr('disabled', 'disabled');
            }
            if (data.is_zpool_configured) {
                getDisks('add');
            } else {
                getDisks('create');
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}
function setReplaceDisk(diskid){
    $('#faulthdd').text(diskid);
}
function replaceHdd(){
    var urllink = "/api/storage/abc/replaceDisk";
    var faultdisk = $('#faulthdd').text();
    var replacedisk = $('#usHdd').val();
    if(replacedisk == ""){
        modalalert('showalerts', "Please attach a new hardisk and retry");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return;
    }
    var ddata = '{"oldDisk":"' + faultdisk + '","newDisk":"' + replacedisk + '"}'
    modalalert('showalerts', "Replacing disk...");
    $.ajax({
        type: "POST",
        data: ddata,
        url: urllink,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', data);
            setTimeout("$('#showalerts').modal('hide');", 3000);
            getAddStorage();
            storageInitialized();
            connectedIqn();
            $('.disablingDiv').hide();
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
            $('.disablingDiv').hide();
        }
    });
    $("#replacePopup").modal("hide");
}

function showAdminPasswordPopup() {
    $('#destroyPoolConfirmPopup').modal('hide');
    $('#checkAdminPasswordPopup').modal('show');
}

function destroyPool() {
    if ($.trim($('#adminPassword').val()) === "") {
        modalalert('showalerts', "Password cannot be blank");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    var data = {};
    data.password = $.trim($('#adminPassword').val());
    modalalert('showalerts', "Destroying pool...");
    $.ajax({
        type: "POST",
        url: "/api/storage/abc/destroyPool",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.status === 'ok') {
                $('#checkAdminPasswordPopup').modal('hide');
                $('#adminPassword').val("");
            }

            modalalert('showalerts', data.msg);

            // Update storage data after destroying the pool.
            getAddStorage();
            storageInitialized();
            connectedIqn();

            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (errMsg) {
            if (errMsg.status == 401) {
                modalalert('showalerts', "The password is incorrect");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            } else {
                modalalert('showalerts', "An error has ocurred while destroying the pool");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        }
    });
}

function expandPool(){
    var urllink = "/api/storage/abc/expandPool";
    modalalert('showalerts', "Expanding pool...");
    $.ajax({
        type: "POST",
        data: JSON.stringify({}),
        url: urllink,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', data);
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
            $('.disablingDiv').hide();
        }
    });
}

function dataTableForManageStorage(defaultDataTablesOptions ) {
  const storageDataTableOptions = { ...defaultDataTablesOptions };
  storageDataTableOptions.iDisplayLength = 100;
  delete storageDataTableOptions.preDrawCallback;
  delete storageDataTableOptions.initComplete;
  return storageDataTableOptions;
}

function setCurrentRAIDLevel(rsize, disksize) {
  const raidLevelMapping = {
    '': '0',
    'mirror': '1',
    'raidz': '5',
    'raidz2': '6',
  };

  const raidLevelForRadio = raidLevelMapping[rsize.raidlevel] || '0';

  $(`#raid${raidLevelForRadio}`).hide().prop('checked', true);
  $(`#showradio${raidLevelForRadio}`).show();
  $(`#showradio${raidLevelForRadio}>.radio-check`).hide();
  $(`#showradio${raidLevelForRadio}>.text`).html(`RAID${raidLevelForRadio} (Minimum ${disksize} disk)`);
}

function getDisks(rLevel) {
    var frsize = $.ajax({
        type: "POST",
        url: "/api/storage/abc/getRaidLevel",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: false
    }).responseText;
    frsize = (frsize == undefined) ? "" : frsize;
    if (showSessionTimedOutIfUnauthorized(frsize)) {
        return false;
    }
    frsize = JSON.parse(frsize);
    var fdisks = frsize.raidlevel;
    $.ajax({
        type: "POST",
        url: '/api/storage/abc/getDiskList',
        success: function (data) {
            if (JSON.stringify(data) == "{}") {
                modalalert('showalerts', "No disks available to perform this action.");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $("#lStorage").hide();
                $("#lStorage").parent().html('No disks.');
            } else {
                $('#lStorage').show();
            }
            var deskstor = '<div class="panel-group" id="accordion5">';
            var fStrg = deskstor + '<div class="panel panel-default"><div class="panel-heading settingstyle"><h4 class="panel-title"><ul class="nav nav-stacked"><li class="diskshover"><a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion5" href="#failedstorage"><span>Failed Disk(s)</span><span class="downarrow"></span></a></li></ul></h4></div><div id="failedstorage" class="panel-collapse collapse" style="overflow:auto;"><div class="panel-body" ><div class="table-responsive"><table cellpadding="0" cellspacing="0" border="0" class="display" id="fdisks" width="100%"><thead><tr><th>Disk</th><th>Type</th><th>IQN</th><th>Disk ID</th><th>Disk Status</th><th>Size</th><th>Action</th></tr></thead><tbody>';
            $.each(data, function (index, value) {
                var gb = (parseInt(value.size) / (1024 * 1024 * 1024));
                var fspace = gb.toFixed(2) + 'GB';
                if (parseInt(gb) >= 1024) {
                    gb = (parseInt(gb) / 1024);
                    fspace = gb.toFixed(2) + 'TB';
                }
                if (value.isUsed && value.PoolStatus != "ONLINE" && (value.PoolStatus == "UNAVAIL" || value.PoolStatus == "FAULTED" || value.PoolStatus == '-')) {
                    setTimeout('$("#usHdd").trigger("focus")', 900);
                    var Disk = (value.Mapper).split("\/");
                    var diskid = Disk[3];
                    if (value.Mapper == "-") {
                        diskid = value.Mapper;
                    }
                    if (fdisks !== "") {
                        fStrg = fStrg + '<tr><td>' + index + '</td><td>' + value.type + '</td><td style=" -ms-word-wrap: break-word;word-break: break-all;">' + value.IQN + '</td><td style="-ms-word-wrap: break-word;word-break: break-all;">' + diskid + '</td><td>' + value.PoolStatus + '</td><td>' + fspace + '</td><td><a href="#replacePopup" title="Replace disk" data-toggle="modal" onclick="setReplaceDisk(\''+index+'\')" class="btn btn-default"><div class="button-content"><span class="button-text">Replace</span></div></a></td></tr>';
                    }
                }
            });
            fStrg = fStrg + '</tbody></table></div></div></div></div>';
            var dStrg = '<div class="panel panel-default"><div class="panel-heading settingstyle"><h4 class="panel-title"><ul class="nav nav-stacked"><li class="diskshover"><a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion5" href="#usedstorage"><span>Used Disk(s)</span><span class="downarrow"></span></a></li></ul></h4></div><div id="usedstorage" class="panel-collapse collapse" style="overflow:auto;"><div class="panel-body" ><div class="table-responsive"><table cellpadding="0" cellspacing="0" border="0" class="display" id="udisks" width="100%"><thead><tr><th>Disk</th><th>Type</th><th>IQN</th><th>Disk ID</th><th>TargetIP</th><th>TargetPort</th><th>Disk Status</th><th>Size</th></tr></thead><tbody>';
            $.each(data, function (index, value) {
                var gb = (parseInt(value.size) / (1024 * 1024 * 1024));
                var fspace = gb.toFixed(2) + 'GB';
                if (parseInt(gb) >= 1024) {
                    gb = (parseInt(gb) / 1024);
                    fspace = gb.toFixed(2) + 'TB';
                }
                if (value.isUsed) {
                    var Disk = (value.Mapper).split("\/");
                    var diskid = Disk[3];
                    if (value.Mapper == "-") {
                        diskid = value.Mapper;
                    }
                    dStrg = dStrg + '<tr><td>' + index + '</td><td>' + value.type + '</td><td style=" -ms-word-wrap: break-word;word-break: break-all;">' + value.IQN + '</td><td style="-ms-word-wrap: break-word;word-break: break-all;">' + diskid + '</td><td>' + value.TargetIP + '</td><td>' + value.TargetPort + '</td><td>' + value.PoolStatus + '</td><td>' + fspace + '</td></tr>';
                }
            });
            dStrg = dStrg + '</tbody></table></div></div></div></div>';

            var udStrg = '<div class="panel panel-default"><div class="panel-heading settingstyle"><h4 class="panel-title"><ul class="nav nav-stacked"><li class="btnshow"><a class="accordion-toggle collapsed" data-toggle="collapse" data-parent="#accordion5" href="#unusedstorage"><span>Unused Disk(s)</span><span class="downarrow"></span></a></li></ul></h4></div><div id="unusedstorage" class="panel-collapse collapse" ><div class="panel-body"><div class="table-responsive" ><table cellpadding="0" cellspacing="0" border="0" class="display" id="uudisks" width="100%"><thead><tr><th><label class="checkbox"><input id="sall" class="checkbox-input" type="checkbox" onclick="checkall(this)"><div class="checkbox-indicator"></div></label></th><th>Disk</th><th>Type</th><th>IQN</th><th>TargetIP</th><th>TargetPort</th><th>Disk Status</th><th>Size</th></tr></thead><tbody>';
            var options ="";
            $('#usHdd').empty();
            $.each(data, function (index, value) {
                diskname = index;
                var gb = (parseInt(value.size) / (1024 * 1024 * 1024));
                var fspace = gb.toFixed(2) + 'GB';
                if (parseInt(gb) >= 1024) {
                    gb = (parseInt(gb) / 1024);
                    fspace = gb.toFixed(2) + 'TB';
                }

                if (!value.isUsed) {
                    udStrg = udStrg + '<tr><td><label class="checkbox"><input type="checkbox" name="strg[]" value="' + diskname + '"  id="' + diskname + '" class="hdisks checkbox-input"/></div><div class="checkbox-indicator"></label></td><td>' + index + '</td><td>' + value.type + '</td><td style="-ms-word-wrap: break-word;word-break: break-all;">' + value.IQN + '</td><td>' + value.TargetIP + '</td><td>' + value.TargetPort + '</td><td>' + value.PoolStatus + '</td><td>' + fspace + '</td></tr>';
                    options = options + '<option value="' + value.uuid + '" >' + index +' ('+ fspace+')</option>';
                }
            });
            if (options == ""){
                options = options + '<option value="" > NA </option>';
                $('#replacelink').attr("disabled", "disabled");
            }else{
                $('#replacelink').removeAttr('disabled');
            }
            $('#usHdd').append(options).trigger("create");
            var btnText = (rLevel === "create") ? "Create Storage" : "Add to Storage";
            udStrg = udStrg + '</tbody></table></div></div><div class="btn-grouped-table"><a onclick="storageAction(\'' + rLevel + '\')" id="storageAction" class="btn btn-primary"><div class="button-content"><span class="icon-add-circular button-icon"></span><span class="button-text">' + btnText + '</span></div></a></div></div></div>';
            deskstor = fStrg + dStrg + udStrg + '</div>';

            $("#localStorage").empty();
            $("#localStorage").append(deskstor).trigger('create');

            const storageDataTableOptions = dataTableForManageStorage(defaultDataTablesOptions);

            $('#uudisks').dataTable($.extend({}, storageDataTableOptions, {
                dom: '<"top"lpf>rt<"clear">rtip',
                "bProcessing": true,
                "aaSorting": [[1, "desc"]],
                "bStateSave": true,
                "autoWidth": false,
                "aoColumns": [
                    {
                        "sWidth": "5%"
                    },
                    {
                         "sWidth": "8%"
                    },
                    {
                        "sWidth": "10%"
                    },
                    {
                        "sWidth": "32%"
                    },
                    {
                        "sWidth": "15%"
                    },
                    {
                        "sWidth": "10%"
                    },
                    {
                        "sWidth": "10%"
                    },
                    {
                        "sWidth": "10%"
                    }
                ],
                "aoColumnDefs": [{
                    "bSortable": false,
                    "aTargets": [0]
                }]
            }));
            $('#udisks').dataTable($.extend({}, storageDataTableOptions, {
                dom: '<"top"lpf>rt<"clear">rtip',
                "bProcessing": true,
                "aaSorting": [[0, "desc"]],
                "bStateSave": true,
                "autoWidth": false,
                "aoColumns": [
                    {
                        "sWidth": "8%"
                    },
                    {
                        "sWidth": "10%"
                    },
                    {
                        "sWidth": "19%"
                    },
                    {
                        "sWidth": "18%"
                    },
                    {
                        "sWidth": "15%"
                    },
                    {
                        "sWidth": "10%"
                    },
                    {
                        "sWidth": "10%"
                    },
                    {
                        "sWidth": "10%"
                    }
               ],
                "aoColumnDefs": [{
                    "bSortable": false,
                    "aTargets": []
                }]
            }));
                $('#fdisks').dataTable($.extend({}, storageDataTableOptions, {
                dom: '<"top"lpf>rt<"clear">rtip',
                "bProcessing": true,
                "aaSorting": [[0, "desc"]],
                "bStateSave": true,
                "autoWidth": false,
                "aoColumns": [
                    {
                        "sWidth": "5%"
                    },
                    {
                        "sWidth": "5%"
                    },
                    {
                        "sWidth": "10%"
                    },
                    {
                        "sWidth": "30%"
                    },
                    {
                        "sWidth": "15%"
                    },
                    {
                        "sWidth": "15%"
                    },
                    {
                        "sWidth": "10%"
                    }
               ],
                "aoColumnDefs": [{
                    "bSortable": false,
                    "aTargets": []
                }]
            }));
            var strg = $("input[type=checkbox][name='strg[]']");
            if (rLevel == "create") {
                $("[name='raidlevel']").prop('checked', false);
                if (strg.length == 0) {
                    $('#raid0').attr("disabled", "disabled");
                    $('#raid1').attr("disabled", "disabled");
                    $('#raid5').attr("disabled", "disabled");
                    $('#raid6').attr("disabled", "disabled");
                } else if (strg.length <= 1) {
                    $('#raid0').removeAttr('disabled');
                    $('#raid1').attr("disabled", "disabled");
                    $('#raid5').attr("disabled", "disabled");
                    $('#raid6').attr("disabled", "disabled");
                    $('#raid0').prop('checked', true);
                } else if (strg.length <= 2) {
                    $('#raid0').removeAttr('disabled');
                    $('#raid1').removeAttr('disabled');
                    $('#raid5').attr("disabled", "disabled");
                    $('#raid6').attr("disabled", "disabled");
                    $('#raid1').prop('checked', true);
                } else if (strg.length <= 3) {
                    $('#raid0').removeAttr('disabled');
                    $('#raid1').removeAttr('disabled');
                    $('#raid5').removeAttr('disabled');
                    $('#raid6').attr("disabled", "disabled");
                    $('#raid5').prop('checked', true);
                } else if (strg.length <= 4) {
                    $('#raid0').removeAttr('disabled');
                    $('#raid1').removeAttr('disabled');
                    $('#raid5').removeAttr('disabled');
                    $('#raid6').removeAttr('disabled');
                    $('#raid5').prop('checked', true);
                } else if (strg.length > 4) {
                    $('#raid0').removeAttr('disabled');
                    $('#raid1').removeAttr('disabled');
                    $('#raid5').removeAttr('disabled');
                    $('#raid6').removeAttr('disabled');
                    $('#raid6').prop('checked', true);
                }
                // If the pool was previously created, and now it was destroyed, this needs to be done...
                $(".label2").show();
                $("[name='raidlevel']").show();
                $("#showradio0").show();
                $("#showradio1").show();
                $("#showradio5").show();
                $("#showradio6").show();
                $("[name='compressionlevel']").show();
                $("#showradiogzip-4").show();
                $("#showradiozstd-3").show();
                $('#showradio0>.radio-check').show();
                $('#showradio1>.radio-check').show();
                $('#showradio5>.radio-check').show();
                $('#showradio6>.radio-check').show();
                $("#showradiogzip-4>.radio-check").show();
                $("#showradiozstd-3>.radio-check").show();
                $("#Diskmsg").html("");
            } else if (rLevel == "add") {
                var rsize = $.ajax({
                    type: "POST",
                    url: "/api/storage/abc/getRaidLevel",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    async: false
                }).responseText;
                rsize = (rsize == undefined) ? "" : rsize;
                if (showSessionTimedOutIfUnauthorized(rsize)) {
                    return false;
                }
                rsize = JSON.parse(rsize);
                var disksize = parseInt(rsize.disksetsize);

                $("#showradio0").hide();
                $("#showradio1").hide();
                $("#showradio5").hide();
                $("#showradio6").hide();
                $(".label2").hide();

                setCurrentRAIDLevel(rsize, disksize);

                var complevel = $.ajax({
                    type: "POST",
                    url: "/api/storage/abc/getCompressionLevel",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    async: false
                }).responseText;
                complevel = (complevel == undefined) ? "" : complevel;
                if (showSessionTimedOutIfUnauthorized(complevel)) {
                    return false;
                }
                complevel = JSON.parse(complevel);
                level = complevel.compressionlevel;

                $("#showradiogzip-4").hide();
                $("#showradiozstd-3").hide();

                $('#' + level).hide().prop('checked', true);
                $(".label3").hide();
                $('#showradio' + level).show();
                $('#showradio' + level + '>.radio-check').hide();

                $("#Diskmsg").html("<span class='text-weight-bold'>Note:</span> For expanding storage add (" + disksize + ") disks.");
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function createRpoolInfo(poolName, value) {
    var poolInfo = '<div><b>Name: </b>' + poolName + '</div><div><b>Used: </b>' + value.used + '</div>';
    if (!isInfinityCloudVault()) {
      poolInfo += '<div><b>Available: </b>' + value.available + '</div>';
    }
    return poolInfo;
}

function createSystemInfoPSTable() {
    var availableSection = isInfinityCloudVault() ? '' : '<th>STORAGE AVAILABLE</th>';
    var tablestr = '<br><table cellpadding="0" cellspacing="0" border="0" class="display" id="diskStat" width="100%"><thead><tr><th>PROTECTED SYSTEM NAME</th><th>USERNAME</th>' + availableSection + '<th>STORAGE USED</th></tr></thead><tbody>';
    return tablestr;
}

function createSystemInfoPSRow(value) {
    var availableSection = isInfinityCloudVault() ? '' : '<td>' + value.available + '</td>';
    var used = value.used !== null ? value.used : "N/A";
    var PSRow = '<tr><td class="dtWrapTd">' + value.name + '</td><td>' + value.username + '</td>' + availableSection + '<td>' + used + '</td></tr>';
    return PSRow;
}

function checkall(a) {
    $('.hdisks').prop('checked', a.checked);
}
/******************system info**************/
function getSystemInfo() {
    $(".modal-backdrop").show();
    var graphip = "";
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#siserverid").val();
    var select = $('#siserverid');
    select.empty();
    $.each(nodes, function (key, val) {
        var name = val.split('#');
        var urlip = "";
        if (name[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = name[0];
        }
        var id = (mid != "" || mid == $.jStorage.get("machineId")) ? mid : $.jStorage.get("machineId");
        var sel = (key == id) ? " selected " : "";
        $("#siserverid").append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
    });
    mid = $("#siserverid").val();
    modalalert('showalerts', "Loading disk usage stats...");
    var urllink = 'api/storage/abc/diskUsageStats'
    var listStorage = $("#strData");
    listStorage.html("");
    $("#diskStatTable").html("");
    $.ajax({
        type: "POST",
        url: urllink,
        headers: {
            "Replibit-Server": mid
        },
        success: function (data) {
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $(".modal-backdrop").hide();
            listStorage.html("");
            $("#diskStatTable").html("");
            var tableRpool = "";
            var tablestr = createSystemInfoPSTable();
            $.each(data, function (index, value) {
                var tableRpoolAdd = "";
                if (value.name === 'tank') {
                    tableRpoolAdd += createRpoolInfo('Storage Pool (tank)', value);
                } else if (value.name === 'aristosimgexports') {
                    if (value.used && value.available) {
                        tableRpoolAdd += createRpoolInfo('Exports (tank/aristosimgexports)', value);
                    }
                } else if (value.name === 'aristosbay') {
                    if (value.used && value.available) {
                        tableRpoolAdd += createRpoolInfo('Snapshots pending ingestion (tank/aristosbay)', value);
                    }
                } else {
                    tablestr += createSystemInfoPSRow(value);
                }
                if (tableRpoolAdd) {
                    tableRpool = tableRpool + '<div class="separate-content-block">' + tableRpoolAdd + '</div>';
                }
            });
            tablestr = tablestr + '</tbody></table>';
            listStorage.append(tableRpool);
            $("#diskStatTable").append(tablestr);
            var oTable = $('#diskStat').dataTable($.extend({}, defaultDataTablesOptions, {
                "bDestroy": true,
                "bProcessing": true,
                "aaSorting": [[0, "desc"]],
                "bStateSave": true,
                columnDefs: [{type: 'file-size', targets: -1}],
                dom: 'B<"clear"><"top"lpf>rt<"clear">rtip',
                buttons: addButtons('Protected Systems Info'),
                "aoColumnDefs": [{
                    "bSortable": false,
                    "aTargets": []
                }]
            }));
        },
        error: function (result) {
            sessionTimeout(result);
            if (result.status == 500) {
                modalalert('showalerts', "Disk usage stat not available. Please check the manage storage.");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        }
    });

    $.ajax({
        type: "POST",
        url: 'api/utilities/abc/system_info',
        headers: {
            "Replibit-Server": mid
        },
        success: function (pts) {
            updateSessionData(pts)
            var rsSize = (parseInt(pts.ramCapacity) / 1048576);
            if (Math.round(rsSize) == 0) {
                rsSize = (parseInt(pts.ramCapacity) / 1024);
                rsSize = Math.ceil(rsSize) + ' MB';
            } else {
                rsSize = Math.ceil(rsSize) + ' GB';
            }
            $('#sNamesys').html(pts.systemName);
            $('#oNamesys').html(pts.osName);
            $('#rCapacitysys').html(rsSize);
            var nwsys = pts.networkInterfaces;
            $('#nwDetailssys').empty();
            $.each(nwsys, function (k, nval) {
                var ipadd = JSON.stringify(nval.ipAddress);
                ipadd = ipadd.replace(/\[|\]|"/g, '');
                if (ipadd !== '127.0.0.1' && ipadd !== '192.168.122.1') {
                    $('#nwDetailssys').append('<div class="separate-content-block"><div><b>Mac: </b>' + nval.mac + '</div><div><b>IP Address: </b>' + ipadd + '</div></div>');
                }
            });
            var volsys = pts.volumes;
            $('#volDetailssys').empty();
            $.each(volsys, function (j, vval) {
                var isBoot = (vval.isBootable) ? 'lightGreen' : 'lightGray';
                var tspace = (parseInt(vval.capacity) / 1073741824);
                var uspace = ((parseInt(vval.capacity) - parseInt(vval.freeSpace)) / 1073741824);
                var fspace = (parseInt(vval.freeSpace) / 1073741824);
                if (Math.round(uspace) == 0) {
                    uspace = ((parseInt(vval.capacity) - parseInt(vval.freeSpace)) / 1048576);
                    uspace = Math.abs(uspace).toFixed(2) + ' MB';
                } else {
                    uspace = Math.abs(uspace).toFixed(2) + ' GB';
                }
                if (Math.round(fspace) == 0) {
                    fspace = (parseInt(vval.freeSpace) / 1048576);
                    fspace = Math.abs(fspace).toFixed(2) + ' MB';
                } else {
                    fspace = Math.abs(fspace).toFixed(2) + ' GB';
                }
                var isBootable = (vval.isBootable) ? 'Yes' : 'No';
                var isEncrypted = (vval.isEncrypted) ? 'Yes' : 'No';
                var isProtected = (vval.isProtected) ? 'Yes' : 'No';
                var isCompressed = (vval.isCompressed) ? 'Yes' : 'No';
                var mntPoint = JSON.stringify(vval.mountPointNames);
                mntPoint = mntPoint.replace('["', "");
                mntPoint = mntPoint.replace('"]', "");
                mntPoint = mntPoint.replace('\\\\', "");
                var re = new RegExp('[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}');
                var m = re.exec(vval.uuid);
                var s = vval.uuid;
                $('#volDetailssys').append('<div class="secondary-section-name">' + mntPoint + '</div><div class="nested-content"><div><b>Label: </b>' + vval.label + '</div><div><b>File System: </b>' + vval.fileSystemName + '</div><div><b>Is Bootable: </b>' + isBootable + '</div><div><b>GUID: </b>' + s + '</div><div><b>Total Space: </b>' + Math.abs(tspace).toFixed(2) + ' GB</div><div><b>Used Space: </b>' + uspace + '</div></div>');

            });
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}
/*****************Vault Settings*************/
function getVaultSettings() {
    $("#name").text("Settings");
    var oTable = $('.vaultTable').dataTable($.extend({}, defaultDataTablesOptions, {
        dom: 'B<"clear"><"top"lpf>rt<"clear">rtip',
        buttons: addButtons('Vault Configuration', true),
        "bAutoWidth": false,
        "bDestroy": true,
        "bStateSave": true,
        "bProcessing": true,
        "bServerSide": true,
        "aaSorting": [],
        "sAjaxSource": "api/vault_settings",
        "aoColumns": [
            {
                "mDataProp": "Name",
                "sWidth": "auto"
            },
            {
                "mDataProp": "vaultIp",
                "sWidth": "auto"
            },
            {
                "mDataProp": "created",
                "sWidth": "150px"
            }
        ],
        "aoColumnDefs": [{
                "bSortable": false,
                "aTargets": [2]
        }],
        "fnRowCallback": function (nRow, aData, iDisplayIndex) {
            vC[aData._id] = aData.Name;
            var scDelLink = '<a onclick="deleteVScheduler(\'' + aData._id + '\'); " data-toggle="modal" href="#delVScheduler" title="Delete"><span class="icon-delete table-icon active"></span></a>';
            var sid = '<input id="' + aData._id + '" type="hidden" value=\'' + JSON.stringify(aData) + '\' />';
            var action = sid + '<a class="btn btn-default" href="#editVaultsettings" id="editvault" data-toggle="tab" onclick="editVScheduler(\'' + aData._id + '\');"><div class="button-content" title="Edit"><span class="button-text">Edit</span></div></a>' + scDelLink;
            var iconClass = (aData.isEnabled) ? "table-icon-success" : "";
            var iconTitle = (aData.isEnabled) ? "Enabled" : "Disabled"
            var isEna = "<a><span class='icon-checkmark-circular table-icon " + iconClass + "' title='" + iconTitle + "'</span></a>" + "<span class='table-icon-text'>" + aData.Name + "</span>";
            $('td:eq(0)', nRow).html(isEna);
            $('td:eq(2)', nRow).html(action);
            return nRow;
        }
    }));

}

$('#editvault').on("click", function () {
    if ($.jStorage.get("editVid") == null) {} else {
        editVScheduler($.jStorage.get("editVid"));
    }

});

function editVScheduler(uid) {
    $("#titlename").text("Edit Vault Configuration");
    window.location.href = "#editVaultsettings";
    if ($('#' + uid + '').val() == undefined) {
        $('#vseLink').click();
        return;
    }
    $.jStorage.set("editVid", uid);
    var oTable = $('#ebandwidthTbl').dataTable();
    oTable.fnClearTable(true);
    oTable.fnGetData().length
    var data = JSON.parse($('#' + uid + '').val());
    var i = 0;
    var da = 6;
    var c = 1;
    var s = data;
    if (data == "") {
        $("#esVault").attr("disabled", "disabled");
        return;
    } else {
        data = s.schedules;
        $("#evaultAddress").val(s.vaultIp);
        $("#eName").val(s.Name);
        $("#eRWdays").val(s.replicationwaitdays);
        $.jStorage.set("vIP", s.vaultIp);
        $("#evault_id").val(uid);
    }
    $.each(data, function (index, value) {
        editBandwith();

        $(".ebw").each(function (k1, v1) {
            if (i == k1) {
                $(this).val(value.bandwidth);
            }
        });
        var st = value.startTime;
        $(".estime").each(function (k1, v1) {
            if (i == k1) {
                $(this).val(st.hour);
            }
        });
        $(".esmin").each(function (k1, v1) {
            if (i == k1) {
                $(this).val(st.minute)
            }
        });
        var et = value.endTime;
        $(".eetime").each(function (k1, v1) {
            if (i == k1) {
                $(this).val(et.hour);
            }
        });
        $(".eemin").each(function (k1, v1) {
            if (i == k1) {
                $(this).val(et.minute);
            }
        });
        var ds = value.days;
        /* $(".eda").each(function(k1, v1) {
            if(i<=da){
                for (var j = 0; j< ds.length; j++) {
                    if(this.id == ds[j]){
                        $(this).prop('checked', true);
                    }
                }
            }
        });*/


        $(".eda").each(function (k1, v1) {
            if (i <= da) {
                for (var j = 0; j < ds.length; j++) {
                    if (this.id == ds[j] + [i]) {
                        $(this).prop('checked', true);
                    }
                }
            }
        });

        $(".ecall").each(function (k1, v1) {
            if (ds == "*") {
                for (var j = 0; j < ds.length; j++) {
                    var regex = /(\d+)/g;
                    var result = (this.id.match(regex));
                    if (["*"] + result == ds[j] + [i]) {
                        $(this).prop('checked', true);
                    }
                }
            }
        });
        da = da + 7;
        i++;


    });
    if (s.isEnabled) {
        $('#vlteditcheck').prop('checked', true);
    } else {
        $('#vlteditcheck').prop('checked', false);
    }
}

function deleteVScheduler(uid) {
    $('#delVSclink').attr("onclick", "delVSc('/api/vault_settings/" + uid + "')");
}

function delVSc(uri) {
    $.ajax({
        url: uri,
        type: 'DELETE',
        success: function (data) {
            if (data.status == "ok") {
                showModalAlertWithTimeout("Vault Schedule deleted successfully.");
            } else {
                showModalAlertWithTimeout(data.msg);
            }
            getVaultSettings();
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    $("#delVScheduler").modal('hide');
    getVaultSettings();
    $('#vseLink').click();
}

function toObject(names, values) {
    var result = {};
    for (var i = 0; i < names.length; i++)
        result[names[i]] = values[i];
    return result;
}

function addVScheduler(id) {
    if ($.jStorage.get("addVid") != "msn") {
        $.jStorage.set("addVid", "msn");
        getVaultSettings();
        $('#vseLink').click();
        return;
    }
    $.jStorage.set("addVid", "msd");
    $('#vaultAddress').val("");
    $('#Name').val("");
    var oTable = $('#bandwidthTbl').dataTable();
    var row = oTable.fnGetData().length;
    for (var i = 0; i < row; i++) {
        oTable.fnDeleteRow(0);
    }
    addBandwith();
    $('#vltaddcheck').prop('checked', true);
}

function addVaultSettings() {
    $("#titlename").text("Add Vault Configuration");
    var flg = "";
    if ($.trim($('#Name').val()).length > 25) {
        modalalert('showalerts', "Schedule name maximum length is 25");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    } else if ($.trim($('#Name').val()) === '') {
        modalalert('showalerts', "Name is required.");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    if ($('#vaultAddress').val() === '') {
        modalalert('showalerts', "IP address is required");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    } else if ($.trim($('#RWdays').val()) === '') {
        modalalert('showalerts', "Alert days is required.");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    var vSetting = $.ajax({
        url: "api/vault_settings",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        async: false
    }).responseText;
    vSetting = (vSetting == undefined) ? "" : vSetting;
    if (showSessionTimedOutIfUnauthorized(vSetting)) {
        return false;
    }
    vSetting = JSON.parse(vSetting);
    $.each(vSetting, function (key, data) {
        if ($('#vaultAddress').val() === data.vaultIp) {
            modalalert('showalerts', "IP already exists");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            flg = "G";
            return;
        }
        if ($('#Name').val() === data.Name) {
            modalalert('showalerts', "Name already exists");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            flg = "G";
            return;
        }
    });
    if (flg == "G") {
        return;
    }
    var oTable = $('#bandwidthTbl').dataTable();
    var vtype = "";
    var vurl = "";
    var data = "";
    var sh = "";
    var sm = "";
    var eh = "";
    var em = "";
    var bw = "";
    var ch = "";
    var ca = "";
    var ret = "";
    var d = 1;
    var c = 0;
    var flag = "";
    var Days = [];
    $(".call").each(function () {
        var chkbox = $(this);
        if (chkbox[0].checked) {
            ca = ca + '"*",';
        } else {
            ca = ca + '"$",';
        }
    });
    ca = ca.slice(0, -1);
    $(".da").each(function () {
        var chkbox = $(this);
        if (chkbox[0].checked) {
            ch = ch + '"' + chkbox[0].id + '",';
        } else {
            ch = ch + '-,';
        }
        if ((d % 7) == 0) {
            ch = ch + "###";
        }
        d++;
    });
    ch = ch.replace(/-,/g, '')
    ch = ch.split("###");
    ca = ca.split(",");
    for (var i = 0; i < ca.length; i++) {
        if (ca[i] == '"$"') {
            if (ch[i] == '') {
                modalalert('showalerts', "Days Required");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                return false;
            } else {
                ch[i] = ch[i].slice(0, -1);
            }
        } else if (ca[i] == '"*"') {

        } else {

        }
    }

    $(".stime").each(function () {
        sh = sh + '"' + $(this).val() + '",';
    });
    $(".etime").each(function () {
        eh = eh + '"' + $(this).val() + '",';
    });
    $(".smin").each(function () {
        sm = sm + '"' + $(this).val() + '",';
    });
    $(".emin").each(function () {
        em = em + '"' + $(this).val() + '",';
    });

    $(".bw").each(function () {
        if ($(this).val() == "") {
            modalalert('showalerts', "Valid bandwidth required");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return;
        } else if ($(this).val() > 10000 || $(this).val() < 0) {
            ret = "false";
            modalalert('showalerts', "Valid bandwidth required, Maximum banwidth is 10GBps");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return;
        } else {

            bw = bw + '"' + parseFloat($(this).val()) + '",';
        }
    });
    if (ret == "false") {
        return;
    }
    sh = eval("[" + sh.slice(0, -1) + "]");
    sm = eval("[" + sm.slice(0, -1) + "]");
    eh = eval("[" + eh.slice(0, -1) + "]");
    em = eval("[" + em.slice(0, -1) + "]");
    bw = eval("[" + bw.slice(0, -1) + "]");
    var datas = "";
    var da = "";
    for (var i = 0; i < oTable.fnGetData().length; i++) {
        da = (ca[i] == '"*"') ? '"*"' : ch[i];
        var reH = (eh[i] == 0) ? '23' : parseInt(eh[i]) - 1;
        if (bw[i] == undefined) {
            modalalert('showalerts', "Valid bandwidth required");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }
        datas = datas + '{"bandwidth": ' + bw[i] + ', "endTime": {"hour": ' + eh[i] + ', "minute": ' + em[i] + '}, "days": [' + da + '], "startTime": {"hour": ' + sh[i] + ', "minute": ' + sm[i] + '}},';
        // "repeat": { "minute": "0,30", "hour": "'+sh[i]+'-'+reH+'"}
    }
    datas = datas.slice(0, -1);
    data = '{"Name": "' + $("#Name").val() + '","vaultIp": "' + $("#vaultAddress").val() + '","replicationwaitdays": "' + $("#RWdays").val() + '", "schedules": [' + datas + '],"isEnabled":' + $('#vltaddcheck').prop('checked') + '}';
    $.ajax({
        type: "POST",
        url: "api/vault_settings",
        data: data,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            modalalert('showalerts', "Vault settings saved");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $("#Name").val("");
            $("#vaultAddress").val("");
            var row = oTable.fnGetData().length;
            for (var i = 0; i < row; i++) {
                oTable.fnDeleteRow(0);
            }
            getVaultSettings();
            $('#vseLink').click()
            setTimeout("redirect('#Vaultsettings');", 2000);

        },
        error: function (result) {
            modalalert('showalerts', "Error saving Vault settings");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}
$("#cancelvault").on("click", function () {
    redirect("#Vaultsettings");
});
$("#canceleditvault").on("click", function () {
    redirect("#Vaultsettings");
});
$('#addvault').on("click", function () {
    window.location.href = "#addVaultsettings";
    $("#Name").trigger("focus");
    if ($.jStorage.get("addVid") == null) {} else {
        addVScheduler($.jStorage.get("addVid"));
    }
});

function saveVault(s) {
    if ($.trim($('#eName').val()).length > 25) {
        modalalert('showalerts', "Schedule name max char allowed is 25");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    } else if ($.trim($('#eName').val()) === '') {
        modalalert('showalerts', "Name field required.");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    if ($('#evaultAddress').val() === '') {
        modalalert('showalerts', "IP field required.");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    } else if ($.trim($('#eRWdays').val()) === '') {
        modalalert('showalerts', "Days field required.");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    var oTable = $('#ebandwidthTbl').dataTable();
    var vtype = "";
    var vurl = "";
    var data = "";
    var sh = "";
    var sm = "";
    var eh = "";
    var em = "";
    var bw = "";
    var ch = "";
    var ca = "";
    var ret = "";
    var d = 1;
    var c = 0;
    var flag = "";
    $(".ecall").each(function () {
        var chkbox = $(this);
        if (chkbox[0].checked) {
            ca = ca + '"*",';
        } else {
            ca = ca + '"$",';
        }
    });
    ca = ca.slice(0, -1);

    $(".eda").each(function () {
        var chkbox = $(this);
        if (chkbox[0].checked) {
            var x = chkbox[0].id.slice(0, -1);
            ch = ch + '"' + x + '",';
        } else {
            ch = ch + '-,';
        }
        if ((d % 7) == 0) {
            ch = ch + "###";
        }
        d++;
    });
    ch = ch.replace(/-,/g, '')
    ch = ch.split("###");
    ca = ca.split(",");
    for (var i = 0; i < ca.length; i++) {
        if (ca[i] == '"$"') {
            if (ch[i] == '') {
                modalalert('showalerts', "Days Required");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                return false;
            } else {
                ch[i] = ch[i].slice(0, -1);
            }
        } else if (ca[i] == '"*"') {
            ca[i] == '"*"';
        } else {
            return true;
        }
    }
    $(".estime").each(function () {
        sh = sh + '"' + $(this).val() + '",';
    });
    $(".eetime").each(function () {
        eh = eh + '"' + $(this).val() + '",';
    });
    $(".esmin").each(function () {
        sm = sm + '"' + $(this).val() + '",';
    });
    $(".eemin").each(function () {
        em = em + '"' + $(this).val() + '",';
    });
    $(".ebw").each(function () {
        if ($(this).val() == "") {
            modalalert('showalerts', "Valid bandwidth required");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return;
        }
        if ($(this).val() > 10000 || $(this).val() < 0) {
            ret = "false";
            modalalert('showalerts', "Valid bandwidth required, Maximum banwidth is 10GBps");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return;
        }
        bw = bw + '"' + parseFloat($(this).val()) + '",';

    });
    if (ret == "false") {
        return;
    }
    sh = eval("[" + sh.slice(0, -1) + "]");
    sm = eval("[" + sm.slice(0, -1) + "]");
    eh = eval("[" + eh.slice(0, -1) + "]");
    em = eval("[" + em.slice(0, -1) + "]");
    bw = eval("[" + bw.slice(0, -1) + "]");
    var datas = "";
    var da = "";
    for (var i = 0; i < oTable.fnGetData().length; i++) {
        da = (ca[i] == '"*"') ? '"*"' : ch[i];
        var reH = (eh[i] == 0) ? '23' : parseInt(eh[i]) - 1;
        if (bw[i] == undefined) {
            modalalert('showalerts', "Valid bandwidth required");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }
        datas = datas + '{"bandwidth": ' + bw[i] + ', "endTime": {"hour": ' + eh[i] + ', "minute": ' + em[i] + '}, "days": [' + da + '], "startTime": {"hour": ' + sh[i] + ', "minute": ' + sm[i] + '}},';
    }

    datas = datas.slice(0, -1);
    data = '{"Name": "' + $("#eName").val() + '","vaultIp": "' + $("#evaultAddress").val() + '","replicationwaitdays": "' + $("#eRWdays").val() + '", "schedules": [' + datas + '],"isEnabled":' + $('#vlteditcheck').prop('checked') + '}';
    $.ajax({
        type: "PUT",
        url: "api/vault_settings/" + $("#evault_id").val(),
        data: data,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            modalalert('showalerts', "Vault settings saved");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            $.jStorage.set("editVid", '');
            $('#vseLink').click()
            setTimeout("redirect('#Vaultsettings');", 2000);
        },
        error: function (result) {
            modalalert('showalerts', "Error saving Vault settings");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function fnGetSelected(oTableLocal) {
    return oTableLocal.$('tr.row_selected');
}

function checkRowLength(obTable, tbl) {
    if (obTable.fnGetData().length == 0) {
        $('#' + tbl).attr("disabled", "disabled");
        $('#' + tbl).attr("disabled", "disabled");
    } else {
        $('#' + tbl).removeAttr("disabled", "disabled");
        $('#' + tbl).removeAttr("disabled", "disabled");
    }
}

function jAddid() {
    $("#asVault").attr('disabled', 'disabled')
    setTimeout('$("#Name").trigger("focus")', 10);
    $.jStorage.set("addVid", "msn");
}

function deladdRow(elem) {
    var group = elem.parentNode;
    var row = group.parentNode;
    var oTable = $('#bandwidthTbl').dataTable();
    oTable.fnDeleteRow(row.parentNode._DT_RowIndex);
}

function deleditRow(elem) {
    var group = elem.parentNode;
    var row = group.parentNode;
    var oTable = $('#ebandwidthTbl').dataTable();
    oTable.fnDeleteRow(row.parentNode._DT_RowIndex);
}

function editBandwith() {
    var oTable = $('#ebandwidthTbl').dataTable();
    if (oTable.fnGetData().length >= 13) {
        return;
    }
    $('#ebandwidthTbl').dataTable().fnAddData([
        '<div class="checkbox-group"> <label class="checkbox"> <span class="text">Sun</span> <input type="checkbox" id="sun' + oTable.fnGetData().length + '" name="days" class="eda checkbox-input" onclick="checkifall(this)" data-role="none" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Mon</span> <input type="checkbox" id="mon' + oTable.fnGetData().length + '" name="days" class="eda checkbox-input" onclick="checkifall(this)" data-role="none" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Tue</span> <input type="checkbox" id="tue' + oTable.fnGetData().length + '" name="days" class="eda checkbox-input" onclick="checkifall(this)" data-role="none" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Wed</span> <input type="checkbox" id="wed' + oTable.fnGetData().length + '" name="days" class="eda checkbox-input" onclick="checkifall(this)" data-role="none" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Thu</span> <input type="checkbox" id="thu' + oTable.fnGetData().length + '" name="days" class="eda checkbox-input" onclick="checkifall(this)" data-role="none" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Fri</span> <input type="checkbox" id="fri' + oTable.fnGetData().length + '" name="days" class="eda checkbox-input" onclick="checkifall(this)" data-role="none" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Sat</span> <input type="checkbox" id="sat' + oTable.fnGetData().length + '" name="days" class="eda checkbox-input" onclick="checkifall(this)" data-role="none" /> <div class="checkbox-indicator"></div> </label> </div> <div> <label class="checkbox" style="margin-top:0px"> <span class="text">All</span> <input type="checkbox" id="all' + oTable.fnGetData().length + '" name="chkall" class="ecall checkbox-input" onclick="checkifall(this)" data-role="none" /> <div class="checkbox-indicator"></div> </label> </div>',
        '<div class="select-grouped-min"> <div class="select-container select-container-min"> <select data-role="none" class="estime" name="bSHour"><option value="0">12 AM</option><option value="1">1 AM</option><option value="2">2 AM</option><option value="3">3 AM</option><option value="4">4 AM</option><option value="5">5 AM</option><option value="6">6 AM</option><option value="7">7 AM</option><option value="8">8 AM</option><option value="9">9 AM</option><option value="10">10 AM</option><option value="11">11 AM</option><option value="12">12 PM</option><option value="13">1 PM</option><option value="14">2 PM</option><option value="15">3 PM</option><option value="16">4 PM</option><option value="17">5 PM</option><option value="18">6 PM</option><option value="19">7 PM</option><option value="20">8 PM</option><option value="21">9 PM</option><option value="22">10 PM</option><option value="23">11 PM</option></select> </div> <div class="select-container select-container-min"> <select name="smin" class="esmin"  data-role="none"><option value="0">00</option><option value="15">15</option><option value="30">30</option><option value="45">45</option></select> </div> </div>',
        '<div class="select-grouped-min"> <div class="select-container select-container-min"> <select data-role="none" class="eetime" name="bEHour"> <option value="0">12 AM</option> <option value="1">1 AM</option> <option value="2">2 AM</option> <option value="3">3 AM</option> <option value="4">4 AM</option> <option value="5">5 AM</option> <option value="6">6 AM</option> <option value="7">7 AM</option> <option value="8">8 AM</option> <option value="9">9 AM</option> <option value="10">10 AM</option> <option value="11">11 AM</option> <option value="12">12 PM</option> <option value="13">1 PM</option> <option value="14">2 PM</option> <option value="15">3 PM</option> <option value="16">4 PM</option> <option value="17">5 PM</option> <option value="18">6 PM</option> <option value="19">7 PM</option> <option value="20">8 PM</option> <option value="21">9 PM</option> <option value="22">10 PM</option> <option value="23">11 PM</option> </select></div><div class="select-container select-container-min"><select name="emin" class="eemin" data-role="none"> <option value="0">00</option> <option value="15">15</option> <option value="30">30</option> <option value="45">45</option> </select></div></div>',
        '<div><input data-role="none" class="ebw input-min" name="bWidth" value="0" min="0" step="any"/><span>&nbsp&nbspMbps</span></div>',
        '<div><a onclick="deleditRow(this);"><span class="icon-delete table-icon active"></span></a></div>'
    ]);
    checkRowLength(oTable, "ebandwidthTbl");
}

function checkifall(elem) {
    var group = elem.parentNode.parentNode.parentNode;
    if (elem.name == "chkall") {
        $(group).find('input[name="days"]').prop('checked', false);
    } else {
        $(group).find('input[name="chkall"]').prop('checked', false);
    }
}

function checkvip(s) {
    var lvip = (s == "asVault") ? $("#vaultAddress").val() : $("#evaultAddress").val();
    var vIP = $.jStorage.get("vIP");
    if (vIP != null) {
        if (vIP != lvip) {
            if (s == "asVault") {
                $("#asVault").attr("disabled", "disabled");
            } else {
                $("#esVault").attr("disabled", "disabled");
            }
        } else {
            if (s == "asVault") {
                $("#asVault").removeAttr("disabled", "disabled");
            } else {
                $("#esVault").removeAttr("disabled", "disabled");
            }
        }
    } else {
        if (s == "asVault") {
            $("#asVault").attr("disabled", "disabled");
        } else {
            $("#esVault").attr("disabled", "disabled");
        }
    }
}
var vC = {};

function authVault(s) {
    modalalert('showalerts', "Loading...");
    var ip = (s == "aauth") ? $("#vaultAddress").val() : $("#evaultAddress").val();
    var vaultData = {};
    vaultData.vaultIP = ip;
    $.ajax({
        type: "POST",
        url: '/api/utilities/abc/testVaultCredentials',
        data: JSON.stringify(vaultData),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.status == "err") {
                modalalert('showalerts', data.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
                if (s == "aauth") {
                    $("#asVault").attr("disabled", "disabled");
                } else {
                    $("#esVault").attr("disabled", "disabled");
                }

            } else {
                modalalert('showalerts', "Test connection successful");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                if (s == "aauth") {
                    $("#asVault").removeAttr("disabled", "disabled");
                } else {
                    $("#esVault").removeAttr("disabled", "disabled");
                }
            }
        },
        error: function (result) {
            modalalert('showalerts', "Error in test connection");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function addBandwith() {
    var oTable = $('#bandwidthTbl').dataTable();
    // Get the length
    if (oTable.fnGetData().length >= 13) {
        return;
    }
    $('#bandwidthTbl').dataTable().fnAddData([
        '<div class="checkbox-group"><label class="checkbox"><span class="text">Sun</span><input type="checkbox" id="sun" name="days" class="da checkbox-input" onclick="checkifall(this)" /> <div class="checkbox-indicator"></div> </label><label class="checkbox"><span class="text">Mon</span><input type="checkbox" id="mon" name="days" class="da checkbox-input" onclick="checkifall(this)" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Tue</span> <input type="checkbox" id="tue" name="days" class="da checkbox-input" onclick="checkifall(this)" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Wed</span> <input type="checkbox" id="wed" name="days" class="da checkbox-input" onclick="checkifall(this)" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Thu</span> <input type="checkbox" id="thu" name="days" class="da checkbox-input" onclick="checkifall(this)" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Fri</span> <input type="checkbox" id="fri" name="days" class="da checkbox-input" onclick="checkifall(this)" /> <div class="checkbox-indicator"></div> </label> <label class="checkbox"> <span class="text">Sat</span> <input type="checkbox" id="sat" name="days" class="da checkbox-input" onclick="checkifall(this)" /> <div class="checkbox-indicator"></div> </label></div> <div><label class="checkbox" style="margin-top:0px"><span class="text">All</span><input type="checkbox" id="all" name="chkall" class="call checkbox-input" onclick="checkifall(this)" /> <div class="checkbox-indicator"></div> </label></div>',
        '<div class="select-grouped-min"><div class="select-container select-container-min"><select class="stime" name="bSHour"><option value="0">12 AM</option><option value="1">1 AM</option><option value="2">2 AM</option><option value="3">3 AM</option><option value="4">4 AM</option><option value="5">5 AM</option><option value="6">6 AM</option><option value="7">7 AM</option><option value="8">8 AM</option><option value="9">9 AM</option><option value="10">10 AM</option><option value="11">11 AM</option><option value="12">12 PM</option><option value="13">1 PM</option><option value="14">2 PM</option><option value="15">3 PM</option><option value="16">4 PM</option><option value="17">5 PM</option><option value="18">6 PM</option><option value="19">7 PM</option><option value="20">8 PM</option><option value="21">9 PM</option><option value="22">10 PM</option><option value="23">11 PM</option></select></div><div class="select-container select-container-min"><select name="smin" class="smin"  data-role="none"><option value="0">00</option><option value="15">15</option><option value="30">30</option><option value="45">45</option></select></div></div>',
        '<div class="select-grouped-min"><div class="select-container select-container-min"><select class="etime" name="bEHour"><option value="0">12 AM</option><option value="1">1 AM</option><option value="2">2 AM</option><option value="3">3 AM</option><option value="4">4 AM</option><option value="5">5 AM</option><option value="6">6 AM</option><option value="7">7 AM</option><option value="8">8 AM</option><option value="9">9 AM</option><option value="10">10 AM</option><option value="11">11 AM</option><option value="12">12 PM</option><option value="13">1 PM</option><option value="14">2 PM</option><option value="15">3 PM</option><option value="16">4 PM</option><option value="17">5 PM</option><option value="18">6 PM</option><option value="19">7 PM</option><option value="20">8 PM</option><option value="21">9 PM</option><option value="22">10 PM</option><option value="23">11 PM</option></select></div><div class="select-container select-container-min"><select name="emin" class="emin" data-role="none"><option value="0">00</option><option value="15">15</option><option value="30">30</option><option value="45">45</option></select></div></div>',
        '<div><input data-role="none" class="bw input-min" name="bWidth" value="0" min="0" step="any"/><span>&nbsp&nbspMbps</span></div>',
        '<div><a onclick="deladdRow(this);"><span class="icon-delete table-icon active"></span></a><div>'
    ]);
    checkRowLength(oTable, "bandwidthTbl");
    $('.da' + oTable.fnGetData().length).trigger('create');
    $('.call' + oTable.fnGetData().length).trigger('create');
}

function enable() {
    var username = document.getElementById("vaultUserName").value;
    if (username == "admin" || username == "root") {
        $('#testConnection').attr("disabled", "disabled");
        $('#Alertuname').show()
    } else if (username != "admin" || username != "root") {
        $('#testConnection').removeAttr("disabled", "disabled");
        $('#Alertuname').hide()
    }
}

function senable() {
    $("#esVault").removeAttr("disabled", "disabled");
    $("#esVault").removeAttr("disabled", "disabled");
}
/***************cluster management***************/
function getcustomerSInfo() {
    modalalert('showalerts', "Loading disk usage stats...");
    setTimeout("$('#showalerts').modal('hide');", 3000);
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#csiserverid").val();
    var select = $('#csiserverid');
    select.empty();
    $.each(nodes, function (key, val) {
        var name = val.split('#');
        var urlip = "";
        if (name[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = name[0];
        }
        var id = (mid != "" || mid == $.jStorage.get("machineId")) ? mid : $.jStorage.get("machineId");
        var sel = (key == id) ? " selected " : "";
        $("#csiserverid").append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
        // $("#csiserverid").selectmenu('refresh', true);
    });
    mid = $("#csiserverid").val();
    var urllink = 'api/storage/abc/diskUsageStats'
    var listStorage = $("#csiData");
    listStorage.html("");
    $.ajax({
        type: "POST",
        url: urllink,
        headers: {
            "Replibit-Server": mid
        },
        success: function (data) {
            listStorage.html("");
            var tablestr = '<table cellpadding="0" cellspacing="0" border="0" class="display cdiskStat" width="100%" style="font-weight: normal;"><thead><tr><th>Protected System</th><th>User Name</th><th>Available</th><th>Used</th></tr></thead><tbody>';
            $.each(data, function (index, value) {
                if (value.name !== "tank" && value.name !== "aristosimgexports" && value.name !== "aristosbay") {
                    tablestr = tablestr + '<tr><td class="dtWrapTd">' + value.name + '</td><td class="dtWrapTd">' + value.username + '</td><td>' + value.available + '</td><td>' + value.used + '</td></tr>';
                }
            });
            tablestr = tablestr + '</tbody></table>';
            listStorage.append(tablestr);
            var oTable = $('.cdiskStat').dataTable($.extend({}, defaultDataTablesOptions, {
                "bProcessing": true,
                "aaSorting": [[0, "desc"]],
                "bStateSave": true
            }));
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}
var clusterMap = {
    0: "STARTUP",
    1: "PRIMARY",
    2: "SECONDARY",
    3: "RECOVERING",
    4: "FATAL",
    5: "STARTUP2",
    6: "UNKNOWN",
    7: "ARBITER",
    8: "DOWN",
    9: "ROLLBACK",
    10: "SHUNNED"
}

    function changeIface(mid) {
        modalalert('showalerts', "Interface is updating please wait.");
        var idata = {};
        idata.interfaceName = $('#' + mid + '_iflist').val();
        $.ajax({
            type: "POST",
            url: "/api/cluster_manager/abc/changeNetworkInterface",
            data: JSON.stringify(idata),
            contentType: "application/json; charset=utf-8",
            headers: {
                "Replibit-Server": mid
            },
            dataType: "json",
            success: function (data) {
                if (data.status == "ok") {
                    modalalert('showalerts', "Interface changed successfully");
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                    redirect('#clusterMgmt');
                    getClusterMgmt();

                } else {
                    modalalert('showalerts', data.msg);
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                }
            },
            error: function (errMsg) {
                modalalert('showalerts', errMsg.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(errMsg);
            }
        });
    }

    function delCluster(mid) {
        $('#delClink').attr("onclick", "delClusterMachine('" + mid + "')");
    }

    function delClusterMachine(mid) {
        $("#delCluster").modal('hide');
        modalalert('showalerts', "Please wait. Node deletion will take few minutes.");
        $.ajax({
            type: "POST",
            url: "/api/cluster_manager/abc/removeNode",
            contentType: "application/json; charset=utf-8",
            headers: {
                "Replibit-Server": mid
            },
            dataType: "json",
            success: function (data) {
                if (data.status == "ok") {
                    modalalert('showalerts', "Machine removed from the cluster successfully,will be rebooted.Please wait.");
                    setTimeout("getClusterMgmt();$('#showalerts').modal('hide');", 40000);

                } else {
                    modalalert('showalerts', data.msg);
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                }
            },
            error: function (errMsg) {
                modalalert('showalerts', errMsg.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(errMsg);
            }
        });
    }

    function getClusterMgmt() {
        $.ajax({
            url: 'api/cluster_manager',
            success: function (data) {
                var clsstr = '<div class="table-responsive"><table cellpadding="0" cellspacing="0" border="0" class="display cluserTable" width="100%"><thead><tr><th>Status</th><th>Hostname</th><th>IP</th><th>Action</th></tr></thead><tbody>'; //<th>Interface</th>
                $.each(data, function (key, val) {
                    var state = clusterMap[val.state];

                    var iflist = "";
                    var ifData = "";
                    var delbtn = "";
                    var ifListData = "";
                    if (val.state == 1 || val.state == 2) {
                        delbtn = '<a onclick="delCluster(\'' + val.clusterMachineId + '\'); " data-toggle="modal" href="#delCluster" ><img src="style/images/delete.png" alt="Delete" title="Delete"/></a>';
                        iflist = $.ajax({
                            type: "POST",
                            url: "/api/utilities/abc/getNetworkDetails",
                            contentType: "application/json; charset=utf-8",
                            headers: {
                                "Replibit-Server": val.clusterMachineId
                            },
                            dataType: "json",
                            async: false
                        }).responseText;
                        iflist = (iflist == undefined) ? "" : iflist;
                        if (showSessionTimedOutIfUnauthorized(iflist)) {
                            return false;
                        }
                        ifData = JSON.parse(iflist);
                        ifListData = '<select id="' + val.clusterMachineId + '_iflist" onchange="changeIface(\'' + val.clusterMachineId + '\')">';
                        $.each(ifData, function (j, value) {
                            var choose = (val.interfaceName == value.interface) ? "selected" : "";
                            if (value.address != "") {
                                ifListData = ifListData + '<option value="' + value.interface + '" ' + choose + '>' + value.interface + '</option>';
                            }
                        });
                        ifListData = ifListData + '</select>';
                        if (val.state != 1 && val.state != 2) {
                            ifListData = "";
                            delbtn = "";
                        }
                    }
                    clsstr = clsstr + '<tr><td>' + state + '</td><td class="dtWrapTd">' + val.machineName + '</td><td class="dtWrapTd">' + val.ip + '</td><td>' + delbtn + '</td></tr>';

                    /*<td>'+ifListData+'</td>*/
                });
                clsstr = clsstr + '</tbody></table></div>';
                $('#clusterData').html("");
                $('#clusterData').append(clsstr);
                $('.cluserTable').dataTable($.extend({}, defaultDataTablesOptions, {
                    "aaSorting": [[1, "desc"]],
                    "bStateSave": true,
                    "aoColumnDefs": [{
                        "bSortable": false,
                        "aTargets": [3]
                    }, {
                        "sClass": "center",
                        "aTargets": [0, 1, 2, 3]
                    }]
                }));

            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
    }

    function getSettings() {
        $(".integratorerrorAlert").hide();
        $(".configerrorAlert").hide();
        // Do not enable this two lines //
        // $('#accordion li a').addClass('accordion-toggle divtoggle collapsed')
        // $('#accordion .in').collapse("hide");
        var nodes = setNodes();
        if (nodes === false) {
            return false;
        }
        var urllink = '/api/settings';
        $.ajax({
            url: urllink,
            success: function (data) {
                prepareSmtpSettings(data);
                prepareJADaysSettings(data);
                prepareD2CSettings(data);
                prepareAgentMonitoringSettings(data);
                prepareLicenseDetailsSettings(data);
                prepareArbiterNodeSettings(data);
                prepareUpdateManagerSection(data);
                prepareManageStoreSettings(data);
                prepareRemoteAssistSettings(data);
                checkSMLicensingEnabled(data);
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
        var urllink = '/api/users';
        $.ajax({
            url: urllink,
            success: function (data) {
                $.each(data, function (index, value) {
                    if (value.userName == $.jStorage.get("username")) {
                        $("#userpassid").val(value._id);
                    }
                });
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
        $('#webUser').val($.jStorage.get("username"));
        getApikey();
        getTimezones();
        getPkgList();
        getTimeDate();
        getHost();
        getNetworkInterfaces();
        $("#elements> *").hide();
        getImgQuota();
        var select = $('#rsserverid');
        select.empty();
        $.each(nodes, function (key, val) {
            var name = val.split('#');
            var urlip = "";
            if (name[0] == '127.0.0.1') {
                urlip = location.host;
            } else {
                urlip = name[0];
            }
            var sel = (key == $.jStorage.get("machineId")) ? " selected " : "";
            $('#rsserverid').append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
        });
        var select = $('#snserverid');
        select.empty();
        $.each(nodes, function (key, val) {
            var name = val.split('#');
            var urlip = "";
            if (name[0] == '127.0.0.1') {
                urlip = location.host;
            } else {
                urlip = name[0];
            }
            var sel = (key == $.jStorage.get("machineId")) ? " selected " : "";
            $('#snserverid').append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
        });

        getFirewallStatus();

        $("#factory-reset-button").attr("onclick", "delCluster('" + $.jStorage.get("machineId") + "')");

        $.ajax({
            type: "POST",
            url: "/api/settings/abc/is_using_rbas_api",
            dataType: "json",
            success: function (enabled) {
                if (enabled) {
                    $.ajax({
                        type: "POST",
                        url: "/api/settings/abc/get_rbas_network_acl_status",
                        dataType: "json",
                        success: function (data) {
                            if (data.status === "ok") {
                                $("#rbas-api-acl-status").html(data.networkAclStatus.status + (data.networkAclStatus.path ? ' (' + data.networkAclStatus.path + ')' : ''));
                            } else {
                                $("#rbas-api-acl-status").html("Unknown");
                            }
                        },
                        error: function (result) {
                            $("#rbas-api-acl-status").html("Unknown");
                            sessionTimeout(result);
                        }
                    });

                    $.ajax({
                        type: "POST",
                        url: "/api/settings/abc/get_rbas_network_acl",
                        dataType: "json",
                        success: function (data) {
                            if (data.status == "ok") {
                                $("#rbas-api-acl").html(data.networkAcl.join("<br>"));
                            } else {
                                $("#rbas-api-acl").html("Cannot retrieve network ACL.");
                            }
                        },
                        error: function (result) {
                            $("#rbas-api-acl").html("Cannot retrieve network ACL.");
                            sessionTimeout(result);
                        }
                    });

                    $("#rbas-api-settings").show();
                } else {
                    $("#rbas-api-settings").hide();
                }
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
    }

    $('#file').on('change', function() {
        $('#output').html("");
        if ( this.files[0].size < 10485760 ) {
            $("#uplogo").removeAttr("disabled", "disabled");
        } else {
            var errmsg = "Max logo size 10MB";
            $('#output').html(errmsg);
            $("#uplogo").attr("disabled", "disabled");
            return false;
        }
        var accept_files = "[image/png, image/jpeg, image/gif , image/jpg]";
        if (accept_files.indexOf(this.files[0].type) > -1) {
            $("#uplogo").removeAttr("disabled", "disabled");
        } else {
            var errmsg = "Invalid file type. File must be one of following types " + accept_files;
            $('#output').html(errmsg);
            $("#uplogo").attr("disabled", "disabled");
            return false;
        }

    });

    function successResponceHandler(res, settings_name) {
        if (res.status === "ok") {
            showModalAlertWithTimeout(settings_name + ' settings updated');
        } else if (res.status === "error") {
            showModalAlertWithTimeout(res.msg);
        }
    }

    function uploadLogo() {
        modalalert('showalerts', "Uploading Logo...");
        var fd = new FormData(document.getElementById("imginfo"));
        fd.append("label", "file");
        $.ajax({
            url: "/api/utilities/dummy/uploadlogo",
            type: "POST",
            data: fd,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false   // tell jQuery not to set contentType
            }).done(function( data ) {
                modalalert('showalerts', data);
                setTimeout("$('#showalerts').modal('hide'); location.reload();", 3000);

        });
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }

    function shutDown() {
        modalalert('showalerts', "Shutting down your system");

        var mid = $("#rsserverid").val();
        $.ajax({
            type: "POST",
            url: "api/utilities/abc/shutdown",
            data: JSON.stringify({}),
            contentType: "application/json; charset=utf-8",
            headers: {
                "Replibit-Server": mid
            },
            dataType: "json",
            success: function (data) {
                if (data.result == "ok") {
                    modalalert('showalerts', "Shutting down your system");
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                    setTimeout("redirect();", 10000);
                } else {
                    modalalert('showalerts', data.msg);
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                    setTimeout("redirect();", 10000);
                }

            },
            error: function (errMsg) {
                modalalert('showalerts', errMsg.responseText);
                setTimeout("$('#showalerts').modal('hide');", 3000);

            }
        });
        $("#confirmShutdown").modal('hide');
    }

    function showlicense() {
        var nodes = setNodes();
        if (nodes === false) {
            return false;
        }
        var urllink = '/api/settings';
        $.ajax({
            url: urllink,
            success: function (data) {
                prepareLicenseDetailsSettings(data);
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
    }

    function prepareLicenseDetailsSettings(settingsData) {
        settings = eval(settingsData);

        $.each(settings, function (i, setting) {
            if (setting.name === 'licenses_credentials') {
                $('#license-username').html(setting.data.userName);

                if (window.glob === 'appliance') {
                    if (setting.data.location) {
                      $('#license-location').html(setting.data.location);
                    } else {
                      $('#license-location').html('N/A');
                    }
                }

                return;
            }
        });

        if (window.glob === 'appliance') {
            $.each(settings, function (i, setting) {
                if (setting.name === 'licenses') {
                    $.ajax({
                        type: 'POST',
                        url: '/api/utilities/abc/getFreeLicenses',
                        success: function (data) {
                            if (setting.data.type === 'storage') {
                                $('#license-type').html('Storage');

                                $('#free-storage').html(data.storage + ' TB');

                                $('#license-storage-total').html(setting.data.storageAmount + ' TB');
                                $('#license-storage-used').html((setting.data.storageAmount - data.storage).toFixed(2) + ' TB');
                                $('#license-storage-free').html(data.storage + ' TB');

                                $('#license-storage-retention').html(setting.data.retentionPeriod + ' yr');

                                $('.license-endpoint').hide();
                                $('.license-usage').hide();
                                $('.license-storage').show();
                            } else if (setting.data.type === 'usage') {
                                $('#license-type').html('Usage');
                                $('#license-usage-server-used').html(data.used_servers);
                                $('#license-usage-workstation-used').html(data.used_workstations);

                                $('.license-storage').hide();
                                $('.license-endpoint').hide();
                                $('.license-usage').show();
                            } else {
                                $('#license-type').html('Endpoint');

                                $('#free-licenses-workstation').html(data.workstations);
                                $('#free-licenses-server').html(data.servers);

                                $('#license-endpoint-server-total').html(setting.data.servers);
                                $('#license-endpoint-server-used').html(parseInt(setting.data.servers) - parseInt(data.servers));
                                $('#license-endpoint-server-free').html(data.servers);
                                $('#license-endpoint-workstation-total').html(setting.data.workstations);
                                $('#license-endpoint-workstation-used').html(parseInt(setting.data.workstations) - parseInt(data.workstations));
                                $('#license-endpoint-workstation-free').html(data.workstations);

                                $('.license-storage').hide();
                                $('.license-usage').hide();
                                $('.license-endpoint').show();
                            }
                        },
                        error: function (result) {
                            modalalert('showalerts', 'Error getting available licenses');
                            setTimeout("$('#showalerts').modal('hide');", 3000);
                            sessionTimeout(result);
                        }
                    });

                    return;
                }
            });
        }
    }

    function getApikey() {
        $.ajax({
            url: "api/utilities/abc/getApiKey",
            type: "POST",
            success: function (data) {
                $("#apikey").html(data.msg);
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
    }

    function saveApplianceLicensePass() {
        saveLicensePass($('#license-password').val());
    }

    function saveVaultLicensePass() {
        saveLicensePass($('#license-password').val());
    }

    function saveLicensePass(password) {

        if (!password) {
            showModalAlertWithTimeout('Password required');
            return false;
        }

        var data = {
            password: password
        };

        modalalert('showalerts', "Updating password...");

        $.ajax({
            type: 'POST',
            url: 'api/settings/licenses_credentials/set_settings',
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (data) {
                showModalAlertWithTimeout(data.msg);
                if (data.status === "ok") {
                    $('#license-password').val('');
                    $('#changeLicensePass').modal('hide');
                }
            },
            error: function (result) {
                showModalAlertWithTimeout('Unable to update the password');
                sessionTimeout(result);
            }
        });
    }

    function getCronStrings(interval, startHour, startMinute, endHour, endMinute, crons) {
        var cronminute = "";
        if (startHour == endHour && endMinute > startMinute) {
            for (j = startMinute; j <= endMinute; j += interval) {
                cronminute += j + ",";
            }
            cronminute = cronminute.substr(0, cronminute.length - 1);
            crons.push('{"minute": " ' + cronminute + ' ","hour":" ' + startHour + ' ","day": "*","month": "*","day_of_week": "*"}');
            return false;
        }
        if (startMinute > 0) {
            for (j = startMinute; j < 60; j += interval) {
                cronminute += j + ",";
            }
            cronminute = cronminute.substr(0, cronminute.length - 1);
            crons.push('{"minute": " ' + cronminute + ' ","hour":" ' + startHour + ' ","day": "*","month": "*","day_of_week": "*"}');
            startHour++;
        }
        cronminute = "";
        if (endMinute > 0) {
            for (j = 0; j <= endMinute; j += interval) {
                cronminute += j + ",";
            }
            cronminute = cronminute.substr(0, cronminute.length - 1);
            crons.push('{"minute": " ' + cronminute + ' ","hour":" ' + endHour + ' ","day": "*","month": "*","day_of_week": "*"}');
            endHour--;
        }
        cronminute = "";
        for (j = 0; j < 60; j += interval) {
            cronminute += j + ",";
        }
        cronminute = cronminute.substr(0, cronminute.length - 1);
        if (startHour != endHour) {
            crons.push('{"minute": " ' + cronminute + ' ","hour":" ' + startHour + '-' + endHour + ' ","day": "*","month": "*","day_of_week": "*"}');
        } else {
            crons.push('{"minute": " ' + cronminute + ' ","hour":" ' + startHour + ' ","day": "*","month": "*","day_of_week": "*"}');
        }
    }

    function emailchecks() {
        if ($('#emailcheck').prop('checked')) {
            $('#emailSettings').show();
            $("#testmail").attr("disabled", "disabled");
            if ($("#userName").val() != "" && $("#serverName").val() != "" && $("#port").val() != "" && $("#fromEmail").val() != "" && $("#toEmail").val() != "") {
                $("#testmail").removeAttr("disabled", "disabled");
            } else {
                $("#testmail").attr("disabled", "disabled");
            }
        } else {
            $('#emailSettings').hide();
            $("#testmail").attr("disabled", "disabled");
            authSmtp();
        }
    }

    function ValueKeyPress() {
        $("#testmail").attr("disabled", "disabled");
    }

    function ValueKeyPress() {
        $("#savemanage").attr("disabled", "disabled");
    }

    function changeViewD2CControls(isEnabled) {
        $('#d2c_settings').toggle(isEnabled);
        $('#get_d2c_cert').toggle(isEnabled);
        if ($('#cert_data_container').text() != "") {
            $('#get_d2c_cert_text').text("Renew Certificate");
        }
    }

    function getD2CData() {
      var isEnabled = $("#d2c_check").is(":checked");
      return {
          isEnabled: $("#d2c_check").is(":checked"),
          FQDN: isEnabled ? $('#d2c_fqdn').val() : "",
          fingerprint: isEnabled ? $('#cert_data_container').text() : "",
      }
    }

    function d2c_save_and_proceed(isSaveNeeded) {
        var data = getD2CData(),
            isModalShow = $("#confirmGetCertificate").is(':visible'),
            emptyValueMsg = "Please insert valid URL/FQDN.",
            invalidValueMsg = data.FQDN + " is not a valid URL/FQDN. Please insert valid URL/FQDN.";

        if (data.FQDN === "" || !isHostName(data.FQDN)) {
            var alert_msg = data.FQDN === "" ? emptyValueMsg : invalidValueMsg;
            modalalert('showalerts', alert_msg);
            setTimeout("$('#showalerts').modal('hide');", 3000);
            if (isModalShow) {
              $("#confirmGetCertificate").modal('hide');
            }
            return;
        }
        if (isSaveNeeded) {
            d2c_save_handler(data);
        } else {
            d2c_proceed_handler();
        }
    }

    function d2c_save_handler(data) {
        modalalert('showalerts', 'Updating direct to cloud settings. Please wait.');
        $.ajax({
            type: "POST",
            url: "api/settings/direct_to_cloud/set_settings",
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json",
            success: function (res) {
                successResponceHandler(res, 'Direct to cloud');
                do_d2c_proceed();
            },
            error: function (res) {
                showModalAlertWithTimeout('Failed to update direct to cloud settings. Please try again.');
                sessionTimeout(res);
            }
        });
    }

    function do_d2c_proceed() {
        var d2c_data = getD2CData()
        if (d2c_data.isEnabled && d2c_data.FQDN) {
            d2c_proceed_handler();
        }
    }

    function d2c_proceed_handler() {
        modalalert('showalerts', 'Sign/renew certificates. Please wait.');
        $.ajax({
            type: "POST",
            url: "/api/utilities/abc/getD2CCertificate",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (rs) {
                if (rs.status === true) {
                    showModalAlertWithTimeout('Direct to cloud certificate successfully loaded');
                    $('#cert_data_container').text(rs.data);
                    $('#get_d2c_cert_text').text("Renew Certificate");
                } else if (rs.status === false) {
                    showModalAlertWithTimeout("Failed to sign/renew certificates. Please check URL/FQDN and try again.");
                }
            },
            error: function (rs) {
                showModalAlertWithTimeout('Failed to get D2C certificate. Please check URL/FQDN.');
                sessionTimeout(rs);
            }
        });
        if ($("#confirmGetCertificate").is(':visible')) {
            $("#confirmGetCertificate").modal('hide');
        }
    }

    function d2c_check() {
        var isEnabled = $("#d2c_check").is(":checked");
        changeViewD2CControls(isEnabled);
        if (!isEnabled) {
            clear_d2c_info();
        } else {
            d2c_save_handler({isEnabled: isEnabled});
        }
    }

    function clear_d2c_info() {
        var isEnabled = false;
        $('#d2c_fqdn').prop('value', "");
        $('#d2c_check').prop('checked', isEnabled);
        $('#cert_data_container').text("");
        d2c_save_handler({isEnabled: isEnabled});
        changeViewD2CControls(isEnabled);
    }

    function prepareD2CSettings(allSettings) {
        $.each(eval(allSettings), function (index, value) {
            if (value.name === 'direct_to_cloud') {
                var data = value.data,
                    cert_text = data.fingerprint !== undefined ? data.fingerprint : "";
                $('#d2c_fqdn').val(data.FQDN);
                $('#d2c_check').prop('checked', data.isEnabled);
                $('#cert_data_container').text(cert_text);
                changeViewD2CControls(data.isEnabled);
            }
        });

        $('#get_d2c_cert').on('click', function () {
            d2c_save_and_proceed(false);
        });
        $('#d2c_proceed_btn').on('click', function () {
            d2c_save_and_proceed(true)
        });
        $('#clear_d2c_info').on('click', clear_d2c_info);
        $('#d2c_check').on('change', d2c_check);
    }

    function prepareSmtpSettings(data) {
        $('#emailcheck').prop('checked', false);
        $('#emailSettings').hide();
        $("#testmail").attr("disabled", "disabled");
        $('#emailSettings input[type="text"]').val('');
        $("#conSecurity").val("none");
        $('#emailSettings')
        data = eval(data);
        var license_type = "";
        $.each(data, function (index, value) {
          if (value.name === "licenses") {
              license_type = value.data.type;
          }
        });
        $.each(data, function (index, value) {
            if (value.name === "email_settings") {
                var dataval = value.data;
                $("#userName").val(dataval.userName);
                $("#serverName").val(dataval.server);
                $("#port").val(dataval.port);
                $("#conSecurity").val(dataval.connectionSecurity);
                $("#fromEmail").val(dataval.fromEmail);
                $("#toEmail").val(dataval.toEmail);
                $('#alertBootVM').prop('checked', dataval.alertTypes['Boot VM']);
                $('#alertDiskUsage').prop('checked', dataval.alertTypes['Disk Usage']);
                $('#alertFailedBackup').prop('checked', dataval.alertTypes['Failed Backup']);
                if (window.glob === "appliance") {
                  if (license_type === "usage") {
                    $('#alertLicenseUnavailableEmail').hide();
                    $('#alertLicenseUnavailable').prop('checked', false);
                  } else {
                    $('#alertLicenseUnavailableEmail').show();
                    $('#alertLicenseUnavailable').prop('checked', dataval.alertTypes['License Unavailable']);
                  }
                }
                $('#alertMissedBackup').prop('checked', dataval.alertTypes['Missed Backup']);
                $('#alertPoolStatus').prop('checked', dataval.alertTypes['Pool Status']);
                $('#alertProtectedSystem').prop('checked', dataval.alertTypes['Protected System']);
                $('#alertSuccessfulBackup').prop('checked', dataval.alertTypes['Successful Backup']);
                $('#alertVaultReplication').prop('checked', dataval.alertTypes['Vault Replication']);
                if (dataval.isEnabled) {
                    $('#emailcheck').prop('checked', true);
                    $('#emailSettings').show();
                } else {
                    $('#emailcheck').prop('checked', false);
                    $('#emailSettings').hide();
                }
                if ($("#userName").val() != "" && $("#serverName").val() != "" && $("#port").val() != "" && $("#fromEmail").val() != "" && $("#toEmail").val() != "") {
                    document.getElementById('conSecurity').onchange = function () {
                        $("#testmail").attr("disabled", "disabled");
                    }
                    document.getElementById('authMethod').onchange = function () {
                        $("#testmail").attr("disabled", "disabled");
                    }
                    if ($('#emailcheck').is(':checked')) {
                        $("#testmail").removeAttr("disabled", "disabled");
                    } else {
                        $("#testmail").attr("disabled", "disabled");
                    }

                } else {
                    $("#testmail").attr("disabled", "disabled");
                }

            }
        });
    }

    function authSmtp() {
        smtpData = {
            isEnabled: $('#emailcheck').prop('checked'),
            userName: $('#userName').val(),
            password: $('#emailPassword').val(),
            server: $('#serverName').val(),
            port: $('#port').val(),
            connectionSecurity: $('#conSecurity').val(),
            fromEmail: $('#fromEmail').val(),
            toEmail: $('#toEmail').val().replace(/ /g, ''),
            alertTypes: {
                'Boot VM': $('#alertBootVM').prop('checked'),
                'Disk Usage': $('#alertDiskUsage').prop('checked'),
                'Failed Backup': $('#alertFailedBackup').prop('checked'),
                'License Unavailable': $('#alertLicenseUnavailable').prop('checked'),
                'Missed Backup': $('#alertMissedBackup').prop('checked'),
                'Pool Status': $('#alertPoolStatus').prop('checked'),
                'Protected System': $('#alertProtectedSystem').prop('checked'),
                'Successful Backup': $('#alertSuccessfulBackup').prop('checked'),
                'Vault Replication': $('#alertVaultReplication').prop('checked')
            }
        };

        if ($('#emailcheck').prop('checked')) {
            if ((!(smtpData.userName === '') != !(smtpData.password === '')) || smtpData.server === '' || smtpData.port === '' || smtpData.fromEmail === '' || smtpData.toEmail === '') {
                modalalert('showalerts', 'Please complete all required fields.');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('#testmail').attr('disabled', 'disabled');
                return false;
            } else if (!(smtpData.alertTypes['Boot VM'] || smtpData.alertTypes['Disk Usage'] || smtpData.alertTypes['Failed Backup'] || smtpData.alertTypes['License Unavailable'] || smtpData.alertTypes['Missed Backup'] || smtpData.alertTypes['Pool Status'] || smtpData.alertTypes['Successful Backup'] || smtpData.alertTypes['Vault Replication'])) {
                modalalert('showalerts', 'Select at least one alert type');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('#testmail').attr('disabled', 'disabled');
                return false;
            } else if (!IsNumeric(smtpData.port)) {
                modalalert('showalerts', 'Please enter a valid port.');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('#testmail').attr('disabled', 'disabled');
                return false;
            }
        }

        $.ajax({
            type: 'POST',
            url: 'api/settings/email_settings/set_settings',
            data: JSON.stringify(smtpData),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (data) {
                if (data.status === 'ok') {
                    modalalert('showalerts', 'Email settings saved');
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                    $('#testmail').removeAttr('disabled');
                    if ($('#emailcheck').prop('checked')) {
                        $('#emailSettings').show();
                    } else {
                        $('#emailSettings').hide();
                    }
                } else {
                    modalalert('showalerts', data.msg);
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                }
            },
            error: function (result) {
                $("#altMsg").html("<h3>Email settings not saved</h3>");
                $("#altMsgPopup").modal("show");
                sessionTimeout(result);
            }
        });
    }

    function testmail() {
        modalalert('showalerts', 'Sending test mail. Please wait.');
        $.ajax({
            type: 'POST',
            url: 'api/utilities/abc/mailTest',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function (data) {
                if (data.status === 'ok') {
                    modalalert('showalerts', data.msg);
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                } else {
                    modalalert('showalerts', data.msg);
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                }
            },
            error: function (result) {
                $('#altMsg').html('<h3>Email settings not saved</h3>');
                $('#altMsgPopup').modal('show');
                sessionTimeout(result);
            }
        });
    }

    function prepareJADaysSettings(data) {
        data = eval(data);
        $.each(data, function (index, value) {
            if (value.name == "jobsage") {
                var dataval = value.data;
                $("#jobsAge").val(dataval.days);
                return true;
            }
        });
        $.each(data, function (indexa, valuea) {
            if (valuea.name == "alertsage") {
                var dataval = valuea.data;
                $("#alertsAge").val(dataval.days);
                return true;
            }
        });
    }

    function prepareAgentMonitoringSettings(data) {
        data = eval(data);
        $.each(data, function (index, value) {
            if (value.name === 'agentmonitoring') {
                var dataval = value.data;
                if (dataval.server && dataval.workstation) {
                    $("#agent-monitoring").val('all');
                } else if (dataval.server) {
                    $("#agent-monitoring").val('servers');
                } else if (dataval.workstation) {
                    $("#agent-monitoring").val('workstations');
                } else {
                    $("#agent-monitoring").val('none');
                }
                return true;
            }
        });
    }

    function saveJobsAge() {
        var jobsData = {};
        jobsData.days = parseInt($('#jobsAge').val(), 10);
        if ($("#jobsAge").val() == "") {
            modalalert('showalerts', "Jobs age required");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        } else {
            if (!IsNumeric($("#jobsAge").val())) {
                modalalert('showalerts', "Please enter valid number");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                return false;
            }
        }
        $.ajax({
            type: "POST",
            url: "api/settings/jobsage/set_settings",
            data: JSON.stringify(jobsData),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                modalalert('showalerts', "Jobs age saved");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            },
            error: function (result) {
                modalalert('showalerts', "Error saving jobs age");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }

    function saveAlertsAge() {
        var alertsData = {};
        alertsData.days = parseInt($('#alertsAge').val(), 10);
        if ($("#alertsAge").val() == "") {
            modalalert('showalerts', "Alerts age required");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        } else {
            if (!IsNumeric($("#alertsAge").val())) {
                modalalert('showalerts', "Please enter valid number");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                return false;
            }
        }
        $.ajax({
            type: "POST",
            url: "api/settings/alertsage/set_settings",
            data: JSON.stringify(alertsData),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                modalalert('showalerts', "Alerts age saved");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            },
            error: function (result) {
                modalalert('showalerts', "Error saving alerts age");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }

    function getD2CEnabled() {
        if (isAppliance()) {
            return false;
        }
        $.jStorage.set(D2C_STATUS_PROP_NAME, false);
        var isD2CEnabled = false;
        $.ajax({
            type: "POST",
            url: "/api/settings/dummy/is_d2c_enabled",
            dataType: "json",
            async: false,
            success: function (rs) {
                var data = rs.result;
                $.jStorage.set(D2C_STATUS_PROP_NAME, data.isEnabled);
                isD2CEnabled = data.isEnabled;
                var showD2CSettings = data.isFeatureEnabled && !isInfinityCloudVault();
                $('#d2c_panel').toggle(showD2CSettings);
            },
            error: function (result) {
                sessionTimeout(result);
            }
        })
        return isD2CEnabled;
    }

    function showBackupOffsetIfEnabled() {
      var result = false;
      $.ajax({
        type: "POST",
        url: "/api/schedules/dummy/is_backup_offset_enabled",
        dataType: "json",
        async: false,
        success: function (rs) {
          if (rs.result) {
            $("#backup-offset-classic-section").show();
            $("#backup-offset-policy-section").show();
            $("#ebackup-offset-classic-section").show();
            $("#ebackup-offset-policy-section").show();
          } else {
            $("#backup-offset-classic-section").hide();
            $("#backup-offset-policy-section").hide();
            $("#ebackup-offset-classic-section").hide();
            $("#ebackup-offset-policy-section").hide();
          }
        },
        error: function (result) {
          sessionTimeout(result);
        }
      })
    }

    function saveAgentMonitoring() {
        var data;
        var selection = $("#agent-monitoring").val();
        if (selection === "all") {
            data = { server: true, workstation: true };
        } else if (selection === "servers") {
            data = { server: true, workstation: false };
        } else if (selection === "workstations") {
            data = { server: false, workstation: true };
        } else if (selection === "none") {
            data = { server: false, workstation: false };
        } else {
            modalalert("showalerts", "Please select a valid option");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }

        $.ajax({
            type: "POST",
            url: "api/settings/agentmonitoring/set_settings",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                modalalert('showalerts', "Agent Monitoring settings saved");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            },
            error: function (result) {
                modalalert('showalerts', "Error saving Agent Monitoring settings");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }

    function prepareArbiterNodeSettings(data) {
        data = eval(data);
        $.each(data, function (index, value) {
            if (value.name == "arbiter_node") {
                var dataval = value.data;
                $("#arbiternode").val(dataval.arbiterIp);
            }
        });
    }

    function setArbiterNode() {
        if ($('#arbiternode').val() != "") {
            if (verifyIP($('#arbiternode').val())) {
                var test = "";
            } else {
                modalalert('showalerts', "Please enter valid ip address");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                return false;
            }
        } else {
            modalalert('showalerts', "Required valid ip address");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            return false;
        }
        var arData = {};
        arData.arbiterIp = $("#arbiternode").val();
        $.ajax({
            type: "POST",
            url: "api/settings/arbiter_node/set_settings",
            data: JSON.stringify(arData),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.status == "ok") {
                    modalalert('showalerts', "Arbiter IP saved");
                    setTimeout("$('#showalerts').modal('hide');", 3000);

                } else {
                    modalalert('showalerts', data.msg);
                    setTimeout("$('#showalerts').modal('hide');", 3000);

                }
            },
            error: function (result) {
                modalalert('showalerts', 'Failed');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }

    function getFirewallStatus () {
        $.ajax({
            type: "POST",
            url: "/api/utilities/abc/getFirewallStatus",
            success: function (data) {
                var enabled = data.enabled;
                $("#enable-fw-check").prop("checked", enabled);
            },
            error: function (result) {
                modalalert("showalerts", 'Failed');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }

    function setFirewallStatus () {
        var status = $("#enable-fw-check").prop("checked");

        var data = {};
        data.status = status;
        $.ajax({
            type: "POST",
            url: "/api/utilities/abc/setFirewallStatus",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                modalalert("showalerts", data.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
            },
            error: function (result) {
                modalalert("showalerts", 'Failed');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }

    function getClusteringStatus () {
        $.ajax({
            type: "POST",
            url: "/api/utilities/abc/getClusteringStatus",
            success: function (data) {
                var enabled = data.enabled;
                $("#clustering").prop("checked", enabled);
                if (enabled) {
                    $("#cluster-table").show();
                } else {
                    $("#cluster-table").hide();
                }
            },
            error: function (result) {
                modalalert("showalerts", 'Failed');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }

    function setClusteringStatus () {
        var status = $("#clustering").prop("checked");
        if (status) {
            $("#cluster-table").show();
        } else {
            $("#cluster-table").hide();
        }

        data = {};
        data.status = status;
        $.ajax({
            type: "POST",
            url: "/api/utilities/abc/setClusteringStatus",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                modalalert("showalerts", data.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $.jStorage.set('isClustered', !!status);
                updateClusterControls();
            },
            error: function (result) {
                modalalert("showalerts", 'Failed');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }

    function prepareAutoUpdateSettings(data) {
        data = eval(data);
        $.each(data, function (index, value) {
            if (value.name == "auto_update") {
                var dataval = value.data;
                if (dataval.isEnabled) {
                    $('#aucheck').prop('checked', true);
                } else {
                    $('#aucheck').prop('checked', false);
                }
            }
        });
    }

function doPrepareAutoEnableRemoteAssistSettings(allSettings) {
  var settings = getSettingsDataByName(allSettings, 'auto_enable_remote_assist_on_upgrade');
  $('#auto-enable-remote-assist-flag').prop('checked', settings.enabled);
  $('.js-settings-auto-enable-ra').show();
}

function prepareAutoEnableRemoteAssistSettings(allSettings) {
  var callback = function () {
    doPrepareAutoEnableRemoteAssistSettings(allSettings)
  };
  executeIfRemoteAssistAllowed(callback);
}

function prepareUpdateManagerSection(allSettings) {
  prepareAutoUpdateSettings(allSettings);
  prepareAutoEnableRemoteAssistSettings(allSettings);
}

function setAutoUpdate() {
  var arData = {};
  arData.isEnabled = $('#aucheck').prop('checked');
  $.ajax({
    type: "POST",
    url: "api/settings/auto_update/set_settings",
    data: JSON.stringify(arData),
    contentType: "application/json; charset=utf-8",
    dataType: "json",
    success: function (data) {
      if (data.status == "ok") {
        if ($("#aucheck").is(':checked')) {
          modalalert('showalerts', "Auto update state saved");
          setTimeout("$('#showalerts').modal('hide');", 3000);
        } else {
          modalalert('showalerts', "Auto update state saved");
          setTimeout("$('#showalerts').modal('hide');", 3000);
        }
      } else {
        modalalert('showalerts', data.msg);
        setTimeout("$('#showalerts').modal('hide');", 3000);
      }
    },
    error: function (result) {
      modalalert('showalerts', 'Failed');
      setTimeout("$('#showalerts').modal('hide');", 3000);
      sessionTimeout(result);
    }
  });
}

function setAutoEnableRemoteAssist(enabled, successCallback, errorCallback) {
  $.ajax({
    type: "POST",
    url: "api/settings/auto_enable_remote_assist_on_upgrade/set_settings",
    data: JSON.stringify({enabled: enabled}),
    contentType: "application/json; charset=utf-8",
    dataType: "json",
    success: function (data) {
      if (successCallback) {
        successCallback(data);
      }
    },
    error: function (result) {
      if (errorCallback) {
        errorCallback(result);
      }
    }
  });
}

function clickOnAutoEnableRemoteAssistCheckbox() {
  var $checkbox = $('#auto-enable-remote-assist-flag');
  setAutoEnableRemoteAssist($checkbox.prop('checked'),
    function (data) {
      if (data.status === "ok") {
        if ($checkbox.is(':checked')) {
          showModalAlertWithTimeout("Auto-enable Remote Assist enabled");
        } else {
          showModalAlertWithTimeout("Auto-enable Remote Assist disabled");
        }
      } else {
        showModalAlertWithTimeout(data.msg);
      }
    },
    function (result) {
      showModalAlertWithTimeout('Failed');
    });
}

function getSettingsByName(settings, name) {
  var result = $.grep(settings, function (setting) {
    return setting.name === name
  });
  return result.length > 0 ? result[0] : undefined
}

function getSettingsDataByName(settings, name) {
  var result = getSettingsByName(settings, name);
  return result ? result.data : undefined;
}

function executeIfRemoteAssistAllowed(callback) {
  $.ajax({
    type: "POST",
    url: "/api/settings/dummy/is_remote_assist_enabled",
    dataType: "json",
    success: function (rs) {
      if (rs.result === true) {
        callback()
      }
    },
    error: function (result) {
      sessionTimeout(result);
    }
  });
}

function prepareRemoteAssistSettings(allSettings) {
  var callback = function () {
    doPrepareRemoteAssistSettings(allSettings)
  };
  executeIfRemoteAssistAllowed(callback);
}

function checkSMLicensingEnabled(allSettings) {
  settings = eval(allSettings);
  $.each(settings, function (i, setting) {
    if (setting.name === 'service_manager_licensing') {
      var visibility = !setting.enabled;
      if (window.glob === 'appliance') {
        $('#btnUpdateLicensePassword').toggle(visibility);
      } else if (window.glob === 'vault') {
        $('#btnSaveLicensePassword').toggle(visibility);
        $('#inputLicensePassword').toggle(visibility);
      }
      return;
    }
  })
}

function doPrepareRemoteAssistSettings(allSettings) {
  var DATE_FORMAT = "mm/dd/yy";

  var $container = $('#remote-assist'),
    $enabledSection = $container.find('.js-settings-ra-enabled'),
    $enabledCheckbox = $enabledSection.find('input'),
    $expirationSection = $container.find('.js-settings-ra-expiration'),
    $datepicker = $container.find('.js-settings-ra-expiration input'),
    $saveButton = $container.find('.js-settings-ra-save button');

  $container.parent().show();

  function getDefaultExpirationDate() {
    var date = daysFromNowDate(14);
    return new Date(date.setHours(0, 0, 0, 0));
  }

  function getExpirationDate(expirationDateString) {
    return expirationDateString ?
      $.datepicker.parseDate(DATE_FORMAT, expirationDateString) :
      getDefaultExpirationDate();
  }

  function getDefaultSettings() {
    return {enabled: false}
  }

  function fillSettingsSectionWithData(settings) {
    $enabledCheckbox.prop('checked', settings.enabled);

    var expiration = getExpirationDate(settings.expirationDate);
    $datepicker.datepicker("setDate", expiration);

    if (settings.enabled) {
      $expirationSection.show();
    } else {
      $expirationSection.hide();
    }
  }

  function initSettingsSection(settings) {
    $enabledCheckbox.on("change", function () {
      $expirationSection.toggle();
    });

    $datepicker.datepicker({
      dateFormat: DATE_FORMAT,
      minDate: 1,
      maxDate: 31,
      constrainInput: true
    }).on("change", function () {
      // to avoid manually typed wrong dates we need to pass any typed date to calendar using 'setDate'
      // please see discussion at https://stackoverflow.com/questions/11228689/manual-date-entry-validation-for-jquery-ui-datepicker-maxdate-option/21898124?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
      $(this).datepicker('setDate', $(this).datepicker('getDate'));
    });
    $datepicker.blur(function () {
      if (!$datepicker.val()) {
        var expiration = getDefaultExpirationDate();
        $datepicker.datepicker("setDate", expiration);
      }
    });

    $saveButton.on("click", function () {
      var enabled = $enabledCheckbox.prop('checked');
      var data = {enabled: enabled};

      if (enabled) {
        data.expirationDate = $datepicker.val();
      } else {
        var expiration = getDefaultExpirationDate();
        $datepicker.datepicker("setDate", expiration);
      }

      modalalert('showalerts', 'Updating remote assist settings...');
      $.ajax({
        type: "POST",
        url: "api/settings/remote_assist/set_settings",
        contentType: "application/json",
        dataType: "json",
        data: JSON.stringify(data),
        success: function (rs) {
            successResponceHandler(rs, 'Remote assist');
        },
        error: function (rs) {
          showModalAlertWithTimeout('Failed to update remote assist settings. Please try again.');
          sessionTimeout(rs);
        }
      });
    });

    fillSettingsSectionWithData(settings);
  }

  var settings = getSettingsDataByName(allSettings, 'remote_assist') || getDefaultSettings();
  initSettingsSection(settings);
}

    function reBoot() {
        modalalert('showalerts', "Rebooting your system");
        var mid = $("#rsserverid").val();
        $.ajax({
            type: "POST",
            url: "api/utilities/abc/reboot",
            data: JSON.stringify({}),
            contentType: "application/json; charset=utf-8",
            headers: {
                "Replibit-Server": mid
            },
            dataType: "json",
            success: function (data) {
                if (data.result == "ok") {
                    setTimeout("redirect('#settings')", 40000);
                } else {
                    modalalert('showalerts', data.msg);
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                    setTimeout("redirect('#settings');", 10000);
                }
            },
            error: function (errMsg) {
                modalalert('showalerts', errMsg.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        });
        $("#confirmReboot").modal('hide');
    }

    function getVSettings() {
        var urllink = '/api/settings';
        $.ajax({
            url: urllink,
            success: function (data) {
                if (window.glob == "appliance") {
                    $("#asVault").button('disable');
                    $("#esVault").button('disable');
                    $.each(data, function (index, value) {
                        if (value.name == "vault_settings") {
                            var item = value.data;
                            $("#vaultAddress").val(item.vaultIP);
                        } else if (value.name == "vault_schedule") {
                            var vstartTime = "";
                            var vendTime = "";
                            var vaultbackup = value.data;
                            vaultbackup = vaultbackup[vaultbackup.length - 1];
                            var startHr = vaultbackup.hidden_start_hour.replace(/\ /g, '');
                            var startMn = vaultbackup.hidden_start_minute.replace(/\ /g, '');
                            var endHr = vaultbackup.hour.replace(/\ /g, '');
                            var endMn = vaultbackup.minute.replace(/\ /g, '');
                            vstartTime = schedulerTime(startHr, startMn);
                            vendTime = schedulerTime(endHr, endMn);

                        }
                    });
                }
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
    }

    function checkTip(IPvalue) {
        if (IPvalue === '0.0.0.0' || IPvalue === '') {
            return true;
        }

        return verifyIP(IPvalue);
    }

    function verifyIP(IPvalue) {
        errorString = "";
        theName = "IPaddress";
        var ipPattern = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
        var ipArray = IPvalue.match(ipPattern);
        if (IPvalue == "0.0.0.0")
            errorString = errorString + theName + ': ' + IPvalue + ' is a special IP address and cannot be used here.';
        else if (IPvalue == "255.255.255.255")
            errorString = errorString + theName + ': ' + IPvalue + ' is a special IP address and cannot be used here.';
        if (ipArray == null)
            errorString = errorString + theName + ': ' + IPvalue + ' is not a valid IP address.';
        else {
            for (i = 1; i < ipArray.length; i++) {
                thisSegment = ipArray[i];
                if (thisSegment > 255) {
                    errorString = errorString + theName + ': ' + IPvalue + ' is not a valid IP address.';
                    break;
                }
                if ((i == 0) && (thisSegment > 255)) {
                    errorString = errorString + theName + ': ' + IPvalue + ' is a special IP address and cannot be used here.';
                    break;
                }
            }
        }
        extensionLength = 3;
        if (errorString == "")
            return true
        else
            return false
    }

    function changeHost() {
        var mid = $("#mnserverid").val();
        if ($('#hostname').val() != "") {
            var urllink = '/api/utilities/abc/setHostName';
            var hostData = {};
            hostData.hostname = $("#hostname").val();
            $.ajax({
                type: "POST",
                url: urllink,
                data: JSON.stringify(hostData),
                contentType: "application/json; charset=utf-8",
                headers: {
                    "Replibit-Server": mid
                },
                dataType: "json",
                success: function (data) {
                    modalalert('showalerts', data.status);
                    setTimeout("$('#showalerts').modal('hide');", 3000);
                    $('#hostnamelabel').html(hostData.hostname);
                },
                error: function (result) {
                    sessionTimeout(result);
                }
            });
        } else {
            modalalert('showalerts', "Hostname required");
            setTimeout("$('#showalerts').modal('hide');", 3000);
        }
    }
var NetInterface;


function getNetworkInterfaces(interface) {
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#ntserverid").val();
    var select = $('#ntserverid');
    select.empty();
    $.each(nodes, function (key, val) {
        var name = val.split('#');
        var urlip = "";
        if (name[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = name[0];
        }
        var id = (mid != "" || mid == $.jStorage.get("machineId")) ? mid : $.jStorage.get("machineId");
        var sel = (key == id) ? " selected " : "";
        $("#ntserverid").append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
    });
    mid = $("#ntserverid").val();
    var urllink = '/api/utilities/abc/getNetworkDetails';
    $.ajax({
        type: "POST",
        url: urllink,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (nwdata) {
            NetInterface = nwdata;
            nwInterfacesLoad();
            $('#nwInt').val(JSON.stringify(nwdata));
            if (interface) {
                $('#nwInterfaces').val(interface);
                setNwDetails();
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function cancelNw() {
    $('#nwConfig input[type="text"]').val('');
    $("#dhcp").hide();
    $("#nwConfig").hide();
    nwInterfacesLoad();
}
$("#showNetworkInterface  .collapsed").on("click", function () {
    $('#nwConfig input[type="text"]').val('');
    $("#dhcp").hide();
    $("#nwConfig").hide();
    nwInterfacesLoad();
});

function nwInterfacesLoad() {
    $('#nwInterfaces').empty();
    $('#nwInterfaces').append('<option value="">Select Interface</option>').trigger('create');
    $.each(NetInterface, function (ind, vla) {
        var show_value = vla.interface;
        if (! vla.enabled) {
            show_value += " (Disabled)";
        }
        $('#nwInterfaces').append('<option value="' + vla.interface + '">' + show_value + '</option>').trigger('create');
    });
}

function getHost() {
    var nodes = setNodes();
    if (nodes === false) {
        return false;
    }
    var mid = $("#mnserverid").val();
    var select = $('#mnserverid');
    select.empty();
    $.each(nodes, function (key, val) {
        var name = val.split('#');
        var urlip = "";
        if (name[0] == '127.0.0.1') {
            urlip = location.host;
        } else {
            urlip = name[0];
        }
        var id = (mid != "" || mid == $.jStorage.get("machineId")) ? mid : $.jStorage.get("machineId");
        var sel = (key == id) ? " selected " : "";
        $("#mnserverid").append('<option value="' + key + '"' + sel + '>' + name[1] + ' (' + urlip + ')</option>');
    });
    mid = $("#mnserverid").val();
    var urllink = '/api/utilities/abc/getHostName';
    $.ajax({
        type: "POST",
        url: urllink,
        contentType: "application/json; charset=utf-8",
        headers: {
            "Replibit-Server": mid
        },
        dataType: "json",
        success: function (data) {
            data = eval(data);
            $('#hostname').val(data.status);
            $('#hostnamelabel').html(data.status);
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function getTimezones() {
    $('#tmz').html("");
    var currentTmz = "";
    var sel = "";
    var options = "";
    currentTmz = $.ajax({
        type: "POST",
        url: "/api/utilities/abc/getTimeZone",
        async: false
    }).responseText;
    currentTmz = currentTmz.replace(/\"/g, '');
    if (tZones != "") {
        var data = eval(tZones);
        data = eval(data.timezones);
        $.each(data, function (s, tm) {
            sel = (tm == currentTmz) ? "selected " : "";
            options = options + '<option value="' + tm + '" ' + sel + '>' + tm + '</option>'
        });
        $('#tmz').append(options).trigger("create");
    } else {
        $.ajax({
            type: "POST",
            url: "/api/utilities/abc/timezones",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                tZones = data;
                data = eval(data);
                data = eval(data.timezones);
                $.each(data, function (s, tm) {
                    sel = (tm == currentTmz) ? "selected " : "";
                    options = options + '<option value="' + tm + '" ' + sel + '>' + tm + '</option>'
                });
                $('#tmz').append(options).trigger("create");
            },
            error: function (result) {
                sessionTimeout(result);
            }
        });
    }
}

function hourMinute(str) {
    var time = "";
    var hms = str.split(" ");
    var hm = hms[0].split(":");
    var h = hm[0];
    var m = hm[1];
    var ampm = hms[1];
    if (h == 12 && ampm == "AM") {
        time = "00" + m;
    } else if (h == 12 && ampm == "PM") {
        time = "23" + m;
    } else {
        time = (ampm == "PM") ? (parseInt(h) + 12) + "" + m : h + "" + m
    }
    return time;
}

function saveTimeDetails() {
    var tzData = {};
    tzData.timezone = $('#tmz').val();
    modalalert('showalerts', "Timezone update");
    $.ajax({
        url: '/api/utilities/abc/setTimeZone',
        data: JSON.stringify(tzData),
        contentType: "application/json; charset=utf-8",
        type: "POST",
        success: function (result) {
            if (!result.status) {
                modalalert('showalerts', result.msg);
                setTimeout("$('#showalerts').modal('hide');", 6000);
            } else {
                modalalert('showalerts', "Timezone saved");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                printTimeDate(result.data);
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function syncNTP() {
    modalalert('showalerts', "Syncs system time via NTP");
    $.ajax({
        url: '/api/utilities/abc/syncNTP',
        type: "POST",
        success: function (result) {
            if (!result.status) {
                modalalert('showalerts', result.msg);
                setTimeout("$('#showalerts').modal('hide');", 6000);
            } else {
                $('#showalerts').modal('hide');
                printTimeDate(result.data);
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function getPkgList() {
    var urllink = 'api/updates/abc/packageVersion';
    $.ajax({
        url: urllink,
        type: "POST",
        success: function (data) {
            $('#pkglist').html(
                Object.entries(data)
                    .map(([index, value]) => `${index} ${value}`)
                    .join('<br />')
            );
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function confirmNow() {
    $("#confirmUpdate").modal("show");
}

function updateNow() {
    modalalert('showalerts', "Loading...");
    var urllink = '/api/updates/abc/installUpdates';
    $.ajax({
        url: urllink,
        type: "POST",
        success: function (data) {
            if (data !== null && "needsReboot" in data && !data["needsReboot"]) {
                modalalert('showalerts', "Updates were installed successfully. A reboot is not required.");
                // this will force the updater state to be refreshed
                setTimeout("$('#showalerts').modal('hide');window.location.href = '';", 5000);
            } else {
                modalalert('showalerts', "Update in progress. Machine will be rebooted, please wait.");
                // this force refresh should cause it to show the updater GUI after 30 seconds
                setTimeout("$('#showalerts').modal('hide');window.location.href = '';", 30000);
                setTimeout("window.location.reload(true);", 31000);
                setTimeout("window.location.href = '';", 32000);
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
    $("#confirmUpdate").modal('hide');
}

function checkNewUpdate() {
    modalalert('showalerts', "Checking updates...");
    var urllink = 'api/updates/abc/checkUpdates';
    $.ajax({
        url: urllink,
        type: "POST",
        success: function (data) {
            if (data.msg) {
                modalalert('showalerts', "Updates available");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $.jStorage.set("update", true);
                $('#checkUpdate').attr("onclick", "confirmNow()");
                $("#checkUpdate").html('<div class="button-content"><span class="icon-checkmark button-icon"></span><span class="button-text">Update now</span></div>');
            } else {
                $.jStorage.set("update", false);
                modalalert('showalerts', "No updates available");
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        },
        error: function (result) {
            modalalert('showalerts', "Error checking updates.");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function getPkgVersion() {
    var urllink = 'api/updates/abc/packageVersion';
    $.ajax({
        url: urllink,
        type: "POST",
        data: JSON.stringify({"package": "ReplibitCore"}),
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            $('#pkgversion').html("v" + data["ReplibitCore"].replace(/\./gi, "."));
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function getSysID() {
    var urllink = 'api/utilities/abc/sysID';
    $.ajax({
        url: urllink,
        type: "POST",
        success: function (data) {
            $('#friendlysysID').html(data);
            $('#settingsfriendlysysID').html(data);
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function getRMCServiceID() {
    $.ajax({
        url: 'api/utilities/abc/rmcServiceID',
        type: 'POST',
        success: function (data) {
            $('#rmcServiceID').html(data);
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function getTimeDate() {
    var urllink = '/api/utilities/abc/getDate';
    $.ajax({
        url: urllink,
        type: "POST",
        success: function (data) {
            printTimeDate(data);
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function printTimeDate(t) {
    var hr = t.hour > 9 ? "" + t.hour : "0" + t.hour;
    var mins = t.min > 9 ? "" + t.min : "0" + t.min;
    $('#time1').text(hr + ':' + mins);
    $('#date1').text(t.month + "/" + t.day + "/" + t.year);
}

function updateSessionData(pts) {
  try {
    $.jStorage.set('isInfinityCloudVault', pts.isInfinityCloudVault);
    $.jStorage.set('isClustered', pts.isClustered);
    updateClusterControls()
    updateInfinityCloudControls()
  } catch (e) {}
}

function gethostname() {
    var urllink = 'api/utilities/abc/system_info';
    $.ajax({
        url: urllink,
        type: "POST",
        success: function (pts) {
            updateSessionData(pts)
            var hostid = "";
            if (pts.systemName.length > 25) {
                hostid = pts.systemName.substring(0, 20) + '...'
            } else {
                hostid = pts.systemName;
            }
            $('.hostId').empty();
            $('.hostId').append('<a title = \"' + pts.systemName + '\" >' + hostid + '</a>');
            setTimeout("gethostname();", 60000);
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

var configflag = false;

function mgmtconnect() {
    var vaultData = {};
    vaultData.ip = $("#manageip").val();
    vaultData.userName = $("#manageuser").val();
    vaultData.apiKey = $("#manageapi").val();
    modalalert('showalerts', "Saving management settings...");
    $.ajax({
        type: "POST",
        url: "api/settings/management_server/set_settings",
        data: JSON.stringify(vaultData),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.status == "ok") {
                modalalert('showalerts', "Successfully saved");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('#savemanage').attr("disabled", "disabled");
            } else {
                modalalert('showalerts', data.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        },
        error: function (result) {
            sessionTimeout(result);
        }
    });
}

function testConnect() {
    var wiseData = {};
    wiseData.mgmtServerIp = $("#manageip").val();
    wiseData.mgmtServerUserName = $("#manageuser").val();
    wiseData.mgmtServerApiKey = $("#manageapi").val();
    if ($("#manageip").val() == "" || $("#manageuser").val() == "" || $("#manageapi").val() == "") {
        modalalert('showalerts', "All the fields are required.");
        setTimeout("$('#showalerts').modal('hide');", 3000);
        return false;
    }
    modalalert('showalerts', "Please wait while we verify management portal.");
    $.ajax({
        type: "POST",
        url: "api/utilities/dummy/testManagementPortal",
        data: JSON.stringify(wiseData),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.status == "ok") {
                modalalert('showalerts', "Test Connection Successful");
                setTimeout("$('#showalerts').modal('hide');", 3000);
                $('#savemanage').removeAttr("disabled", "disabled");
                $('#savemanage').attr("onclick", "mgmtconnect()");
            } else {
                $('#savemanage').attr("disabled", "disabled");
                $('#savemanage').attr("onclick", "");
                modalalert('showalerts', data.msg);
                setTimeout("$('#showalerts').modal('hide');", 3000);
            }
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });

}

function prepareManageStoreSettings(data) {
    data = eval(data);
    $.each(data, function (index, value) {
        if (value.name == "management_server") {
            var s = value.data;
            var x = JSON.stringify(s);
            var y = JSON.parse(x);
            $('#manageip').val(y.ip);
            $('#manageuser').val(y.userName);
            $('#manageapi').val(y.apiKey);
        }
    });
}

var reloadVal = 0;
function getReloadAllConfiguration(){
   // modalalert('showalerts', "Loading...");
   // alert(reloadVal)
    if(reloadVal == 0 || reloadVal == 1){
      //  testConnectWise();
    }
    else if(reloadVal == 2){
         getCompanyNames($("#ServiceTicketCompany option:selected").val());
         getAgreementType($("#AgrType option:selected").val());
         getProdcts($("#product option:selected").val());


    }
    else if(reloadVal == 3){
      //  cwValidation();
        getServiceBoard(settingsdata,null);

    }

    //setTimeout("$('#showalerts').modal('hide');", 6000);


}
function getAgreementType(attrtype) {
    var cwData = '{"domain":"https://' + $("#DomainName").val() + '","companyName":"' + $("#CompanyName").val() + '","userName":"' + $("#UserName").val() + '","password":"' + $("#Password").val() + '"}';
    $.ajax({
        type: "POST",
        url: "api/utilities/dummy/getArgtype",
        data: cwData,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#agreementErrorMsg").html("");
            $("#AgrType").html("");
            $("#AgrType").append('<option value="">---Select Agreement type---</option>');
            $("#AgrType").removeAttr("disabled");
            if (data.msg.status == 1) {
                $.each(data.msg.message, function (key, val) {
                    $("#AgrType").append('<option value=' + val.AGR_Type_RecID + '>' + val.AGR_Type_Desc + '</option>');
                });
                if (attrtype != "") {
                    $("#AgrType").val(attrtype);
                } else {
                    $("#AgrType").val(agrtype);
                }
            } else if (data.msg.status == -1){
                $("#AgrType").html(" ");
                $("#AgrType").attr("disabled","disabled");
                $("#agreementErrorMsg").html(data.msg.message);
                $("#testConfiguration").attr("disabled","disabled");
            }
            checkLoginStatus(data);
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function getProdcts(proid) {
    var cwData = '{"domain":"https://' + $("#DomainName").val() + '","companyName":"' + $("#CompanyName").val() + '","userName":"' + $("#UserName").val() + '","password":"' + $("#Password").val() + '"}';
    $.ajax({
        type: "POST",
        url: "api/utilities/dummy/getProducts",
        data: cwData,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            $("#product").html("");
            $("#productErrorMsg").html("");
            $("#product").append('<option value="">---Select Product Name---</option>');
            $("#product").removeAttr("disabled");
            if (data.msg.status == 1) {

                $.each(data.msg.message, function (key, val) {
                    $("#product").append('<option value=' + val.Id + '>' + val.ItemId + '</option>');
                });
                if (proid != "") {
                    $("#product").val(proid);
                } else {
                    $("#product").val('');
                }
            } else if (data.msg.status == -1){
                    $("#product").html(" ");
                    $("#product").attr("disabled","disabled");
                    $("#productErrorMsg").html(data.msg.message);
                    $("#testConfiguration").attr("disabled","disabled");

            }
            checkLoginStatus(data);
        },
        error: function (result) {
            modalalert('showalerts', 'Failed');
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

$("#refreshcomp").on("click", function () {
    $("#loadcompmsg").html("Please  wait  while  reloading service  ticket company  names.");
    $(".showloading").show();
    $("#loadcompmsg").css("color", "#F75827");
    $("#refreshcomp").attr("disabled", "disabled");

})

function onConfigChange() {
    $("#confignote").show();
    $(".checkmark").prop("checked", false);
    $(".checklabel").css("background-color", "#d6d6d6");
    $(".lblrule").html("");
}

function checkLoginStatus(data) {
    if (data.msg.status == -2) {
        modalalert('showalerts', data.msg.message);
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
    if (data.msg.message == "Invalid Login Details") {
        modalalert('showalerts', data.msg.message);
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
    if (data.msg.message == "Invalid Company Name") {
        modalalert('showalerts', data.msg.message);
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
    if (data.msg.message == "Report API not enabled.") {
        modalalert('showalerts', data.msg.message);
        setTimeout("$('#showalerts').modal('hide');", 6000);
    }
    if (data.msg.message == "Problem  occurred while processing request.") {
        modalalert('showalerts', data.msg.message);
        setTimeout("$('#showalerts').modal('hide');", 3000);
    }
}

var proval, agrtype;
var settingsdata;

function syncLicense(callback) {
    modalalert('showalerts', "Syncing with License Server...");
    $.ajax({
        type: "POST",
        url: "/api/utilities/abc/loadLicenses",
        success: function (data) {
            if (data.status == "ok") {
                if (callback) {
                    $('#showalerts').modal('hide');
                    callback()
                } else {
                    modalalert('showalerts', "Syncing with License Server...");
                    setTimeout("$('#showalerts').modal('hide');getSettings();", 3000);
                    setTimeout("availableLicense();", 15000);
                }
                $(".license-static-error p").text("");
            } else {
                $(".license-static-error p").text(data.msg);
                modalalert('showalerts', data.msg);
                setTimeout("$('#showalerts').modal('hide');getSettings();", 3000);
            }
        },
        error: function (result) {
            modalalert('showalerts', "Failed to update license from the license server");
            setTimeout("$('#showalerts').modal('hide');", 3000);
            sessionTimeout(result);
        }
    });
}

function downloadClient(type) {
    modalalert('showalerts', "Getting latest version");

    $.ajax({
        type: "GET",
        url: "api/getRecoveryInstaller/" + type,
        dataType: "json",
        async: false,
        success: function (response) {
            if (response.status == "Success") {
                $("#showalerts").modal("hide");
                $("#" + type + "download").attr("href", response.data);
                document.getElementById(type + "download").click();
            } else {
                showModalAlertWithTimeout(response.msg);
            }
        },
        error: function () {
            showModalAlertWithTimeout("Unable to obtain download link");
        }
    });
}

function logout() {
    $.ajax({
        type: "POST",
        url: 'api/logout',
        success: function (data) {
            modalalert('showalerts', "Logout");
            setTimeout("$('#showalerts').modal('hide');", 3000);
        },
        error: function (result) {
            modalalert('showalerts', "Logging out");
            setTimeout("$('#showalerts').modal('hide');", 3000);

            sessionTimeout(result);
        }
    });
}

function availableLicense() {
    if (window.glob === 'appliance') {
        $.ajax({
            type: 'POST',
            url: '/api/utilities/abc/getFreeLicenses',
            success: function (data) {
                if (data.storage) {
                    $('#free-storage').html(data.storage + ' TB');
                } else {
                    $('#free-licenses-workstation').html(data.workstations);
                    $('#free-licenses-server').html(data.servers);
                }
            },
            error: function (result) {
                modalalert('showalerts', 'Error getting available licenses');
                setTimeout("$('#showalerts').modal('hide');", 3000);
                sessionTimeout(result);
            }
        });
    }
}

function getRndInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function generateBackupOffset(min, max) {
  return isAppliance() ? 0 : getRndInteger(min, max);
}

function getCreateRetention() {
    initRetentionView();
}

function getCreateSchedule() {
    $('input[name=scheduletype][value="classic"]').click();
    cleanSchedulerData(false);
    $("#allowthrottling").prop("checked", false).trigger("change");
    $("#scName").val("");
    $('#addInc').val("0");
    showSch('addInc');
    $('#mSch').val("");

    setupSelector('#scInterval', 1, 24, 1, 0);
    $('#min23 option[value=hrs]').attr('selected', 'selected');

    let endBackupOffsetRange = 59;
    let offset = generateBackupOffset(0, endBackupOffsetRange);
    setupSelector('#OffsetBackupClassic', 0, endBackupOffsetRange, 1, offset);
    setupSelector('#OffsetBackupPolicy', 0, endBackupOffsetRange, 1, offset);
}

$(document).ready(function () {
    $.ajaxSetup({
        cache: false
    });
    $(document).on('dblclick', 'pre.codebox', function() {
        if (this.select) { this.select(); }
        else if (document.selection) {
            var r = document.body.createTextRange();
            r.moveToElementText(this);
            r.select();
        } else if (window.getSelection) {
            var r = document.createRange();
            r.selectNode(this);
            var s = window.getSelection();
            s.removeAllRanges();
            s.addRange(r);
        }
    });
});
$(function () {
    showlicense();

    function showTab(hash) {
        $("div.tab-pane").hide();
        $(hash).show();
    }

    function alltabs() {
        var hash = window.location.hash;
        if (hash == '#editScheduler') {
            document.title = "Edit Scheduler";
            $("#titlename").text("Edit Schedule");
            document.title = "Edit Schedule";
            window.location.hash = "#scheduler";
            showTab("#scheduler");
            getScheduler();
        } else if (hash == '#createScheduler') {
            document.title = "Create Scheduler";
            $("#titlename").text("Create Schedule");
            window.location.hash = "#scheduler";
            showTab("#scheduler");
            getScheduler();
        } else if (hash == '#addVaultsettings') {
            document.title = "Add Vault Configuration";
            $("#titlename").text("Add Vault Configuration");
            window.location.hash = "#Vaultsettings";
            showTab("#Vaultsettings");
            getVaultSettings();
        } else if (hash == '#editVaultsettings') {
            document.title = "Edit Vault Configuration";
            $("#titlename").text("Edit Vault Configuration");
            window.location.hash = "#Vaultsettings";
            showTab("#Vaultsettings");
            getVaultSettings();
        } else if (hash == '#editRetention') {
            // redirect to index page in we reload while edit/create new policy
            location.replace("/");
        } else {

            return false;
        }

    }

    function display() {
        checkSession();
        $("body").removeClass('displayblock');
        $(".modal-backdrop").hide();
        var hash = window.location.hash;
        $(' a[href="' + hash + '"]').tab('show');

        if (!isInfinityCloudVault()) {
          var resultPoolExtendedStatus = $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            url: "/api/storage/abc/pool_extended_status",
            async: false
          }).responseText;

          if (showTLSSessionExpiredMsgIfError(resultPoolExtendedStatus)) {
            return false;
          }

          resultPoolExtendedStatus = JSON.parse(resultPoolExtendedStatus);
        }

        if (!isInfinityCloudVault() && !resultPoolExtendedStatus.is_zpool_online && hash != "#addStorage" ) {
            $(".mainView").removeClass('mainView');
            window.location.replace("index.html#addStorage");
        } else if (hash == '#scheduler') {
            $("#titlename").text("Policies");
            document.title = "Policies";
            getRetention();
            if (isAppliance() || $.jStorage.get(D2C_STATUS_PROP_NAME)) {
                showBackupOffsetIfEnabled();
                getScheduler();
            } else {
                retentionsTable();
            }
            showTab(hash);
        } else if (hash == '#jobs') {
            document.title = "Jobs";
            $("#titlename").text("Jobs");
            initUserFilter("#jobs_user_select");
            showTab(hash);
            if ($("#backupbtn").length) {
                btable();
            } else {
                vtable();
            }
        } else if (hash == '#alerts') {
            document.title = "Alerts";
            $("#titlename").text("Alerts");
            showTab(hash);
            getAlerts();
        } else if (hash == '#fileBrowser') {
            document.title = "File Browser";
            $("#titlename").text("File Browser");
            showTab(hash);
            getMountedVolumes();
            getFileBrowser();
        } else if (hash == '#networkSharing') {
            document.title = "Network Sharing";
            $("#titlename").text("Network Sharing");
            if (isVault() && !isInfinityCloudVault() && isAdmin()) {
                initUserFilter("#nfs_user_select", false);
            }
            showTab(hash);
            getNfs();
            getFtp();
        } else if (hash == '#iscsi') {
            document.title = "iSCSI";
            $("#titlename").text("iSCSI");
            showTab(hash);
            getIscsi();
        } else if (hash == '#addStorage') {
            if (isInfinityCloudVault()) {
              window.location.replace("index.html");
            } else {
              document.title = "Manage Storage";
              $("#titlename").text("Manage Storage");
              showTab(hash);
              getAddStorage();
              storageInitialized();
              connectedIqn();
            }
        } else if (hash == '#setting') {
            document.title = "System Settings";
            $("#titlename").text("System Settings");
            $(".license-static-error p").text("");
            showTab(hash);
            getSettings();
            var usrsTable = $('#usersTable').dataTable($.extend({}, defaultDataTablesOptions, {
                "bDestroy": true,
                "bStateSave": false,
                "bProcessing": true,
                "bServerSide": true,
                "bAutoWidth": false,
                "aaSorting": [],
                "sDom": '<"clear"><"top"lp>rt<"clear">rtip',
                "sAjaxSource": "api/users",
                "aoColumns": [
                    {
                        "mDataProp": "userName",
                        "sWidth": "auto"
                    },
                    {
                        "mDataProp": "created",
                        "sWidth": "auto"
                    },
                    {
                        "mDataProp": "updated",
                        "sWidth": "auto"
                    },
                    {
                        "mDataProp": "userName",
                        "sWidth": "10%"
                    }
                ],
                "aoColumnDefs": [
                    {
                        "bSortable": false,
                        "aTargets": [3]
                    },
                    {
                        "sClass": "wrap-anywhere",
                        "aTargets": [0]
                    },
                    {
                        "aTargets": [3],
                        "sClass": "dtNoWrap"
                    }
                ],
                "fnRowCallback": function (nRow, aData, iDisplayIndex) {
                    var createTime = formatDate(aData.created)
                    $('td:eq(1)', nRow).html(createTime);
                    aData.created = createTime;

                    var updateTime = formatDate(aData.updated)
                    $('td:eq(2)', nRow).html(updateTime);
                    aData.updated = updateTime;

                    var resetPasswordImgLink = "";
                    var delImgLink = "";
                    if (aData.userName != $.jStorage.get("username") && $.jStorage.get("username") === $.jStorage.get("ownerUsername")) {
                        resetPasswordImgLink = '<a class="btn btn-default" onclick="resetPasswordAppliance(\'' + aData._id + '\')" data-toggle="modal" href="#resetPasswordModal" title="Reset password"><div class="button-content"><span class="button-text">Edit</span></div></a>';
                        delImgLink = '<a onclick="deleteUserAppliance(\'' + aData._id + '\')" data-toggle="modal" href="#delUser"><span class="icon-delete table-icon active" title="Delete"></span></a>';
                    }

                    var actions = resetPasswordImgLink + ' &nbsp; ' + delImgLink;
                    $('td:eq(3)', nRow).html(actions);
                    return nRow;
                }
            }));
        } else if (hash == '#connectwisesettings') {
            document.title = "ConnectWise Settings";
            $("#titlename").text("ConnectWise Settings");
            showTab(hash);
            ConnectWiseSettings.display(true);
        } else if (hash == '#Vaultsettings') {
            document.title = "Vault Configuration";
            $("#titlename").text("Vault Configuration");
            showTab(hash);
            getVaultSettings();
        } else if (hash == '#sysInfo') {
            document.title = "System Information";
            $("#titlename").text("System Information");
            showTab(hash);
            getSystemInfo();
        } else if (hash == '#downloadAgent') {
            document.title = "Downloads";
            $("#titlename").text("Downloads");
            showTab(hash);
            displayLinuxAndMacOSAgentDownloadButtons();
        } else if (hash == '#users') {
            document.title = "Clients";
            $("#titlename").text("Clients");
            showTab(hash);
            getUsers();
        } else if (hash == '#clusterMgmt') {
            document.title = "Cluster Management";
            $("#titlename").text("Cluster Management");
            showTab(hash);
            getSettings();
            getClusterMgmt();
            getClusteringStatus();
        } else if (hash == '#createScheduler') {
            document.title = "Create Schedule";
            $("#titlename").text("Create Schedule");
            showTab(hash);
            getScheduler();
        } else if (hash == '#editScheduler') {
            document.title = "Edit Scheduler";
            $("#titlename").text("Edit Schedule");
            showTab(hash);
        } else if (hash == '#editRetention') {
            document.title = "Retention";
            $("#titlename").text("Retention");
            showTab(hash);
        } else if (hash == '#addVaultsettings') {
            document.title = "Add Vault Configuration";
            $("#titlename").text("Add Vault Configuration");
            showTab(hash);
            jAddid();
        } else if (hash == '#editVaultsettings') {
            document.title = "Edit Vault Configuration";
            $("#titlename").text("Edit Vault Configuration");
            showTab(hash);

        } else if (hash == '#protectedSystemDetails') {
            document.title = "Protected System Details";
            $("#titlename").text("Protected System Details");
            $('#protect').addClass('active');
            showTab(hash);
            var psid = $.jStorage.get("psystemid");
            viewDetails(psid);
        } else if (hash == "" && !isInfinityCloudVault() && resultPoolExtendedStatus.zpool_state !== 'Available') {
            $(".mainView").removeClass('mainView');
            // If the zpool is degraded, make sure on login it's brought to their attention.
            window.location.replace("index.html#addStorage");
        } else if (hash == '#protectedSystem' || window.location.pathname == "/index.html") {
            document.title = "Backup  Manager";
            $("#titlename").text("Protected Systems");
            initUserFilter("#protectedSystem_user_select");
            $('.nav li').removeClass('active');
            $('#protect').addClass('active');
            if ($("#protectedSystem").css("display", "none")) {
                $("div.tab-pane").hide();
                $("#protectedSystem").css("display", "block");
            }
            getProtectedSystems();
        } else if (hash == "") {
            $(".mainView").removeClass('mainView');
            window.location.replace("index.html");
        } else {
            return false;
        }
    }

    $('.nav-pills a').on("click", function (e) {
        $(this).tab('show');
        var scrollmem = $('body').scrollTop();
        window.location.hash = this.hash;
        $('html,body').scrollTop(scrollmem);
        var hash = this.getAttribute("href");
        if (hash.substring(0, 1) === "#") {
            hash = hash.substring(1);
        }
        return false;
    });

    display();
    alltabs();
    getProtectedSystems();
    storeRetentionLimits();

    window.onhashchange = function () {
        display();
    };

    $("#style-1 a").on("click", function () {
        window.location.href = this.href;
    });
    $("#createsch a").on("click", function () {
        window.location.href = this.href;
        setTimeout('$("#scName").trigger("focus")', 10);
        $("#titlename").text("Create Schedule");
        $("#createdefault").prop("checked", false);
    });

    $('.login').html(getLogin());

    availableLicense();
    getPkgVersion();
    getHost()
    getSysID();
    getRMCServiceID();

    $(".configclose").on("click", function () {
        $(".configerrorAlert").hide();
    })

    $('#hostname').on("keydown", function (e) {
        if (e.which == 32) {
            e.preventDefault();
        }
    });
    $('#recVIP').on("keyup", function () {
        $('.recoveryip').hide();
        if (verifyIP($('#recVIP').val())) {
            $('#recStatus').html("");
        } else {
            $('.recoveryip').hide();
            $('.recoveryip-base-sel').hide();
            $('#recStatus').html("Please enter valid ip");
        }
    });
    $('#ifaceip').on("keyup", function () {
        if (verifyIP($('#ifaceip').val())) {
            getclsnodes("outsidenet");
            $('#mStatus').html("");
        } else {
            $('#migratewclstr').attr("disabled", "disabled");
            $('#mStatus').html("Please enter valid ip");
        }
    });
    $("#usbCheck").bind({
        change: function (event, ui) {
            if ($('#usbCheck').prop('checked')) {
                checkUsb("export");
            } else {
                $('#usbSettings').toggle(false);
            }
        }
    });
    $("#iagreerecover").bind({
        change: function (event, ui) {
            if ($("#iagreerecover").prop("checked")) {
                $('#vrecoverlink').removeAttr("disabled", "disabled");
            } else {
                $('#vrecoverlink').attr("disabled", "disabled");
            }
        }
    });
    $("#iagreemigrate").bind({
        change: function (event, ui) {
            if ($("#iagreemigrate").prop("checked")) {
                $('#migrateoclstr').removeAttr("disabled", "disabled");
            } else {
                $('#migrateoclstr').attr("disabled", "disabled");
            }
        }
    });
    $("#iagreeseed").bind({
        change: function (event, ui) {
            if ($("#iagreeseed").prop("checked")) {
                $('#seedlink').removeAttr("disabled", "disabled");
            } else {
                $('#seedlink').attr("disabled", "disabled");
            }
        }
    });
    $("#iagreeexport").bind({
        change: function (event, ui) {
            if ($("#iagreeexport").prop("checked")) {
                $('#startExport').removeAttr("disabled", "disabled");
            } else {
                $('#startExport').attr("disabled", "disabled");
            }
        }
    });
    $("#SRExportCheck").bind({
        change: function (event, ui) {
            let SRExport = $('#SRExportCheck').prop('checked');
            $("#ps-export-sr").toggle(SRExport);
            $("#ps-export").toggle(!SRExport);
        }
    });
    $('#snpnotes').on("keyup", function () {
        var text = $(this).val();
        var chars = text.length;
        var nlbreaks = (text.match(/\n/g) || []).length;
        chars = chars + nlbreaks;
        $('#snpnotesCount').html(chars + "/300");
    });
    $("#integrator").on("click", function () {
        reloadVal = 1;
        $('#configuration').collapse({
            toggle: false
        })
        $('#serviceboard').collapse({
            toggle: false
        })
        $("#configuration").collapse("hide");
        $("#serviceboard").collapse("hide");
    });
    $("#config").on("click", function () {
        reloadVal = 2;
        $('#integratorlogin').collapse({
            toggle: false
        })
        $('#serviceboard').collapse({
            toggle: false
        })
        if ($("#DomainName").val() == "" || $("#CompanyName").val() == "" || $("#UserName").val() == "" || $("#Password").val() == "") {
            $("#config").removeAttr("href", "#configuration");
            $("#serboards").removeAttr("href", "#serviceboard");
            $("#config").removeAttr("data-toggle", "collapsed");
            $("#serboards").removeAttr("data-toggle", "collapsed");
            return;
        }
        if ($("#cwnote").text().length > 0) {
            reloadVal = 1;
            $("#integratorlogin").collapse("show");
        } else {
            $("#integratorlogin").collapse("hide");
            $("#serviceboard").collapse("hide");
            $('#integratorlogin').collapse({
                toggle: true
            })
            $('#serviceboard').collapse({
                toggle: true
            })
        }
    });
    $("#serboards").on("click", function () {
        reloadVal = 3;
        $('#integratorlogin').collapse({
            toggle: false
        })
        $('#configuration').collapse({
            toggle: false
        });
        if ($("#DomainName").val() == "" || $("#CompanyName").val() == "" || $("#UserName").val() == "" || $("#Password").val() == "") {
            $("#config").removeAttr("href", "#configuration");
            $("#serboards").removeAttr("href", "#serviceboard");
            $("#config").removeAttr("data-toggle", "collapsed");
            $("#serboards").removeAttr("data-toggle", "collapsed");
            return;
        } else if ($("#cwnote").text().length > 0) {
            $("#integratorlogin").collapse("show");
            reloadVal = 1;
            return;
        } else if ($("#confignote").text().length > 0) {
            reloadVal = 2;
            if ($("#confignote").html() == "Please ensure all the fields in Configuration Details are selected and  Management Solution Name' also filled for  saving Configuration and  Credentials.") {
                $("#integratorlogin").collapse("hide");
                $("#configuration").collapse("hide");
                $('#integratorlogin').collapse({
                    toggle: true
                })
                $('#configuration').collapse({
                    toggle: true
                })
            } else {
                $("#serboards").removeAttr("href", "#serviceboard");
                $("#serboards").removeAttr("data-toggle", "collapsed");
            }
            return;
        } else {
            $("#integratorlogin").collapse("hide");
            $("#configuration").collapse("hide");
            $('#integratorlogin').collapse({
                toggle: true
            })
            $('#configuration').collapse({
                toggle: true
            })
        }
    });
    $("#bootvmcheck").on("change", function () {
        if ($("#bootvmcheck").is(':checked')) {
            $('#bootvmid').css("background-color", "#4596ce");
            $("#vmBoards").removeAttr("disabled")
            $("#vpStatus").removeAttr("disabled")
            $("#vrStatus").removeAttr("disabled")
            $("#vmlabel").html("");
        } else {
            $('#bootvmid').css("background-color", "#d6d6d6");
            $("#vmBoards").attr("disabled", "disabled")
            $("#vpStatus").attr("disabled", "disabled");
            $("#vrStatus").attr("disabled", "disabled");
            $("#vmBoards").val("");
            $("#vpStatus").val("");
            $("#vrStatus").val("");
            $("#vmlabel").html("Enable Creation of Ticket for Boot VM Check.")
        }
    });

    $("#sucesscheck").on("change", function () {

        if ($("#sucesscheck").is(':checked')) {

            $('#sucessid').css("background-color", "#4596ce");
            $("#sucessBoards").removeAttr("disabled")
            $("#spStatus").removeAttr("disabled")
            $("#successlabel").html("")
        } else {

            $('#sucessid').css("background-color", "#d6d6d6");
            $("#sucessBoards").attr("disabled", "disabled")
            $("#spStatus").attr("disabled", "disabled");
            $("#sucessBoards").val("");
            $("#spStatus").val("");
            $("#successlabel").html("Enable Creation of Ticket for Successful Backup.")
        }
    });
    $("#failurecheck").on("change", function () {
        if ($("#failurecheck").is(':checked')) {
            $('#failureid').css("background-color", "#4596ce");
            $("#failureBoards").removeAttr("disabled")
            $("#fpStatus").removeAttr("disabled")
            $("#frStatus").removeAttr("disabled")
            $("#failurelabel").html("")
        } else {
            $('#failureid').css("background-color", "#d6d6d6");
            $("#failureBoards").attr("disabled", "disabled")
            $("#fpStatus").attr("disabled", "disabled");
            $("#frStatus").attr("disabled", "disabled");
            $("#failureBoards").val("");
            $("#fpStatus").val("");
            $("#frStatus").val("");
            $("#failurelabel").html("Enable Creation of Ticket for Failure Backup.")
        }
    });
    $("#missedcheck").on("change", function () {
        if ($("#missedcheck").is(':checked')) {
            $('#missedid').css("background-color", "#4596ce");
            $("#missedBoards").removeAttr("disabled")
            $("#mpStatus").removeAttr("disabled")
            $("#mrStatus").removeAttr("disabled")
            $("#missedlabel").html("")
        } else {
            $('#missedid').css("background-color", "#d6d6d6");
            $("#missedBoards").attr("disabled", "disabled")
            $("#mpStatus").attr("disabled", "disabled");
            $("#mrStatus").attr("disabled", "disabled");
            $("#missedBoards").val("");
            $("#mpStatus").val("");
            $("#mrStatus").val("");
            $("#missedlabel").html("Enable Creation of Ticket for Missed Backup.")
        }
    });
    $("#miscellaneouscheck").on("change", function () {
        if ($("#miscellaneouscheck").is(':checked')) {
            $('#miscellaneousid').css("background-color", "#4596ce");
            $("#miscellaneousBoards").removeAttr("disabled")
            $("#mipStatus").removeAttr("disabled")
            $("#mirStatus").removeAttr("disabled")
            $("#miscellaneouslabel").html("")
        } else {
            $('#miscellaneousid').css("background-color", "#d6d6d6");
            $("#miscellaneousBoards").attr("disabled", "disabled")
            $("#mirStatus").attr("disabled", "disabled");
            $("#miscellaneousBoards").val("");
            $("#mipStatus").attr("disabled", "disabled");
            $("#mipStatus").val("");
            $("#mirStatus").val("");
            $("#miscellaneouslabel").html("Enable Creation of Ticket for Miscellaneous  Alerts.")
        }
    });

    $("#snpNotes").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#delProtectedSys").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#importMigratePS").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#seedProtectedSystem").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#replication-modal").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            viewDetails(window.ptsid);
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#bootEnable").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr('ui-btn-active');
        },
        popupafterclose: function (event, ui) {
            viewDetails(window.ptsid);
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#migratePopup").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#altMsgPopup").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#virtualizationSettings").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#exportSettings").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#iscsiSettings").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#encryptPass").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#stop").bind({
        popupafteropen: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#lipslink').attr("disabled", "disabled");
        }
    });
    $("#confirmShutdown").bind({
        popupafteropen: function (event, ui) {
            $('#liselink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#liselink').attr("disabled", "disabled");
        }
    });
    $("#delCluster").bind({
        popupafteropen: function (event, ui) {
            $('#licllink').attr("disabled", "disabled");
        },
        popupafterclose: function (event, ui) {
            $('#licllink').attr("disabled", "disabled");
        }
    });
    var oeTable = $('#ebandwidthTbl').dataTable($.extend({}, defaultDataTablesOptions, {
        "bSort": false,
        "sDom": '<"top"lp>rt<"clear">rtip',
        "bAutoWidth": false,
        "aoColumns": [
            {
                "sWidth": "450px"
            },
            {
                "sWidth": "auto"
            },
            {
                "sWidth": "auto"
            },
            {
                "sWidth": "auto"
            },
            {
                "sWidth": "auto"
            }
        ]
    }));
    var oaTable = $('#bandwidthTbl').dataTable($.extend({}, defaultDataTablesOptions, {
        "bSort": false,
        "sDom": '<"top"lp>rt<"clear">rtip',
        "bAutoWidth": false,
        "aoColumns": [
            {
                "sWidth": "450px"
            },
            {
                "sWidth": "auto"
            },
            {
                "sWidth": "auto"
            },
            {
                "sWidth": "auto"
            },
            {
                "sWidth": "auto"
            }
        ]
    }));
    $("#vaultAddress").on("click", function () {
        checkvip('asVault');
    });
    $("#evaultAddress").on("click", function () {
        checkvip('esVault');
    });
    $("#nwInterfaces").on("change", function () {
        $("#elements> *").hide();
        if ($("#nwInterfaces").val() == "") {
            $("#elements> *").hide();
        } else {
            setNwDetails();
            $("#nwConfig").show();
        }
        $("input[type='radio']").on("change", function () {
            setNwDetails();
            if ($(this).val() == "radioDhcp") {
                $('#nwConfig input[type="text"]').attr("disabled", "disabled");
                $('#radioStatic').prop('checked', false);
                $('#radioDhcp').prop('checked', true);
                $('#lradioDhcp').addClass('active');
                $('#lradioStatic').removeClass('active');

            } else if ($(this).val() == "radioStatic") {
                $('#nwConfig input[type="text"]').removeAttr("disabled", "disabled");
                $('#radioDhcp').prop('checked', false);
                $('#radioStatic').prop('checked', true);
                $('#lradioStatic').addClass('active');
                $('#lradioDhcp').removeClass('active');

            }
        });
    });
});
$.fn.dataTableExt.oApi.fnResetAllFilters = function (oSettings, bDraw /*default true*/ ) {
    for (iCol = 0; iCol < oSettings.aoPreSearchCols.length; iCol++) {
        oSettings.aoPreSearchCols[iCol].sSearch = '';
    }
    oSettings.oPreviousSearch.sSearch = '';

    if (typeof bDraw === 'undefined') bDraw = true;
    if (bDraw) this.fnDraw();
}
jQuery.fn.dataTableExt.oApi.fnSetFilteringDelay = function (oSettings, iDelay) {
    /*
     * Type:        Plugin for DataTables (www.datatables.net) JQuery plugin.
     * Name:        dataTableExt.oApi.fnSetFilteringDelay
     * Version:     1.0.0
     * Description: Enables filtration delay for keeping the browser more
     *              responsive while searching for a longer keyword.
     * Inputs:      object:oSettings - dataTables settings object
     *              integer:iDelay - delay in miliseconds
     * Returns:     JQuery
     * Usage:       $('#example').dataTable().fnSetFilteringDelay(250);
     *
     * Author:      Zygimantas Berziunas (www.zygimantas.com)
     * Created:     7/3/2009
     * Language:    Javascript
     * License:     GPL v2 or BSD 3 point style
     * Contact:     zygimantas.berziunas@hotmail.com
     */

    iDelay = (iDelay && (/^[0-9]+$/.test(iDelay))) ? iDelay : 250;

    var $this = this,
        oTimerId;

    // Unfortunately there is no nFilter inside oSettings.
    var anControl = $('div.dataTables_filter input:text');

    anControl.off("keyup").on("keyup", function () {

        var $$this = $this;
        window.clearTimeout(oTimerId);

        oTimerId = window.setTimeout(function () {

            $$this.fnFilter(anControl.val());
        }, iDelay);
    });
    return this;
}
$.fn.dataTableExt.oApi.fnReloadAjax = function (oSettings, sNewSource, fnCallback, bStandingRedraw) {
    if (typeof sNewSource != 'undefined' && sNewSource != null) {
        oSettings.sAjaxSource = sNewSource;
    }

    // Server-side processing should just call fnDraw
    if (oSettings.oFeatures.bServerSide) {
        this.fnDraw();
        return false;
    }

    this.oApi._fnProcessingDisplay(oSettings, true);
    var that = this;
    var iStart = oSettings._iDisplayStart;
    var aData = [];

    this.oApi._fnServerParams(oSettings, aData);

    oSettings.fnServerData.call(oSettings.oInstance, oSettings.sAjaxSource, aData, function (json) {
        /* Clear the old information from the table */
        that.oApi._fnClearTable(oSettings);

        /* Got the data - add it to the table */
        var aData = (oSettings.sAjaxDataProp !== "") ?
            that.oApi._fnGetObjectDataFn(oSettings.sAjaxDataProp)(json) : json;

        for (var i = 0; i < aData.length; i++) {
            that.oApi._fnAddData(oSettings, aData[i]);
        }

        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

        if (typeof bStandingRedraw != 'undefined' && bStandingRedraw === true) {
            oSettings._iDisplayStart = iStart;
            that.fnDraw(false);
        } else {
            that.fnDraw();
        }
        that.oApi._fnProcessingDisplay(oSettings, false);

        /* Callback user function - for event handlers etc */
        if (typeof fnCallback == 'function' && fnCallback != null) {
            fnCallback(oSettings);
        }
    }, oSettings);
};

jQuery.fn.dataTableExt.oSort['actionable-asc'] = function (a, b) {
    a = $(a).text();
    b = $(b).text();
    return ((a < b) ? -1 : ((a > b) ?  1 : 0));
};

jQuery.fn.dataTableExt.oSort['actionable-desc']  = function (a, b) {
    a = $(a).text();
    b = $(b).text();
    return ((a < b) ? 1 : ((a > b) ?  -1 : 0));
};

function sessionTimeout(result) {
    if (showTLSSessionExpiredMsgIfError(result?.responseText, result?.status)) {
        return false;
    } else if (showSessionTimedOutIfUnauthorized(result?.responseText, result?.status)) {
        return false;
    }
}

function snapDT(snapid, splitName) {
  if (splitName) {
     snapid = snapid.split("@").pop();
  }
  var str = snapid.split("_");
  var date = new Date(str[0], str[1] - 1, str[2], str[3], str[4], str[5]);
  if (date.toString() != 'Invalid Date') {
    return formatDate(date.getTime() / 1000); // divide by 1000 because formatDate expects seconds not ms
  } else {
    return "N/A";
  }
}

function modalalert(id, msgs) {
    msgs = "" + msgs; //force conversion to string
    $(".imgloader").html("<img src='style/images/ajax-loader.gif' />");
    $("#alertmsg").html(msgs);
    if (msgs.length > 120) {
        $(".msgdialog").addClass("msgdialogwide");
    } else {
        $(".msgdialogwide").removeClass("msgdialogwide");
    }
    $('#' + id).modal('show');
    $('body').addClass('displayblock');
}

window.addEventListener("load", function () {
    if ($.jStorage.get("username") !== "admin") {
        $("#addUserButton").hide();
        $("#enable-ftps-check").prop("disabled", "disabled");
    }
});

$('#custom-all').on('change keyup', function () {
    updateAfterDays($(this).val());
});

function updateAfterDays(days) {
    var unit = days == 1 ? 'day' : 'days';
    $('.after-days').text(days + ' ' + unit);
}
function stopAskingForAutoEnableRemoteAssistApprovement() {
  $.ajax({
    type: "POST",
    url: "api/settings/ask_for_auto_enable_remote_assist_on_upgrade/set_settings",
    data: JSON.stringify({required: false}),
    contentType: "application/json; charset=utf-8",
    dataType: "json",
    success: function (response) {
      if (response.status !== "ok") {
        showModalAlertWithTimeout(response.msg);
      }
    },
    error: function (result) {
      showModalAlertWithTimeout('Failed');
    }
  });
}

function AutoEnableRemoteAssistRejected() {
  stopAskingForAutoEnableRemoteAssistApprovement();
}

function AutoEnableRemoteAssistApproved() {
  stopAskingForAutoEnableRemoteAssistApprovement();
  setAutoEnableRemoteAssist(true);
}

function showAutoEnableRemoteAssistModal() {
  $.ajax({
    url: 'api/needToAskAboutAutoEnableRemoteAssist',
    type: 'GET',
    contentType: 'application/json; charset=utf-8',
    dataType: 'json',
    success: function (data) {
      if (data.required === true) {
        $('#auto-enable-remote-assist-modal').modal('show');
      }
    }
  });
}

function subArrays(array1, array2) {
    return array1.filter(element => !array2.includes(element));
}

function setOptionsState(mainId, ids, state) {
  let selector = ids.map(id => "#" + id).join(",");
  mainId.find(selector).prop("checked", state);
  selector = ids.map(id => "#" + id + "_label").join(",");
  mainId.find(selector).toggle(state);
}

function showRunAnalysisToolModal() {
  var $modal = $("#run-analysis-tool-modal");
  $modal.find('input[name=ticket_id]').val("");

  let fields_to_show = ["eventsapp24", "eventssys24", "serviceinventory", "softwareinventory", "vss_inventory", "volumecheck", "systemfilechecks"];
  let fields_to_hide = []
  if ($.jStorage.get("osType") == OS_TYPE_LINUX) {
    fields_to_hide = ["vss_inventory", "volumecheck", "systemfilechecks"];
  }else if ($.jStorage.get("osType") == OS_TYPE_MACOS) {
    fields_to_hide = ["eventsapp24", "eventssys24", "vss_inventory", "volumecheck", "systemfilechecks"];
  };
  fields_to_show = subArrays(fields_to_show, fields_to_hide);

  setOptionsState($modal, fields_to_show, true);
  setOptionsState($modal, fields_to_hide, false);

  $modal.find('#systemfilechecks').prop("checked", false);
  $modal.modal('show');
}

$('#run-analysis-tool-btn').on("click", function () {
  var $modal = $("#run-analysis-tool-modal");

  var psId = $.jStorage.get("psystemid");
  var jobType = 1;
  var params = {};

  var ticketId = $modal.find('input[name=ticket_id]').val();
  if (ticketId) {
    params['ticket'] = ticketId;
  }

  $modal.find('input[type=checkbox]').each(function () {
    var $input = $(this);
    var key = "no_" + $input.attr('name');
    var value = !$input.prop('checked');
    params[key] = value;
  });

  createRemoteManagementJob(psId, jobType, params)

  $modal.modal('hide');
  modalalert('showalerts', "Processing...");
  return false;
});

// This function was taken from
// https://stackoverflow.com/questions/6832596/how-to-compare-software-version-number-using-js-only-number
function versionCompare(v1, v2, options) {
  var lexicographical = options && options.lexicographical,
    zeroExtend = options && options.zeroExtend,
    v1parts = v1.split('.'),
    v2parts = v2.split('.');

  function isValidPart(x) {
    return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
  }

  if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
    return NaN;
  }

  if (zeroExtend) {
    while (v1parts.length < v2parts.length) v1parts.push("0");
    while (v2parts.length < v1parts.length) v2parts.push("0");
  }

  if (!lexicographical) {
    v1parts = v1parts.map(Number);
    v2parts = v2parts.map(Number);
  }

  for (var i = 0; i < v1parts.length; ++i) {
    if (v2parts.length == i) {
      return 1;
    }

    if (v1parts[i] == v2parts[i]) {
      continue;
    }
    else if (v1parts[i] > v2parts[i]) {
      return 1;
    }
    else {
      return -1;
    }
  }

  if (v1parts.length != v2parts.length) {
    return -1;
  }

  return 0;
}

function updateInfinityCloudControls() {
  if (isInfinityCloudVault()) {
    $('#cluster').remove();
    $('#store').remove();
    $('#userTable').find("[data-column='quota']").text('');
    $('#export_image_quota').remove();
  }
}

function isPrivateVault() {
    return isVault() && !isAxcientCloud();
}

function isPrivateVaultAdmin() {
    return isPrivateVault() && isAdmin();
}

function isInfinityCloudVault() {
  return $.jStorage.get('isInfinityCloudVault')
}

function isOpenNebula() {
  return $.jStorage.get('isOpenNebula');
}

function isAxcientCloud() {
  return $.jStorage.get('isAxcientCloud');
}

function updateClusterControls() {
  var isCluster = $.jStorage.get('isClustered')
  $('#cluster').toggle(isCluster);
}

function addButtons(name, excludeLastColumn, columns, exportOptions) {
    excludeLastColumn = excludeLastColumn || false;
    exportOptions = exportOptions || {};
    columns = columns || false;
    var filename = 'Backup Manager - ' + name;
    if (excludeLastColumn) {
        exportOptions.columns = (columns || '') + ':not(:last-child)';
    } else if (columns) {
        exportOptions.columns = columns;
    }
    return [
        {
            extend: 'copyHtml5',
            text: 'Copy',
            titleAttr: 'Copy',
            className: 'DTTT_button DTTT_button_copy',
            title: '',
            exportOptions: exportOptions,
            copySuccess: {
                1: "Copied one row to clipboard",
                _: "Copied %d rows to clipboard",
            },
        },
        {
            extend: 'csvHtml5',
            text: 'CSV',
            titleAttr: 'CSV',
            className: 'DTTT_button DTTT_button_csv',
            title: '',
            filename: filename,
            exportOptions: exportOptions,
        },
        {
            extend: 'excelHtml5',
            text: 'Excel',
            titleAttr: 'Export to Excel',
            className: 'DTTT_button DTTT_button_xls',
            title: '',
            filename: filename,
            exportOptions: exportOptions,
        },
        {
            extend: 'pdfHtml5',
            text: 'PDF',
            titleAttr: 'PDF',
            className: 'DTTT_button DTTT_button_pdf',
            title: '',
            filename: filename,
            exportOptions: exportOptions,
        },
        {
            extend: 'print',
            className: 'DTTT_button DTTT_button_print',
            title: '',
            exportOptions: exportOptions,
        },
    ];
}

function switchToAllTab() {
    if ($('.snapshots-table').hasClass("hidden")) {
        var snapshotTabAll = $('.snapshot-tab-all');
        var snapshotTabInUse = $('.snapshot-tab-inuse');
        snapshotTabInUse.removeClass("btn-primary");
        snapshotTabInUse.addClass("btn-default");
        snapshotTabAll.removeClass("btn-default");
        snapshotTabAll.addClass("btn-primary");
        $('.snapshots-table').removeClass("hidden");
        $('.used-snapshots-table').addClass("hidden");
    }
}

function switchToInUseTab() {
    if ($('.used-snapshots-table').hasClass("hidden")) {
        var snapshotTabAll = $('.snapshot-tab-all');
        var snapshotTabInUse = $('.snapshot-tab-inuse');
        snapshotTabAll.removeClass("btn-primary");
        snapshotTabAll.addClass("btn-default");
        snapshotTabInUse.removeClass("btn-default");
        snapshotTabInUse.addClass("btn-primary");
        $('.snapshots-table').addClass("hidden");
        $('.used-snapshots-table').removeClass("hidden");
    }
}

function getSmartRecoveryUsage(data) {
    var smartRecoveryUsage = $.ajax({
        type: "POST",
        url: "api/askForSmartRecoveryUsage",
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify(data),
        dataType: "json",
        async: false
    }).responseText;
    smartRecoveryUsage = (smartRecoveryUsage == undefined) ? "" : smartRecoveryUsage;

    if (showSessionTimedOutIfUnauthorized(smartRecoveryUsage)) {
        return false;
    }

    smartRecoveryUsage = JSON.parse(smartRecoveryUsage);
    return smartRecoveryUsage['ask_for_smart_recovery_usage'];
}

function smartRecoveryUsageCheck(elem, psId, snapUrl) {
    if (!psId) {
        elementVisibility(elem, false);
        return false;
    }
    var data = {
        ps_id: psId
    };
    if (snapUrl) {
        data["snapshot_time"] = snapUrl.split('@')[1];
    }

    var smartRecoveryUsage = getSmartRecoveryUsage(data);
    elementVisibility(elem, smartRecoveryUsage);
    return smartRecoveryUsage;
}

function elementVisibility(elem, show) {
    if (!show || elem.hasClass("unavailable")) {
        if (!elem.hasClass("hidden")) {
            elem.addClass("hidden");
        }
    } else {
        elem.removeClass("hidden");
    }
}

function setBootVMSmartRecoveryIfAvailable(psid) {
    if (!$("#useSmartRecovery-bootVm-block").hasClass('unavailable') && $("#useSmartRecovery-bootVm").prop('checked') != undefined) {
        setPsValues("bootVMSmartRecovery", $("#bVm").prop('checked') && $("#useSmartRecovery-bootVm").prop('checked'), psid);
    }
}

function getAgentInstallers() {
    var agentInstallers = $.ajax({
        type: "POST",
        url: "api/getAgentInstallers",
        contentType: "application/json; charset=utf-8",
        async: false
    }).responseText;
    agentInstallers = (agentInstallers == undefined) ? "" : agentInstallers;

    if (showSessionTimedOutIfUnauthorized(agentInstallers)) {
        return false;
    }

    return JSON.parse(agentInstallers);
}

function chooseBackupAgentForD2C(id) {
    var agentInstallers = getAgentInstallers();
    var agentTypeHtml = "";
    $.each(agentInstallers, function (key, installer) {
        agentTypeHtml += "<option value=" + installer["file"] + ">" + installer["name"] + "</option>";
    });
    $("#d2c-agent-download-link").data("id", id);
    $("#d2c-agent-type").html(agentTypeHtml);
    $("#download-d2c-backup-agent").modal('show');
}

function downloadBackupAgentForD2C() {
    $("#agent-type").val();
    var id = $("#d2c-agent-download-link").data("id");
    var agentType = $("#d2c-agent-type").val();

    var d2cAgentDownloadUrl = "api/getD2CAgent";
    var a = document.createElement("a");
    a.href = d2cAgentDownloadUrl.concat('/', id, '/', agentType);
    document.body.appendChild(a);
    a.click();
    a.remove();
}

function getDownloadLinkForLinuxAgent(uid) {
    let d2ctoken = getD2Ctoken(uid);
    let agentDownloadLink = 'wget -q \"https://updates.axcient.cloud/xcloud-agent/install_agent.py\"; chmod +x install_agent.py; ./install_agent.py';
    if (d2ctoken) {
      agentDownloadLink += ' -t ' + d2ctoken;
    }
    return agentDownloadLink;
}

function getDownloadLinkForMacOSAgent(uid) {
    let agentDownloadLink = "";

    $.ajax({
        type: "POST",
        url: "/api/utilities/abc/macos_install_cmd",
        async: false,
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify({"userId": uid}),
        success: function (data) {
            if (data.command) {
                agentDownloadLink = data.command;
            }
        },
    });

    return agentDownloadLink;
}

function showLinuxAgentDownloadInfo(uid) {
    let linuxDownloadLink = getDownloadLinkForLinuxAgent(uid);
    $("#show-linux-agent-download-info").modal('show');
    document.getElementById('linux-agent-cmd-download').value = linuxDownloadLink;
}

function showMacOSAgentDownloadInfo(uid) {
    let macOSDownloadLink = getDownloadLinkForMacOSAgent(uid);
    $("#show-macos-agent-download-info").modal('show');
    document.getElementById('macos-agent-cmd-download').value = macOSDownloadLink;
}

function showD2CTokenInfo(uid, userName) {
    let token = getD2Ctoken(uid);
    $("#modal-d2c-token-value").val(token);
    $("#modal-d2c-token-refresh").off().on("click", function () {
        $("#modal-d2c-token-value").val("Loading...");
        setTimeout(function() {
            $("#modal-d2c-token-value").val(getD2Ctoken(uid, true));
        }, 10);
    })
    $("#modal-d2c-token-client").html("Client code: " + userName)
    $("#modal-d2c-token-info").modal('show');
}

function showLinuxAgentDownloadInfoAppliance() {
    $("#linux-agent-download-info-appliance").modal('show');
}

function showMacOSAgentDownloadInfoAppliance() {
    $("#macos-agent-download-info-appliance").modal('show');
}

function setBootVMVirtio(psid) {
    if ($("#useVirtio-bootVm").prop('checked') != undefined) {
      setPsValues("bootVMVirtio", $("#bVm").prop('checked') && $("#useVirtio-bootVm").prop('checked'), psid);
    }
}

function setBootVMChecksPolicyIfAvailable(psid) {
  if (!isInfinityCloudVault()) {
    return;
  }
  var value = {};
  value.enabled = $("#bVm").prop('checked');
  setPsValues("bootVMChecksPolicy", value, psid);
}

const entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;',
  '`': '&#x60;',
  '=': '&#x3D;'
};
function escapeHtml (string) {
  return String(string).replace(/[&<>"'`=\/]/g, function (s) {
    return entityMap[s];
  });
}

function prepareVolumesData(vval) {
    let tspace = (parseInt(vval.capacity) / 1073741824);

    let uspace = ((parseInt(vval.capacity) - parseInt(vval.freeSpace)) / 1073741824);
    if (Math.round(uspace) == 0) {
        uspace = ((parseInt(vval.capacity) - parseInt(vval.freeSpace)) / 1048576);
        uspace = Math.abs(uspace).toFixed(2) + ' MB';
    } else {
        uspace = Math.abs(uspace).toFixed(2) + ' GB';
    }

    let mntPoint = vval.mountPointNames.join(' ');
    mntPoint = mntPoint.replace('\\\\', "");
    let re = new RegExp('[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}');
    let m = re.exec(vval.uuid);
    //Skips assigning non-standard UUID formats
    let uuid = (m !== null) ? m.join("\n") : vval.uuid;

    return {
        'tspace' : tspace,
        'uspace' : uspace,
        'mntPoint' : mntPoint,
        'uuid' : uuid
    };
}

function copyToClipboard(text) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(text)
    } else {
        // fallback for comatibility
        var textarea = document.createElement("textarea");
        textarea.textContent = text;
        textarea.style.position = "fixed";  // Prevent scrolling to bottom of page in Microsoft Edge.
        document.body.appendChild(textarea);
        textarea.select();
        try {
            return document.execCommand("copy");  // Security exception may be thrown by some browsers.
        } catch (e) {
            return prompt("Copy to clipboard: Ctrl+C, Enter", text);
        } finally {
            document.body.removeChild(textarea);
        }
    }
}

function copyLinuxAgentInstallCMD() {
    copyToClipboard($("#linux-agent-cmd").val());
}

function copyLinuxAgentInstallCMDDownload() {
    copyToClipboard($("#linux-agent-cmd-download").val());
}

function copyMacOSAgentInstallCMDDownload() {
    copyToClipboard($("#macos-agent-cmd-download").val());
}

function copyMacosAgentInstallCMD() {
    copyToClipboard($("#macos-agent-cmd").val());
}

function displayLinuxAndMacOSAgentDownloadButtons() {
    if (!isAppliance())  // only for appliances
        return;

    $.ajax({
        type: "GET",
        url: "/api/utilities/abc/get_linux_agent_install_info",
        success: function (data) {
            if (data.enabled && data.address && data.downloadUrl) {
                $("#linux-agent-cmd").val("wget -q " + data.downloadUrl + "; chmod +x install_agent.py; ./install_agent.py -a " + data.address);
                $("#macos-agent-cmd").val(data.macosCmd);
                $("#LinuxInstallationButton").show();
                changeVisibilityForMacOSElements(data.macosCmd);
            } else {
                hideLinuxAndMacOSAgentButtons();
            }
        },
        error: function () {
            hideLinuxAndMacOSAgentButtons();
        }
    });
}

function changeVisibilityForMacOSElements(macosInstallCmd) {
    if (isMacOSAgentEnabled() && macosInstallCmd) {
        $("#macosInstallationButton").show();
    } else {
        $("#macosInstallationButton").hide();
    }
}

function hideLinuxAndMacOSAgentButtons() {
    $("#LinuxInstallationButton").hide();
    $("#macosInstallationButton").hide();
}

function isLinuxAgentEnabled() {
    let response = false;
    $.ajax({
        type: "GET",
        url: "/api/utilities/abc/is_linux_agent_enabled",
        async: false,
        success: function (data) {
            if (data.enabled) {
                response = data.enabled;
            }
        },
    });
    return response;
}

function isMacOSAgentEnabled() {
    let response = false;
    $.ajax({
        type: "GET",
        url: "/api/utilities/abc/is_macos_agent_enabled",
        async: false,
        success: function (data) {
            if (data.enabled) {
                response = data.enabled;
            }
        },
    });
    return response;
}

function getD2Ctoken(uid, reset) {
    let response = false;
    $.ajax({
        type: "POST",
        url: "/api/utilities/" + uid + "/getD2CToken",
        async: false,
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify({"reset": reset || false}),
        success: function (data) {
            if (data.d2c_token) {
                response = data.d2c_token;
            }
        },
    });
    return response;
}

function checkSession() {
    $.ajax({
        type: "GET",
        url: "/api",
        error: function (data) {
            sessionTimeout(data);
        }
    })
}

function clearCachedSelection(elementId, time_value) {
  // Clears the selected attribute value for cached time options in dropdown menu
  let options = $(`#${elementId} option`);
  for (let i = 0; i < options.length; i++) {
      if (options[i].value == time_value) {
          $(options[i]).attr('selected', 'selected');
      } else {
        options[i].removeAttribute('selected');
      }
  }
}

let retentionView = $("#editRetention");

let retInputs = {}

const defaultRetentionSettings = {
    "isDefault": false,
    "desktop": {
        "method": "custom",
        "parameters": {
            "allDays": 7,
            "dailyDays": 7,
            "weeklyWeeks": 5,
            "monthlyMonths": 3,
            "yearlyYears": 0
        }
    },
    "server": {
        "method": "custom",
        "parameters": {
            "allDays": 7,
            "dailyDays": 7,
            "weeklyWeeks": 5,
            "monthlyMonths": 6,
            "yearlyYears": 0
        }
    }
}

function initActions(uid) {
    // Show/hide tiered settings
    retentionView.find("input[name$='-method']").unbind().on("change", function () {
        let isTiered = $(this).val() === "custom";
        let containerTiered = retentionView.find(`.${$(this).attr("name")}-custom`);
        let containerBasic = retentionView.find(`.${$(this).attr("name")}-basic`);
        containerTiered.toggle(isTiered);
        containerBasic.toggle(!isTiered);
        if (isTiered) {
            // Trigger input event to validate settings
            containerTiered.find("input").trigger("change");
        } else {
            // Hide error icons for settings
            containerBasic.find("input").trigger("change");
        }
    });

    // Update existing or create new retention policy
    retentionView.find("#ret-save").unbind().on("click", function () {
        saveRetentionPolicyAction(uid);
    });

    // Update "after days" text label
    retentionView.find("#ret-desktop-allDays").unbind().on("input", function () {
        retentionView.find(".ret-desktop-method-custom")
                     .find(".after-days").text(`${$(this).val()} days`);
    });

    // Update "after days" text label
    retentionView.find("#ret-server-allDays").unbind().on("input", function () {
        retentionView.find(".ret-server-method-custom")
                     .find(".after-days").text(`${$(this).val()} days`);
    });

    // Go back to retentions page
    $("#ret-cancel").unbind().on("click", function () {
        redirectToRetentionsTable();
    });

    retentionView.find("#ret-server-allDays, #ret-desktop-allDays").trigger("input"); 
}

function initRetentionView(uid) {
    retInputs = {
        name: retentionView.find("#ret-name"),
        description: retentionView.find("#ret-description"),
        isDefault: retentionView.find("#ret-default"),
    }
    retentionView.find(".icon-alarm").hide();
    retentionView.find('.retention-setting-field').parent().removeClass("invalid").find("div.error").text('');
    setRetentionLimits();
    setRetentionSettings(defaultRetentionSettings);
    if (uid) {
        getRetentionPolicy(uid);
    }
    initActions(uid);
}

function getRetentionValues() {
    let name = retInputs.name.val();
    let description = retInputs.description.val();
    let isDefault = retInputs.isDefault.is(":checked");

    data = {}

    for (let machineType of ["desktop", "server"]) {
        let method = retentionView.find(`input[name='ret-${machineType}-method']:checked`).val();
        data[machineType] = {
            method: method,
            parameters: {}
        }
        if (data[machineType].method == "custom") {
            for (let param of ["allDays", "dailyDays", "weeklyWeeks", "monthlyMonths", "yearlyYears"]) {
                data[machineType].parameters[param] = parseInt(retentionView.find(`input[name='ret-${machineType}-${param}']`).val());
            }
        } else {
            data[machineType].parameters["allDays"] = parseInt(retentionView.find(`input[name='ret-${machineType}-allDays-basic']`).val())
        }
    }

    return {
        name: name,
        description: description,
        isDefault: isDefault,
        desktop: data.desktop,
        server: data.server
    }
}

function setRetentionLimits() {
    for (let machineType of ["desktop", "server"]) {
        retentionView.find(`#ret-${machineType}-allDays-basic`)
                    .attr("min", getRetentionLimit(RETENTION_LIMITS_ALL, "MIN") || -1)
                    .attr("max", getRetentionLimit(RETENTION_LIMITS_ALL, "MAX") || 9999);
        retentionView.find(`#ret-${machineType}-allDays`)
                    .attr("min", getRetentionLimit(RETENTION_LIMITS_ALL, "MIN") || 1)
                    .attr("max", getRetentionLimit(RETENTION_LIMITS_ALL, "MAX") || 9999);
        retentionView.find(`#ret-${machineType}-dailyDays`)
                    .attr("min", getRetentionLimit(RETENTION_LIMITS_DAILY, "MIN") || 0)
                    .attr("max", getRetentionLimit(RETENTION_LIMITS_DAILY, "MAX") || 9999);
        retentionView.find(`#ret-${machineType}-weeklyWeeks`)
                    .attr("min", getRetentionLimit(RETENTION_LIMITS_WEEKLY, "MIN") || 0)
                    .attr("max", getRetentionLimit(RETENTION_LIMITS_WEEKLY, "MAX") || 9999);
        retentionView.find(`#ret-${machineType}-monthlyMonths`)
                    .attr("min", getRetentionLimit(RETENTION_LIMITS_MONTHLY, "MIN") || 0)
                    .attr("max", getRetentionLimit(RETENTION_LIMITS_MONTHLY, "MAX") || 9999); 
        retentionView.find(`#ret-${machineType}-yearlyYears`)
                    .attr("min", getRetentionLimit(RETENTION_LIMITS_YEARLY, "MIN") || 0)
                    .attr("max", getRetentionLimit(RETENTION_LIMITS_YEARLY, "MAX") || 9999);
    }
}

function setRetentionSettings(data) {
    $.jStorage.set('current-retention-edit', data);
    updateInputs(data.name);
    retInputs.name.val(data.name);
    retInputs.description.val(data.description);
    retInputs.isDefault.prop("checked", data.isDefault);
    retInputs.isDefault.prop("disabled", data.isDefault);

    for (let machineType of ["desktop", "server"]) {
        retentionView.find(`input[name='ret-${machineType}-method']`)
                     .filter(`[value='${data[machineType].method}']`)
                     .prop("checked", true)
                     .trigger("change");
        if (data[machineType].method == "basic") {
            retentionView.find(`input[name='ret-${machineType}-allDays-basic']`)
                         .val(data[machineType].parameters.allDays);
        } else {
            for (let param in data[machineType].parameters) {
                retentionView.find(`input[name='ret-${machineType}-${param}']`)
                             .val(data[machineType].parameters[param]);
            }
            retentionView.find(`input[name='ret-${machineType}-allDays-basic']`)
                         .val(1);
        }
    }
}

function validataInputRestrictions(input, period, invalidValues = []) {
    input = $(input);
    let container = input.parent();
    let error = container.find("div.error");
    let min = parseInt(input.attr("min"));
    let max = parseInt(input.attr("max"));
    let val = parseInt(input.val());
    let valid = true;
    let text = "";
    if (isNaN(val) || invalidValues.indexOf(val) !== -1) {
        text = "Invalid value";  
        valid = false;
    } else if (val < min) {
        text = "Cannot be less than " + min;
        valid = false;
    } else if (val > max) {
        text = "Cannot exceed " + max + " " + period;
        valid = false;
    }
    error.text(text);
    valid ? container.removeClass("invalid") : container.addClass("invalid");
    container.find(".icon-alarm").toggle(!valid);
}

function validateRetentionSettings() {
    let valid = true;
    retentionView.find(".icon-alarm").each(function() {
        if ($(this).css("display") !== "none") {
            valid = false;
            return false;
        }
    });
    return valid;
}

function updateInputs(name) {
    // Disable inputs for recommended and space saving policies
    let disableInputs = ["Recommended", "Space Saving"].indexOf(name) !== -1;
    retentionView.find("input[type='text'], input[type='number'], input[name$='-method'], textarea")
                 .prop("disabled", disableInputs);
}

function redirectToRetentionsTable(){
    redirect("#scheduler", function () {
        setTimeout(retentionsTable);
    });
}

function saveRetentionPolicyAction(uid) {
  if (!validateRetentionSettings()) {
    return showModalAlertWithTimeout("Please fix the errors before saving.");
  }
  let data = getRetentionValues();
  if (data.name === "") {
    return showModalAlertWithTimeout("Please enter a name for the retention policy.");
  }
  if (uid) {
    let initData = $.jStorage.get('current-retention-edit');
    let isShorterWorkstationPolicy = isSecondRetentionSettingLower(initData.desktop, data.desktop);
    let isShorterServerPolicy = isSecondRetentionSettingLower(initData.server, data.server);
    if (isShorterWorkstationPolicy) {
      $('#shorter-policy-msg .retention-workstation').show();
      updateRetentionMethodDescription(initData.desktop, '#shorter-policy-msg .retention-description-left.workstation');
      updateRetentionMethodDescription(data.desktop, '#shorter-policy-msg .retention-description-right.workstation', initData.desktop);
    } else {
      $('#shorter-policy-msg .retention-workstation').hide();
    }
    if (isShorterServerPolicy) {
      $('#shorter-policy-msg .retention-server').show();
      updateRetentionMethodDescription(initData.server, '#shorter-policy-msg .retention-description-left.server');
      updateRetentionMethodDescription(data.server, '#shorter-policy-msg .retention-description-right.server', initData.server);
    } else {
      $('#shorter-policy-msg .retention-server').hide();
    }
    if (isShorterWorkstationPolicy || isShorterServerPolicy) {
      $('#shorter-policy-msg').removeClass('change-retention-settings-case').addClass('edit-retention-policy-case');
      $('#close-shorter-policy-msg-btn').off('click');
      $('#set-retention-method-btn').off('click').on('click', function () {
        sendRetentionPolicy(uid, data);
      });
      $('#shorter-policy-msg').modal('show');
      return;
    }
  }
  sendRetentionPolicy(uid, data);
}

function sendRetentionPolicy(uid, data) {
    let url = uid ? `/api/retentions/${uid}` : "/api/retentions";
    let type = uid ? "PUT" : "POST";
    let msg = uid ? "Retention Policy updated successfully." : "Retention Policy created successfully.";
    $.ajax({
        type: type,
        async: false,
        url: url,
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            showModalAlertWithTimeout(msg);
            redirectToRetentionsTable();
        },
        error: function (errMsg) {
            if (errMsg.status === 409) {
                showModalAlertWithTimeout("Retention Policy already exists.");
            }
            redirectToRetentionsTable();
        }
    });
}

function getRetentionPolicy(uid) {
    $.ajax({
        type: "GET",
        async: false,
        url: "/api/retentions/" + uid,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            setRetentionSettings(data);
        },
        error: function () {
            redirect("#scheduler");
        }
    });
}
