version: 1

environment:
  php: 8.4
  php_extensions:
    - pcov
  node: 20

services:
  - postgres: 15
  - redis: latest

on:
  push:
    branches: .*
  pull_request:
    branches: .*

pipeline:
  - name: Setup Environment File
    cmd: |
      echo "APP_ENV=testing" > .env
      echo "APP_KEY=base64:$(openssl rand -base64 32)" >> .env
      echo "STRIPE_SECRET=sk_test_dummy" >> .env
      echo "STRIPE_PUBLISHABLE=pk_test_dummy" >> .env
      echo "DB_CONNECTION=pgsql" >> .env
      echo "DB_HOST=127.0.0.1" >> .env
      echo "DB_PORT=5432" >> .env
      echo "DB_DATABASE=nestogy_test" >> .env
      echo "DB_USERNAME=nestogy" >> .env
      echo "DB_PASSWORD=nestogy_dev_pass" >> .env
      echo "CACHE_STORE=redis" >> .env
      echo "REDIS_HOST=127.0.0.1" >> .env
      echo "REDIS_PORT=6379" >> .env

  - name: Install PCOV Extension
    cmd: |
      sudo apt-get update -qq
      sudo apt-get install -y -qq php8.4-pcov
      sudo phpenmod -v 8.4 -s cli pcov
      echo "memory_limit = 2G" | sudo tee -a /etc/php/8.4/cli/php.ini
      php -m | grep pcov
      php -r "echo 'Memory Limit: ' . ini_get('memory_limit') . PHP_EOL;"

  - name: Configure Flux Pro Credentials
    cmd: |
      echo "{\"http-basic\":{\"composer.fluxui.dev\":{\"username\":\"${FLUX_USERNAME}\",\"password\":\"${FLUX_PRO_TOKEN}\"}}}" > auth.json

  - name: Install Composer Dependencies
    cmd: composer install --no-ansi --no-interaction --no-progress --prefer-dist --no-scripts

  - name: Install NPM Dependencies
    cmd: npm ci

  - name: Build Assets
    cmd: npm run build

  - name: Run Database Migrations
    cmd: php artisan migrate --force --seed

  - name: Run Tests with Coverage
    cmd: vendor/bin/phpunit --coverage-clover=coverage.xml

  - name: Verify Coverage Generated
    cmd: |
      if [ -f coverage.xml ]; then
        echo "‚úÖ Coverage file generated successfully"
        echo "üìä Coverage file size: $(du -h coverage.xml | cut -f1)"
        echo "üìù First few lines of coverage:"
        head -n 10 coverage.xml
      else
        echo "‚ùå Coverage file not found!"
        exit 1
      fi

  - name: Upload to SonarCloud
    cmd: |
      if [ "$CHIPPER_CI_BRANCH" = "main" ] && [ -n "$SONAR_TOKEN" ]; then
        echo "üìä Uploading coverage to SonarCloud..."
        docker run --rm \
          -e SONAR_HOST_URL="https://sonarcloud.io" \
          -e SONAR_TOKEN="${SONAR_TOKEN}" \
          -v "$(pwd):/usr/src" \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=FoleyBridge-Solutions_Nestogy \
          -Dsonar.organization=foleybridge-solutions \
          -Dsonar.sources=app,routes,resources/views \
          -Dsonar.tests=tests \
          -Dsonar.php.coverage.reportPaths=coverage.xml \
          -Dsonar.sourceEncoding=UTF-8
        echo "‚úÖ SonarCloud scan complete!"
      else
        echo "‚è≠Ô∏è  Skipping SonarCloud (not main branch or SONAR_TOKEN not set)"
      fi

  - name: Deploy to Laravel Cloud
    cmd: |
      if [ "$CHIPPER_CI_BRANCH" = "main" ] && [ "$CHIPPER_CI_EVENT" = "push" ]; then
        echo "üöÄ Deploying to Laravel Cloud..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://cloud.laravel.com/deploy/9fbf5ee1-0a95-4c7a-80cd-33ef5cce3957/Wi1QZa0TPiaou4YJ")
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | head -n-1)
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ]; then
          echo "‚úÖ Deployment triggered successfully!"
          echo "Response: $BODY"
        else
          echo "‚ö†Ô∏è  Deployment returned status $HTTP_CODE"
          echo "Response: $BODY"
        fi
      else
        echo "‚è≠Ô∏è  Skipping deployment (not main branch push)"
      fi
